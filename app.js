import dotenv from 'dotenv';
dotenv.config();

import Decision from './src/Decision/Decision.js';
import { StrategyFactory } from './src/Decision/Strategies/StrategyFactory.js';
import TrailingStop from './src/TrailingStop/TrailingStop.js';
import PnlController from './src/Controllers/PnlController.js';
import { OrderController } from './src/Controllers/OrderController.js';
import { StrategySelector } from './src/Utils/StrategySelector.js';
import MultiBotManager from './src/MultiBot/MultiBotManager.js';
import AccountConfig from './src/Config/AccountConfig.js';
import readline from 'readline';

// BOT_MODE removido - sempre usa modo DEFAULT

// Inst√¢ncia global do Decision (ser√° inicializada com a estrat√©gia selecionada)
let decisionInstance = null;

// Vari√°veis para controle do timer geral
let globalTimerInterval = null;
let isMultiBotMode = false;

// Vari√°vel para controle do intervalo do trailing stop
let trailingStopInterval = 1000; // come√ßa em 1s
let trailingStopErrorCount = 0;
let trailingStopMaxInterval = 10000; // m√°ximo 10s
let trailingStopMinInterval = 500;   // m√≠nimo 0.5s
let trailingStopLastErrorTime = null;

// Fun√ß√£o para exibir timer geral unificado
function showGlobalTimer() {
  if (globalTimerInterval) {
    clearInterval(globalTimerInterval);
  }

  const durationMs = 60000; // 60 segundos
  const startTime = Date.now();
  const nextAnalysis = new Date(startTime + durationMs);
  const timeString = nextAnalysis.toLocaleTimeString('pt-BR', { 
    hour: '2-digit', 
    minute: '2-digit', 
    second: '2-digit',
    hour12: false 
  });

  // Intercepta console.log para manter o progresso no rodap√©
  const originalLog = console.log;
  const originalError = console.error;
  const originalWarn = console.warn;
  
  // Fun√ß√£o para limpar a linha do progresso
  const clearProgressLine = () => {
    process.stdout.write('\r' + ' '.repeat(process.stdout.columns || 80) + '\r');
  };
  
  // Fun√ß√£o para mostrar o progresso no rodap√©
  const showProgress = (progress, progressBar, percentage) => {
    // Move o cursor para o final da tela
    process.stdout.write('\x1b[9999;0H');
    // Limpa a linha atual
    clearProgressLine();
    // Mostra o progresso
    process.stdout.write('‚è≥ Aguardando pr√≥xima an√°lise... ');
    process.stdout.write(`[${progressBar}] ${percentage}% | Pr√≥xima: ${timeString}`);
  };

  // Intercepta console.log para manter o progresso no rodap√©
  console.log = (...args) => {
    // Filtra logs que podem quebrar a barra de progresso
    const message = args.join(' ');
    const isSpamLog = message.includes('Stop loss j√° existe') || 
                     message.includes('‚ÑπÔ∏è [CONTA') ||
                     message.includes('‚ö†Ô∏è [CONTA');
    
    // Se for log de spam, n√£o mostra para n√£o quebrar a barra
    if (isSpamLog) {
      return;
    }
    
    // Limpa a linha do progresso antes de mostrar o log
    clearProgressLine();
    // Mostra o log
    originalLog.apply(console, args);
    // Restaura o progresso no rodap√©
    const elapsed = Date.now() - startTime;
    const progress = Math.min((elapsed / durationMs) * 100, 100);
    const bars = Math.floor(progress / 5);
    const emptyBars = 20 - bars;
    const progressBar = '‚ñà'.repeat(bars) + '‚ñë'.repeat(emptyBars);
    const percentage = Math.floor(progress);
    showProgress(progress, progressBar, percentage);
  };

  // Intercepta console.error
  console.error = (...args) => {
    clearProgressLine();
    originalError.apply(console, args);
    const elapsed = Date.now() - startTime;
    const progress = Math.min((elapsed / durationMs) * 100, 100);
    const bars = Math.floor(progress / 5);
    const emptyBars = 20 - bars;
    const progressBar = '‚ñà'.repeat(bars) + '‚ñë'.repeat(emptyBars);
    const percentage = Math.floor(progress);
    showProgress(progress, progressBar, percentage);
  };

  // Intercepta console.warn
  console.warn = (...args) => {
    clearProgressLine();
    originalWarn.apply(console, args);
    const elapsed = Date.now() - startTime;
    const progress = Math.min((elapsed / durationMs) * 100, 100);
    const bars = Math.floor(progress / 5);
    const emptyBars = 20 - bars;
    const progressBar = '‚ñà'.repeat(bars) + '‚ñë'.repeat(emptyBars);
    const percentage = Math.floor(progress);
    showProgress(progress, progressBar, percentage);
  };

  globalTimerInterval = setInterval(() => {
    const elapsed = Date.now() - startTime;
    const progress = Math.min((elapsed / durationMs) * 100, 100);
    const bars = Math.floor(progress / 5);
    const emptyBars = 20 - bars;
    
    const progressBar = '‚ñà'.repeat(bars) + '‚ñë'.repeat(emptyBars);
    const percentage = Math.floor(progress);
    
    // Mostra o progresso no rodap√©
    showProgress(progress, progressBar, percentage);
    
    if (progress >= 100) {
      clearInterval(globalTimerInterval);
      // Restaura console.log original
      console.log = originalLog;
      console.error = originalError;
      console.warn = originalWarn;
      // Limpa a linha do progresso
      clearProgressLine();
      console.log('üîÑ Iniciando nova an√°lise...\n');
    }
  }, 1000);
}

// Fun√ß√£o para parar o timer geral
function stopGlobalTimer() {
  if (globalTimerInterval) {
    clearInterval(globalTimerInterval);
    globalTimerInterval = null;
  }
}

async function startDecision() {
  // Usa a inst√¢ncia global do Decision
  if (!decisionInstance) {
    console.error('‚ùå Inst√¢ncia do Decision n√£o inicializada');
    return;
  }
  
  // Para modo single, cria configura√ß√£o baseada na estrat√©gia selecionada
  let config = null;
  const strategy = process.env.TRADING_STRATEGY || 'DEFAULT';
  
  if (strategy === 'DEFAULT') {
    // Usa configura√ß√µes da CONTA1
    config = {
      volumeOrder: Number(process.env.ACCOUNT1_VOLUME_ORDER) || Number(process.env.VOLUME_ORDER) || 100,
      capitalPercentage: Number(process.env.ACCOUNT1_CAPITAL_PERCENTAGE) || Number(process.env.CAPITAL_PERCENTAGE) || 0,
      limitOrder: Number(process.env.ACCOUNT1_LIMIT_ORDER) || Number(process.env.LIMIT_ORDER) || 100,
      time: process.env.ACCOUNT1_TIME || process.env.TIME || '5m',
      accountId: 'CONTA1'
    };
  } else if (strategy === 'PRO_MAX') {
    // Usa configura√ß√µes da CONTA2
    config = {
      volumeOrder: Number(process.env.ACCOUNT2_VOLUME_ORDER) || Number(process.env.VOLUME_ORDER) || 100,
      capitalPercentage: Number(process.env.ACCOUNT2_CAPITAL_PERCENTAGE) || Number(process.env.CAPITAL_PERCENTAGE) || 0,
      limitOrder: Number(process.env.ACCOUNT2_LIMIT_ORDER) || Number(process.env.LIMIT_ORDER) || 100,
      time: process.env.ACCOUNT2_TIME || process.env.TIME || '5m',
      accountId: 'CONTA2',
      // Configura√ß√µes espec√≠ficas da estrat√©gia PRO_MAX
      ignoreBronzeSignals: process.env.ACCOUNT2_IGNORE_BRONZE_SIGNALS || process.env.IGNORE_BRONZE_SIGNALS || 'true',
      adxLength: Number(process.env.ACCOUNT2_ADX_LENGTH) || Number(process.env.ADX_LENGTH) || 14,
      adxThreshold: Number(process.env.ACCOUNT2_ADX_THRESHOLD) || Number(process.env.ADX_THRESHOLD) || 20,
      adxAverageLength: Number(process.env.ACCOUNT2_ADX_AVERAGE_LENGTH) || Number(process.env.ADX_AVERAGE_LENGTH) || 21,
      useRsiValidation: process.env.ACCOUNT2_USE_RSI_VALIDATION || process.env.USE_RSI_VALIDATION || 'true',
      useStochValidation: process.env.ACCOUNT2_USE_STOCH_VALIDATION || process.env.USE_STOCH_VALIDATION || 'true',
      useMacdValidation: process.env.ACCOUNT2_USE_MACD_VALIDATION || process.env.USE_MACD_VALIDATION || 'true',
      rsiLength: Number(process.env.ACCOUNT2_RSI_LENGTH) || Number(process.env.RSI_LENGTH) || 14,
      rsiAverageLength: Number(process.env.ACCOUNT2_RSI_AVERAGE_LENGTH) || Number(process.env.RSI_AVERAGE_LENGTH) || 14,
      rsiBullThreshold: Number(process.env.ACCOUNT2_RSI_BULL_THRESHOLD) || Number(process.env.RSI_BULL_THRESHOLD) || 45,
      rsiBearThreshold: Number(process.env.ACCOUNT2_RSI_BEAR_THRESHOLD) || Number(process.env.RSI_BEAR_THRESHOLD) || 55,
      stochKLength: Number(process.env.ACCOUNT2_STOCH_K_LENGTH) || Number(process.env.STOCH_K_LENGTH) || 14,
      stochDLength: Number(process.env.ACCOUNT2_STOCH_D_LENGTH) || Number(process.env.STOCH_D_LENGTH) || 3,
      stochSmooth: Number(process.env.ACCOUNT2_STOCH_SMOOTH) || Number(process.env.STOCH_SMOOTH) || 3,
      stochBullThreshold: Number(process.env.ACCOUNT2_STOCH_BULL_THRESHOLD) || Number(process.env.STOCH_BULL_THRESHOLD) || 45,
      stochBearThreshold: Number(process.env.ACCOUNT2_STOCH_BEAR_THRESHOLD) || Number(process.env.STOCH_BEAR_THRESHOLD) || 55,
      macdFastLength: Number(process.env.ACCOUNT2_MACD_FAST_LENGTH) || Number(process.env.MACD_FAST_LENGTH) || 12,
      macdSlowLength: Number(process.env.ACCOUNT2_MACD_SLOW_LENGTH) || Number(process.env.MACD_SLOW_LENGTH) || 26,
      macdSignalLength: Number(process.env.ACCOUNT2_MACD_SIGNAL_LENGTH) || Number(process.env.MACD_SIGNAL_LENGTH) || 9
    };
  }
  
  await decisionInstance.analyze(null, null, config);
  
  // Inicia o timer geral ap√≥s cada an√°lise
  showGlobalTimer();
  
  setTimeout(startDecision, 60000); //1m
}

async function startStops() {
  try {
    await TrailingStop.stopLoss();
    // Se sucesso, reduz gradualmente o intervalo at√© o m√≠nimo
    if (trailingStopInterval > trailingStopMinInterval) {
      trailingStopInterval = Math.max(trailingStopMinInterval, trailingStopInterval - 250);
      // if (trailingStopInterval === trailingStopMinInterval) {
      //   console.log(`‚è±Ô∏è [TRAILING] Intervalo m√≠nimo atingido: ${trailingStopInterval}ms`);
      // }
    }
    trailingStopErrorCount = 0;
  } catch (error) {
    // Detecta erro de rate limit (HTTP 429 ou mensagem)
    if (error?.response?.status === 429 || String(error).includes('rate limit') || String(error).includes('429')) {
      trailingStopErrorCount++;
      trailingStopLastErrorTime = Date.now();
      // Aumenta o intervalo exponencialmente at√© o m√°ximo
      trailingStopInterval = Math.min(trailingStopMaxInterval, trailingStopInterval * 2);
      console.warn(`‚ö†Ô∏è [TRAILING] Rate limit detectado! Aumentando intervalo para ${trailingStopInterval}ms`);
    } else {
      console.error('[TRAILING] Erro inesperado no trailing stop:', error.message || error);
    }
  }
  setTimeout(startStops, trailingStopInterval);
}

// Fun√ß√£o para exibir status do stop loss din√¢mico
function showDynamicStopLossStatus() {
  try {
    const status = TrailingStop.getCurrentStopLossValues();
    const stopLossType = process.env.STOP_LOSS_TYPE || 'USD';
    
    console.log('\nüõ°Ô∏è STATUS DO STOP LOSS DIN√ÇMICO');
    console.log('='.repeat(40));
    console.log(`üìä Tipo: ${stopLossType}`);
    console.log(`üí∞ Stop Loss USD: $${status.usd.toFixed(2)}`);
    console.log(`üìà Stop Loss %: ${status.percentage.toFixed(2)}%`);
    console.log(`üî¢ Total de fechamentos: ${status.totalCloses}`);
    console.log(`‚ö†Ô∏è Fechamentos prematuros: ${status.prematureCloses}`);
    console.log(`‚è∞ Fechamentos tardios: ${status.lateCloses}`);
    
    if (status.totalCloses > 0) {
      const prematureRate = (status.prematureCloses / status.totalCloses * 100).toFixed(1);
      const lateRate = (status.lateCloses / status.totalCloses * 100).toFixed(1);
      console.log(`üìä Taxa prematuros: ${prematureRate}%`);
      console.log(`üìä Taxa tardios: ${lateRate}%`);
    }
    
    console.log('='.repeat(40));
  } catch (error) {
    console.error('Erro ao exibir status do stop loss:', error.message);
  }
}

// Monitoramento r√°pido de ordens pendentes (apenas estrat√©gia PRO_MAX)
let monitorInterval = 5000; // 5 segundos padr√£o

async function startPendingOrdersMonitor() {
  // No modo conta √∫nica, o monitoramento √© feito pelo BotInstance no modo multi-conta
  // Esta fun√ß√£o √© mantida apenas para compatibilidade
  setTimeout(startPendingOrdersMonitor, monitorInterval);
}

// Fun√ß√£o para exibir menu de sele√ß√£o de modo interativo (simplificado)
async function showModeSelectionMenu(hasMultiAccountConfig) {
  return new Promise((resolve) => {
    console.log('\nü§ñ BACKBOT - Configura√ß√£o Inicial');
    console.log('=====================================\n');
    console.log('üìã Escolha como deseja operar:\n');
    
    console.log('1Ô∏è‚É£  Estrat√©gia VOLUMES (PADR√ÉO)');
    console.log('   üìä Foco: Volume na corretora');
    console.log('   üéØ Ideal para: Fazer volume na corretora');
    console.log('   üí° Caracter√≠sticas:');
    console.log('      ‚Ä¢ Sinais mais frequentes');
    console.log('      ‚Ä¢ Stop loss din√¢mico');
    console.log('      ‚Ä¢ Take profit √∫nico');
    console.log('      ‚Ä¢ Ideal para corretoras que pagam por volume\n');
    
    console.log('2Ô∏è‚É£  Estrat√©gia LUCRO (PRO MAX) [BETA]');
    console.log('   üìà Foco: Lucro por opera√ß√£o');
    console.log('   üéØ Ideal para: Lucro por opera√ß√£o, com stop loss din√¢mico e take profit com alvos.');
    console.log('   üí° Caracter√≠sticas:');
    console.log('      ‚Ä¢ Sinais filtrados por qualidade (BRONZE/SILVER/GOLD/DIAMOND)');
    console.log('      ‚Ä¢ M√∫ltiplos take profits');
    console.log('      ‚Ä¢ Stop loss baseado em ATR\n');
    
    console.log('3Ô∏è‚É£  Sair\n');
    
    console.log('üí° Digite o n√∫mero da op√ß√£o desejada');
    
    const rl = readline.createInterface({
      input: process.stdin,
      output: process.stdout
    });
    
    rl.question('\nEscolha (1-3): ', (answer) => {
      rl.close();
      const choice = parseInt(answer.trim());
      
      if (choice === 1) {
        resolve('DEFAULT');
      } else if (choice === 2) {
        resolve('PRO_MAX');
      } else if (choice === 3) {
        resolve('exit');
      } else {
        console.log('‚ùå Op√ß√£o inv√°lida. Tente novamente.');
        resolve(showModeSelectionMenu(hasMultiAccountConfig));
      }
    });
  });
}

// Fun√ß√£o para inicializar ou re-inicializar a estrat√©gia do Decision
function initializeDecisionStrategy(strategyType) {
  if (!strategyType) {
    console.log('‚ö†Ô∏è StrategyType n√£o fornecido para inicializa√ß√£o');
    return;
  }
  
  // Cria nova inst√¢ncia do Decision com a estrat√©gia selecionada
  decisionInstance = new Decision(strategyType);
  console.log(`‚úÖ Inst√¢ncia do Decision inicializada com estrat√©gia: ${strategyType}`);
}

// Fun√ß√£o principal para iniciar o bot
async function startBot() {
  try {
    // Verifica se h√° configura√ß√µes de m√∫ltiplas contas
    const accountConfig = new AccountConfig();
    await accountConfig.initialize();
    const hasMultiAccountConfig = accountConfig.hasMultiAccountConfig();

    // Verifica se h√° pelo menos uma conta v√°lida
    if (!accountConfig.hasAnyAccount()) {
      console.log('‚ùå Nenhuma conta com credenciais v√°lidas encontrada!');
      console.log('   Configure as credenciais no arquivo .env:');
      console.log('   ‚Ä¢ ACCOUNT1_API_KEY e ACCOUNT1_API_SECRET');
      console.log('   ‚Ä¢ ACCOUNT2_API_KEY e ACCOUNT2_API_SECRET');
      process.exit(1);
    }

    // Verifica se a estrat√©gia foi definida via vari√°vel de ambiente
    const envStrategy = process.env.TRADING_STRATEGY;
    let selectedStrategy;

    if (envStrategy) {
      // Executa diretamente com a estrat√©gia definida
      selectedStrategy = envStrategy;
      console.log(`üöÄ Iniciando BackBot com estrat√©gia: ${selectedStrategy}`);
    } else {
      // Exibe menu de sele√ß√£o de estrat√©gia (simplificado)
      selectedStrategy = await showModeSelectionMenu(hasMultiAccountConfig);

      if (selectedStrategy === 'exit') {
        console.log('üëã Encerrando BackBot.');
        process.exit(0);
      }
    }

    // L√≥gica simplificada: op√ß√£o 2 sempre executa PRO MAX
    if (selectedStrategy === 'PRO_MAX') {
      // Estrat√©gia PRO_MAX = sempre modo multi-conta (mesmo com uma conta)
      console.log('üöÄ Iniciando BackBot em modo PRO MAX...\n');
      isMultiBotMode = true;
      const multiBotManager = new MultiBotManager();
      await multiBotManager.runMultiMode();
    } else {
      // Estrat√©gia DEFAULT = sempre modo conta √∫nica
      console.log('üöÄ Iniciando BackBot em modo Conta √önica...\n');
      isMultiBotMode = false;
      
      // Inicializa a estrat√©gia selecionada
      initializeDecisionStrategy(selectedStrategy);
      
      // Log da estrat√©gia selecionada
      console.log('üîë Estrat√©gia VOLUMES: usando credenciais da CONTA1');

      // Inicia o PnL Controller
      PnlController.run(24);

      // Inicia os servi√ßos
      console.log('üöÄ Iniciando servi√ßos...');
      startDecision();
      startStops();
      startPendingOrdersMonitor();
      // Monitoramento em tempo real das posi√ß√µes abertas a cada 5 segundos
      setInterval(() => {
        OrderController.checkForUnmonitoredPositions('DEFAULT');
      }, 5000);
    }

  } catch (error) {
    console.error('‚ùå Erro ao iniciar o bot:', error.message);
    process.exit(1);
  }
}

// Sistema de comandos interativos
function setupInteractiveCommands() {
  const rl = readline.createInterface({
    input: process.stdin,
    output: process.stdout
  });

  rl.on('line', (input) => {
    const command = input.trim().toLowerCase();
    
    switch (command) {
      case 'status':
        showDynamicStopLossStatus();
        break;
      case 'help':
        console.log('\nüí° Comandos dispon√≠veis:');
        console.log('   ‚Ä¢ "status" - Ver status do stop loss din√¢mico');
        console.log('   ‚Ä¢ "exit" - Sair do bot');
        console.log('   ‚Ä¢ "help" - Ver esta ajuda\n');
        break;
      case 'exit':
        console.log('\nüëã Encerrando BackBot...');
        process.exit(0);
        break;
      default:
        console.log('‚ùå Comando n√£o reconhecido. Digite "help" para ver os comandos dispon√≠veis.');
    }
  });
}

// Inicia o bot
startBot();

// Configura comandos interativos ap√≥s 3 segundos
setTimeout(() => {
  setupInteractiveCommands();
}, 3000);
