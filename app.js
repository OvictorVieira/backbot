import dotenv from 'dotenv';
dotenv.config();

// Define a URL da API se n√£o estiver definida
if (!process.env.API_URL) {
  process.env.API_URL = 'https://api.backpack.exchange';
}

import Decision from './src/Decision/Decision.js';
import { StrategyFactory } from './src/Decision/Strategies/StrategyFactory.js';
import TrailingStop from './src/TrailingStop/TrailingStop.js';
import PnlController from './src/Controllers/PnlController.js';
import OrderController from './src/Controllers/OrderController.js';
import { StrategySelector } from './src/Utils/StrategySelector.js';
import MultiBotManager from './src/MultiBot/MultiBotManager.js';
import AccountConfig from './src/Config/AccountConfig.js';
import TimeframeConfig from './src/Config/TimeframeConfig.js';
import ConfigManager from './src/Config/ConfigManager.js';
import readline from 'readline';

// BOT_MODE removido - sempre usa modo DEFAULT

// Inst√¢ncia global do Decision (ser√° inicializada com a estrat√©gia selecionada)
let decisionInstance = null;

// Configura√ß√£o do bot ativo
let activeBotConfig = null;

// Fun√ß√µes de timeframe movidas para TimeframeConfig.js

// Vari√°veis para controle do timer geral
let globalTimerInterval = null;
let isMultiBotMode = false;

// Vari√°vel para controle do intervalo do trailing stop
let trailingStopInterval = 1000; // come√ßa em 1s
let trailingStopErrorCount = 0;
let trailingStopMaxInterval = 10000; // m√°ximo 10s
let trailingStopMinInterval = 500;   // m√≠nimo 0.5s
let trailingStopLastErrorTime = null;

// Vari√°veis para controle do intervalo dos monitores
let pendingOrdersInterval = 15000; // come√ßa em 15s
let pendingOrdersErrorCount = 0;
let pendingOrdersMaxInterval = 120000; // m√°ximo 2min
let pendingOrdersMinInterval = 15000;  // m√≠nimo 15s
let pendingOrdersLastErrorTime = null;

let orphanOrdersInterval = 20000; // come√ßa em 20s
let orphanOrdersErrorCount = 0;
let orphanOrdersMaxInterval = 180000; // m√°ximo 3min
let orphanOrdersMinInterval = 20000;  // m√≠nimo 20s
let orphanOrdersLastErrorTime = null;

// Inicializa o TrailingStop com a estrat√©gia correta
function initializeTrailingStop() {
  if (!activeBotConfig) {
    console.error('‚ùå Configura√ß√£o do bot n√£o encontrada para inicializar TrailingStop');
    return;
  }
  
  // Verifica se as credenciais est√£o configuradas
  if (!activeBotConfig.apiKey || !activeBotConfig.apiSecret) {
    console.error('‚ùå Credenciais de API n√£o configuradas para inicializar TrailingStop');
    console.error(`üí° Configure as credenciais para o bot: ${activeBotConfig.botName}`);
    return;
  }
  
  const strategyType = activeBotConfig.strategyName || 'DEFAULT';
  console.log(`üîß [APP_INIT] Inicializando TrailingStop com estrat√©gia: ${strategyType}`);
  const trailingStopInstance = new TrailingStop(strategyType, activeBotConfig);
  trailingStopInstance.reinitializeStopLoss(strategyType);
}

// Fun√ß√£o para exibir timer geral unificado
function showGlobalTimer(waitTimeMs = null) {
  if (globalTimerInterval) {
    clearInterval(globalTimerInterval);
  }

  const durationMs = waitTimeMs || 60000; // Usa o tempo fornecido ou 60 segundos padr√£o
  const startTime = Date.now();
  const nextAnalysis = new Date(startTime + durationMs);
  const timeString = nextAnalysis.toLocaleTimeString('pt-BR', { 
    hour: '2-digit', 
    minute: '2-digit', 
    second: '2-digit',
    hour12: false 
  });

  // Fun√ß√£o para calcular o progresso baseado no tempo real decorrido
  const calculateProgress = () => {
    // Usa o timeframe passado como par√¢metro ou fallback para activeBotConfig
    const timeframeMs = waitTimeMs || TimeframeConfig.parseTimeframeToMs(activeBotConfig?.time || '5m');
    const now = Date.now();
    const currentPeriodStart = Math.floor(now / timeframeMs) * timeframeMs;
    const elapsedInPeriod = now - currentPeriodStart;
    const progress = Math.min((elapsedInPeriod / timeframeMs) * 100, 100);
    

    
    return Math.floor(progress);
  };



  // Intercepta console.log para manter o progresso no rodap√©
  const originalLog = console.log;
  const originalError = console.error;
  const originalWarn = console.warn;
  
  // Fun√ß√£o para limpar a linha do progresso
  const clearProgressLine = () => {
    process.stdout.write('\r' + ' '.repeat(process.stdout.columns || 80) + '\r');
  };
  
  // Fun√ß√£o para mostrar o progresso no rodap√©
  const showProgress = (progress, progressBar, percentage) => {
    // Move o cursor para o final da tela
    process.stdout.write('\x1b[9999;0H');
    // Limpa a linha atual
    clearProgressLine();
    // Mostra o progresso
    const botName = activeBotConfig?.botName || 'N/A';
    process.stdout.write(`‚è≥ [${botName}] Aguardando pr√≥xima an√°lise... `);
    process.stdout.write(`[${progressBar}] ${percentage}% | Pr√≥xima: ${timeString}`);
  };

  // Intercepta console.log para manter o progresso no rodap√©
  console.log = (...args) => {
    // Filtra logs que podem quebrar a barra de progresso
    const message = args.join(' ');
    const isSpamLog = message.includes('Stop loss j√° existe') || 
                     message.includes('‚ÑπÔ∏è [CONTA') ||
                     message.includes('‚ö†Ô∏è [CONTA');
    
    // Se for log de spam, n√£o mostra para n√£o quebrar a barra
    if (isSpamLog) {
      return;
    }
    
    // Limpa a linha do progresso antes de mostrar o log
    clearProgressLine();
    // Mostra o log
    originalLog.apply(console, args);
    // Restaura o progresso no rodap√©
    const percentage = calculateProgress();
    const bars = Math.floor(percentage / 5);
    const emptyBars = 20 - bars;
    const progressBar = '‚ñà'.repeat(bars) + '‚ñë'.repeat(emptyBars);
    showProgress(percentage, progressBar, percentage);
  };

  // Intercepta console.error
  console.error = (...args) => {
    clearProgressLine();
    originalError.apply(console, args);
    const percentage = calculateProgress();
    const bars = Math.floor(percentage / 5);
    const emptyBars = 20 - bars;
    const progressBar = '‚ñà'.repeat(bars) + '‚ñë'.repeat(emptyBars);
    showProgress(percentage, progressBar, percentage);
  };

  // Intercepta console.warn
  console.warn = (...args) => {
    clearProgressLine();
    originalWarn.apply(console, args);
    const percentage = calculateProgress();
    const bars = Math.floor(percentage / 5);
    const emptyBars = 20 - bars;
    const progressBar = '‚ñà'.repeat(bars) + '‚ñë'.repeat(emptyBars);
    showProgress(percentage, progressBar, percentage);
  };

  globalTimerInterval = setInterval(() => {
    const percentage = calculateProgress();
    const bars = Math.floor(percentage / 5);
    const emptyBars = 20 - bars;
    
    const progressBar = '‚ñà'.repeat(bars) + '‚ñë'.repeat(emptyBars);
    
    // Mostra o progresso no rodap√©
    showProgress(percentage, progressBar, percentage);
    
    if (percentage >= 100) {
      clearInterval(globalTimerInterval);
      // Restaura console.log original
      console.log = originalLog;
      console.error = originalError;
      console.warn = originalWarn;
      // Limpa a linha do progresso
      clearProgressLine();
      console.log(`üîÑ [${activeBotConfig.botName}] Iniciando nova an√°lise...\n`);
    }
  }, 1000);
}

// Fun√ß√£o para parar o timer geral
function stopGlobalTimer() {
  if (globalTimerInterval) {
    clearInterval(globalTimerInterval);
    globalTimerInterval = null;
  }
}

async function startDecision() {
  // Usa a inst√¢ncia global do Decision
  if (!decisionInstance) {
    console.error('‚ùå Inst√¢ncia do Decision n√£o inicializada');
    return;
  }
  
  // Verifica se h√° configura√ß√£o do bot ativo
  if (!activeBotConfig) {
    console.error('‚ùå Configura√ß√£o do bot ativo n√£o encontrada');
    return;
  }
  
  // Verifica se as credenciais est√£o configuradas
  if (!activeBotConfig.apiKey || !activeBotConfig.apiSecret) {
    console.error('‚ùå API_KEY e API_SECRET s√£o obrigat√≥rios');
    console.log('   Configure as credenciais no dashboard para o bot:', activeBotConfig.botName);
    return;
  }
  
  // Verifica se o bot est√° habilitado
  if (!activeBotConfig.enabled) {
    console.log(`‚è∏Ô∏è Bot ${activeBotConfig.botName} est√° pausado. Ative-o no dashboard para continuar.`);
    return;
  }
  
  await decisionInstance.analyze(null, null, activeBotConfig);
  
  // Executa migra√ß√£o do Trailing Stop para este bot espec√≠fico
  try {
    await TrailingStop.backfillStateForOpenPositions(activeBotConfig);
  } catch (trailingError) {
    console.warn(`‚ö†Ô∏è [${activeBotConfig.botName}][APP] Erro na migra√ß√£o do Trailing Stop para bot ${activeBotConfig.botName}:`, trailingError.message);
  }
  
  // SISTEMA GLOBAL DE INTERVALO BASEADO NO EXECUTION_MODE
  let nextInterval;
  const timeframeConfig = new TimeframeConfig(activeBotConfig);
  
  // Usa configura√ß√£o do bot para determinar o modo de execu√ß√£o
  const executionMode = activeBotConfig.executionMode || 'REALTIME';
  
  if (executionMode === 'ON_CANDLE_CLOSE') {
    // Modo ON_CANDLE_CLOSE: Aguarda o pr√≥ximo fechamento de vela
    nextInterval = timeframeConfig.getTimeUntilNextCandleClose(activeBotConfig.time);
    console.log(`‚è∞ [${activeBotConfig.botName}][ON_CANDLE_CLOSE] Pr√≥xima an√°lise em ${Math.floor(nextInterval / 1000)}s`);
  } else {
    // Modo REALTIME: An√°lise a cada 60 segundos
    nextInterval = 60000;
    console.log(`‚è∞ [${activeBotConfig.botName}][REALTIME] Pr√≥xima an√°lise em ${Math.floor(nextInterval / 1000)}s`);
  }
  
  console.log(`üîß [${activeBotConfig.botName}][DEBUG] Execution Mode: ${executionMode}, Next Interval: ${nextInterval}ms`);
  
  // Inicia o timer geral ap√≥s cada an√°lise
  showGlobalTimer();
  
  setTimeout(startDecision, nextInterval);
}

async function startStops() {
  try {
    // Verifica se h√° configura√ß√£o do bot ativo
    if (!activeBotConfig || !activeBotConfig.apiKey || !activeBotConfig.apiSecret) {
      console.warn(`‚ö†Ô∏è [${activeBotConfig.botName}][TRAILING] Configura√ß√£o do bot n√£o encontrada ou credenciais ausentes`);
      return;
    }
    
    const trailingStopInstance = new TrailingStop(activeBotConfig.strategyName || 'DEFAULT', activeBotConfig);
    await trailingStopInstance.stopLoss();
    // Se sucesso, reduz gradualmente o intervalo at√© o m√≠nimo
    if (trailingStopInterval > trailingStopMinInterval) {
      trailingStopInterval = Math.max(trailingStopMinInterval, trailingStopInterval - 250);
      // if (trailingStopInterval === trailingStopMinInterval) {
      //   console.log(`‚è±Ô∏è [TRAILING] Intervalo m√≠nimo atingido: ${trailingStopInterval}ms`);
      // }
    }
    trailingStopErrorCount = 0;
  } catch (error) {
    // Detecta erro de rate limit (HTTP 429 ou mensagem)
    if (error?.response?.status === 429 || String(error).includes('rate limit') || String(error).includes('429')) {
      trailingStopErrorCount++;
      trailingStopLastErrorTime = Date.now();
      // Aumenta o intervalo exponencialmente at√© o m√°ximo
      trailingStopInterval = Math.min(trailingStopMaxInterval, trailingStopInterval * 2);
      console.warn(`‚ö†Ô∏è [${activeBotConfig.botName}][TRAILING] Rate limit detectado! Aumentando intervalo para ${trailingStopInterval}ms`);
    } else {
      console.error(`‚ùå [${activeBotConfig.botName}][TRAILING] Erro inesperado no trailing stop:`, error.message || error);
    }
  }
  setTimeout(startStops, trailingStopInterval);
}

// Fun√ß√£o para exibir status do stop loss din√¢mico
function showDynamicStopLossStatus() {
  try {
    console.log('='.repeat(40));
  } catch (error) {
    console.error('Erro ao exibir status do stop loss:', error.message);
  }
}

// Monitoramento r√°pido de ordens pendentes (apenas estrat√©gia PRO_MAX)
let monitorInterval = 5000; // 5 segundos padr√£o

async function startPendingOrdersMonitor() {
  try {
    // Verifica se h√° configura√ß√£o do bot ativo
    if (!activeBotConfig || !activeBotConfig.apiKey || !activeBotConfig.apiSecret) {
      console.warn(`‚ö†Ô∏è [${activeBotConfig.botName}][PENDING_ORDERS] Configura√ß√£o do bot n√£o encontrada ou credenciais ausentes`);
      return;
    }
    
    await OrderController.monitorPendingEntryOrders(activeBotConfig.botName, activeBotConfig);
    
    // Se sucesso, reduz gradualmente o intervalo at√© o m√≠nimo
    if (pendingOrdersInterval > pendingOrdersMinInterval) {
      pendingOrdersInterval = Math.max(pendingOrdersMinInterval, pendingOrdersInterval - 1000);
    }
    pendingOrdersErrorCount = 0;
  } catch (error) {
    // Detecta erro de rate limit (HTTP 429 ou mensagem)
    if (error?.response?.status === 429 || String(error).includes('rate limit') || String(error).includes('429')) {
      pendingOrdersErrorCount++;
      pendingOrdersLastErrorTime = Date.now();
      // Aumenta o intervalo exponencialmente at√© o m√°ximo
      pendingOrdersInterval = Math.min(pendingOrdersMaxInterval, pendingOrdersInterval * 2);
      console.warn(`‚ö†Ô∏è [${activeBotConfig.botName}][PENDING_ORDERS] Rate limit detectado! Aumentando intervalo para ${Math.floor(pendingOrdersInterval / 1000)}s`);
    } else {
      console.error(`‚ùå [${activeBotConfig.botName}][PENDING_ORDERS] Erro inesperado no monitoramento de ordens pendentes:`, error.message || error);
    }
  }
  setTimeout(startPendingOrdersMonitor, pendingOrdersInterval);
}

// Fun√ß√£o para inicializar ou re-inicializar a estrat√©gia do Decision
function initializeDecisionStrategy(strategyType) {
  try {
    // Cria inst√¢ncia do Decision com a estrat√©gia selecionada
    decisionInstance = new Decision(strategyType);
    console.log(`‚úÖ Estrat√©gia ${strategyType} inicializada com sucesso`);
  } catch (error) {
    console.error(`‚ùå Erro ao inicializar estrat√©gia ${strategyType}:`, error.message);
    process.exit(1);
  }
}

// Fun√ß√£o para iniciar o monitor de ordens √≥rf√£s
async function startOrphanOrderMonitor() {
  try {
    // Verifica se h√° configura√ß√£o do bot ativo
    if (!activeBotConfig || !activeBotConfig.apiSecret) {
      console.warn(`‚ö†Ô∏è [${activeBotConfig.botName}][ORPHAN_MONITOR] Configura√ß√£o do bot n√£o encontrada ou credenciais ausentes`);
      return;
    }
    
    await OrderController.monitorAndCleanupOrphanedStopLoss(activeBotConfig.botName, activeBotConfig);
    
    // Se sucesso, reduz gradualmente o intervalo at√© o m√≠nimo
    if (orphanOrdersInterval > orphanOrdersMinInterval) {
      orphanOrdersInterval = Math.max(orphanOrdersMinInterval, orphanOrdersInterval - 1000);
    }
    orphanOrdersErrorCount = 0;
  } catch (error) {
    // Detecta erro de rate limit (HTTP 429 ou mensagem)
    if (error?.response?.status === 429 || String(error).includes('rate limit') || String(error).includes('429')) {
      orphanOrdersErrorCount++;
      orphanOrdersLastErrorTime = Date.now();
      // Aumenta o intervalo exponencialmente at√© o m√°ximo
      orphanOrdersInterval = Math.min(orphanOrdersMaxInterval, orphanOrdersInterval * 2);
      console.warn(`‚ö†Ô∏è [${activeBotConfig.botName}][ORPHAN_MONITOR] Rate limit detectado! Aumentando intervalo para ${Math.floor(orphanOrdersInterval / 1000)}s`);
    } else {
      console.error(`‚ùå [${activeBotConfig.botName}][ORPHAN_MONITOR] Erro inesperado no monitoramento de ordens √≥rf√£s:`, error.message || error);
    }
  }
  setTimeout(startOrphanOrderMonitor, orphanOrdersInterval);
}

async function startBot() {
  try {
    console.log('üöÄ Iniciando BackBot...');
    
    // Carrega todas as configura√ß√µes de bots
    const allConfigs = ConfigManager.loadConfigs();
    console.log(`üìã Encontradas ${allConfigs.length} configura√ß√µes de bots`);
    
    // Filtra apenas bots habilitados (inclui bots que n√£o est√£o rodando mas est√£o habilitados)
    let enabledBots = allConfigs.filter(config => config.enabled);
    console.log(`‚úÖ ${enabledBots.length} bots habilitados encontrados`);
    
    // Filtra bots com credenciais v√°lidas
    const botsWithCredentials = enabledBots.filter(config => config.apiKey && config.apiSecret);
    console.log(`üîë ${botsWithCredentials.length} bots com credenciais configuradas`);
    
    if (botsWithCredentials.length === 0) {
      console.error('‚ùå Nenhum bot com credenciais v√°lidas encontrado!');
      console.error('üí° Configure as credenciais de API no dashboard');
      process.exit(1);
    }
    
    // Usa apenas bots com credenciais v√°lidas
    enabledBots = botsWithCredentials;
    
    if (enabledBots.length === 0) {
      console.log('‚ùå Nenhum bot habilitado encontrado!');
      console.log('üí° Configure pelo menos um bot no dashboard ou crie uma configura√ß√£o padr√£o');
      
      // Verifica se h√° bots configurados mas n√£o habilitados
      const configuredBots = allConfigs.filter(config => config.apiKey && config.apiSecret);
      if (configuredBots.length > 0) {
        console.log('üìã Bots configurados mas n√£o habilitados:');
        configuredBots.forEach(bot => {
          console.log(`   ‚Ä¢ ${bot.botName} (${bot.strategyName}) - Status: ${bot.status}`);
        });
        console.log('üí° Ative um bot no dashboard para iniciar');
      } else {
        console.log('üí° Crie uma configura√ß√£o de bot no dashboard primeiro');
      }
      
      process.exit(1);
    }
    
    // Se h√° m√∫ltiplos bots habilitados, usa modo multi-bot
    if (enabledBots.length > 1) {
      console.log('ü§ñ Iniciando modo Multi-Bot...');
      isMultiBotMode = true;
      const multiBotManager = new MultiBotManager();
      await multiBotManager.runMultiMode();
      return;
    }
    
    // Modo single bot - usa o primeiro bot habilitado
    activeBotConfig = enabledBots[0];
    
    // Verifica se as credenciais est√£o configuradas
    if (!activeBotConfig.apiKey || !activeBotConfig.apiSecret) {
      console.error(`‚ùå Bot ${activeBotConfig.botName} n√£o tem credenciais configuradas!`);
      console.error('üí° Configure as credenciais no dashboard antes de iniciar o bot');
      process.exit(1);
    }
    
    console.log(`ü§ñ Iniciando bot: ${activeBotConfig.botName} (${activeBotConfig.strategyName})`);
    
    // Carrega o estado persistido do Trailing Stop
    await TrailingStop.loadStateFromFile();
    
    // Migra√ß√£o autom√°tica: cria estado para posi√ß√µes abertas existentes
          // Migra√ß√£o do Trailing Stop ser√° executada individualmente para cada bot
      console.log('‚ÑπÔ∏è [APP] Migra√ß√£o do Trailing Stop ser√° executada individualmente para cada bot');
    
    // Inicializa a estrat√©gia selecionada
    initializeDecisionStrategy(activeBotConfig.strategyName);
    
    // Inicializa o TrailingStop com a estrat√©gia correta
    initializeTrailingStop();
    
    // Log da estrat√©gia selecionada
    console.log(`üîë Estrat√©gia ${activeBotConfig.strategyName}: usando credenciais do bot ${activeBotConfig.botName}`);
    
    // Log do modo de execu√ß√£o
    const executionMode = activeBotConfig.executionMode || 'REALTIME';
    if (activeBotConfig.strategyName === 'ALPHA_FLOW') {
      console.log('üß† [ALPHA_FLOW] Modo ON_CANDLE_CLOSE for√ßado automaticamente');
      activeBotConfig.executionMode = 'ON_CANDLE_CLOSE';
    } else {
      console.log(`‚öôÔ∏è [EXECUTION_MODE] Modo configurado: ${executionMode}`);
    }

    // Inicia o PnL Controller para este bot espec√≠fico
    try {
      await PnlController.run(24, activeBotConfig);
    } catch (pnlError) {
      console.warn(`‚ö†Ô∏è [APP] Erro no PnL Controller para bot ${activeBotConfig.botName}:`, pnlError.message);
    }

    // Inicia os servi√ßos
    console.log('üöÄ Iniciando servi√ßos...');
    startStops();
    startPendingOrdersMonitor();
    startOrphanOrderMonitor();

    // Verifica se deve fazer an√°lise imediatamente ou aguardar
    const timeframeConfig = new TimeframeConfig(activeBotConfig);
    const waitCheck = timeframeConfig.shouldWaitBeforeAnalysis(activeBotConfig.time);
    
    console.log(`üîß [DEBUG] Execution Mode: ${activeBotConfig.executionMode}`);
    console.log(`üîß [DEBUG] Strategy: ${activeBotConfig.strategyName}`);
    console.log(`üîß [DEBUG] Timeframe: ${activeBotConfig.time}`);
    console.log(`üîß [DEBUG] Wait Check:`, waitCheck);
    
    if (waitCheck.shouldWait) {
      console.log(`‚è∞ [ON_CANDLE_CLOSE] Pr√≥xima an√°lise em ${Math.floor(waitCheck.waitTime / 1000)}s (fechamento de vela)`);
      
      // Inicia o timer geral para mostrar progresso
      showGlobalTimer(waitCheck.waitTime);
      
      // Agenda a primeira an√°lise
      setTimeout(() => {
        startDecision();
      }, waitCheck.waitTime);
    } else {
      // Inicia an√°lise imediatamente
      console.log('üöÄ Iniciando primeira an√°lise...');
      startDecision();
    }

    // Configura comandos interativos
    setupInteractiveCommands();
    
    console.log('‚úÖ BackBot iniciado com sucesso!');
    console.log(`üìä Bot ativo: ${activeBotConfig.botName}`);
    console.log(`üîß Estrat√©gia: ${activeBotConfig.strategyName}`);
    console.log(`üí∞ Capital: ${activeBotConfig.capitalPercentage}%`);
    console.log(`‚è∞ Timeframe: ${activeBotConfig.time}`);
    
  } catch (error) {
    console.error('‚ùå Erro ao iniciar BackBot:', error.message);
    process.exit(1);
  }
}

// Sistema de comandos interativos
function setupInteractiveCommands() {
  const rl = readline.createInterface({
    input: process.stdin,
    output: process.stdout
  });

  rl.on('line', (input) => {
    const command = input.trim().toLowerCase();
    
    switch (command) {
      case 'status':
        showDynamicStopLossStatus();
        break;
      case 'cleanup':
        console.log('üßπ Iniciando limpeza manual de ordens √≥rf√£s...');
        import('./src/Controllers/OrderController.js').then(({ default: OrderController }) => {
          OrderController.monitorAndCleanupOrphanedStopLoss(activeBotConfig.botName, activeBotConfig).then(result => {
            console.log(`üßπ Limpeza conclu√≠da: ${result.orphaned} ordens √≥rf√£s detectadas, ${result.cancelled} canceladas`);
            if (result.errors.length > 0) {
              console.log(`‚ùå Erros: ${result.errors.join(', ')}`);
            }
          });
        });
        break;
      case 'help':
        console.log('\nüí° Comandos dispon√≠veis:');
        console.log('   ‚Ä¢ "status" - Ver status do stop loss din√¢mico');
        console.log('   ‚Ä¢ "cleanup" - Limpar ordens de stop loss √≥rf√£s');
        console.log('   ‚Ä¢ "exit" - Sair do bot');
        console.log('   ‚Ä¢ "help" - Ver esta ajuda\n');
        break;
      case 'exit':
        console.log('\nüëã Encerrando BackBot...');
        process.exit(0);
        break;
      default:
        console.log('‚ùå Comando n√£o reconhecido. Digite "help" para ver os comandos dispon√≠veis.');
    }
  });
}

// Inicia o bot
startBot();

// Configura comandos interativos ap√≥s 3 segundos
setTimeout(() => {
  setupInteractiveCommands();
}, 3000);
