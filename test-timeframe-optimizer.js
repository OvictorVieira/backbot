#!/usr/bin/env node

/**
 * Teste do Timeframe Optimizer
 * Verifica se o sistema est√° funcionando corretamente
 * Executa: node test-timeframe-optimizer.js
 */

import './bootstrap.js';
import { BacktestRunner } from './src/Backtest/BacktestRunner.js';

async function testTimeframeOptimizer() {
  console.log('üß™ Teste do Timeframe Optimizer');
  console.log('='.repeat(40));

  // Teste com configura√ß√£o m√≠nima
  const testConfig = {
    strategy: 'PRO_MAX',
    symbols: ['BTC_USDC_PERP'],
    days: 30, // Per√≠odo curto para teste r√°pido
    initialBalance: 1000,
    investmentPerTrade: 100,
    fee: 0.0004,
    maxConcurrentTrades: 3,
    enableStopLoss: true,
    enableTakeProfit: true,
    slippage: 0.0001,
    useSyntheticData: false,
    saveResults: false
  };

  const runner = new BacktestRunner();
  const timeframes = ['5m', '15m']; // Apenas 2 timeframes para teste r√°pido
  const results = [];

  console.log('üìä Testando configura√ß√£o b√°sica...\n');

  for (const timeframe of timeframes) {
    console.log(`‚è±Ô∏è  Testando ${timeframe}...`);

    try {
      // Define o timeframe para ACCOUNT2 (PRO_MAX)
      process.env.ACCOUNT2_TIME = timeframe;
      
      const config = {
        ...testConfig,
        interval: timeframe
      };

      const result = await runner.runBacktest(config);

      if (!result || !result.results || !result.performance) {
        console.log(`   ‚ùå Resultados inv√°lidos para ${timeframe}`);
        continue;
      }

      const { results: res, performance } = result;

      const analysis = {
        timeframe,
        totalReturn: res.totalReturn,
        winRate: performance.winRate,
        totalTrades: performance.totalTrades,
        profitFactor: res.profitFactor,
        maxDrawdown: res.maxDrawdown,
        sharpeRatio: res.sharpeRatio
      };

      results.push(analysis);

      console.log(`   ‚úÖ ${timeframe}: Retorno ${analysis.totalReturn.toFixed(2)}% | Win Rate ${analysis.winRate.toFixed(1)}% | Trades ${analysis.totalTrades}`);

    } catch (error) {
      console.log(`   ‚ùå Erro em ${timeframe}: ${error.message}`);
    }
  }

  // Restaura configura√ß√£o original
  delete process.env.ACCOUNT2_TIME;

  // Verifica resultados
  if (results.length === 0) {
    console.log('\n‚ùå TESTE FALHOU: Nenhum resultado obtido');
    return false;
  }

  if (results.length < 2) {
    console.log('\n‚ö†Ô∏è TESTE PARCIAL: Apenas um timeframe funcionou');
    return false;
  }

  console.log('\n‚úÖ TESTE PASSOU: Sistema funcionando corretamente!');
  console.log(`   ‚Ä¢ Timeframes testados: ${results.length}`);
  console.log(`   ‚Ä¢ Todos os backtests executaram com sucesso`);
  console.log(`   ‚Ä¢ Vari√°vel ACCOUNT2_TIME funcionando corretamente`);

  // Mostra resultados
  console.log('\nüìä Resultados do teste:');
  results.forEach(result => {
    console.log(`   ‚Ä¢ ${result.timeframe}: ${result.totalReturn.toFixed(2)}% retorno, ${result.winRate.toFixed(1)}% win rate`);
  });

  return true;
}

// Executa o teste
testTimeframeOptimizer().then(success => {
  if (success) {
    console.log('\nüéâ Timeframe Optimizer est√° pronto para uso!');
    console.log('\nüìñ Comandos dispon√≠veis:');
    console.log('   npm run optimize-timeframe    # Otimiza√ß√£o completa com interface');
    console.log('   npm run quick-timeframe       # Otimiza√ß√£o r√°pida');
    console.log('   node quick-optimize-timeframe.js --help  # Ajuda da vers√£o r√°pida');
  } else {
    console.log('\n‚ùå Verifique a configura√ß√£o e tente novamente');
    process.exit(1);
  }
}).catch(error => {
  console.error('‚ùå Erro no teste:', error.message);
  process.exit(1);
}); 