import DatabaseService from '../Services/DatabaseService.js';

/**
 * ConfigManager SQLite - Vers√£o que usa banco de dados SQLite
 * 
 * Gerencia todas as configura√ß√µes dos bots no banco de dados SQLite
 * em vez de arquivos JSON
 */
class ConfigManagerSQLite {
  static dbService = null;

  /**
   * Inicializa o ConfigManager com o DatabaseService
   * @param {DatabaseService} dbService - Inst√¢ncia do DatabaseService
   */
  static initialize(dbService) {
    ConfigManagerSQLite.dbService = dbService;
    console.log('üîß [CONFIG_SQLITE] ConfigManager SQLite inicializado');
  }

  /**
   * Gera um ID √∫nico para um novo bot
   * @returns {number} ID √∫nico do bot
   */
  static async generateBotId() {
    const result = await ConfigManagerSQLite.dbService.get(
      'SELECT MAX(botId) as maxId FROM bot_configs'
    );
    return (result?.maxId || 0) + 1;
  }

  /**
   * Carrega todas as configura√ß√µes do banco de dados
   * @returns {Promise<Array>} Array de configura√ß√µes de bots
   */
  static async loadConfigs() {
    try {
      const results = await ConfigManagerSQLite.dbService.getAll(
        'SELECT botId, config, createdAt, updatedAt FROM bot_configs ORDER BY botId'
      );
      
      return results.map(row => {
        const config = JSON.parse(row.config);
        return {
          id: row.botId,
          ...config,
          createdAt: row.createdAt,
          updatedAt: row.updatedAt
        };
      });
    } catch (error) {
      console.error('‚ùå [CONFIG_SQLITE] Erro ao carregar configura√ß√µes:', error.message);
      return [];
    }
  }

  /**
   * Salva configura√ß√µes no banco de dados
   * @param {Array} configs - Array de configura√ß√µes para salvar
   */
  static async saveConfigs(configs) {
    try {
      console.log(`üíæ [CONFIG_SQLITE] Iniciando salvamento de ${configs.length} configura√ß√µes...`);
      
      // Limpa todas as configura√ß√µes existentes
      await ConfigManagerSQLite.dbService.run('DELETE FROM bot_configs');
      
      // Insere as novas configura√ß√µes
      for (const config of configs) {
        const { id, createdAt, updatedAt, ...configData } = config;
        const configJson = JSON.stringify(configData);
        const now = new Date().toISOString();
        
        await ConfigManagerSQLite.dbService.run(
          'INSERT INTO bot_configs (botId, config, createdAt, updatedAt) VALUES (?, ?, ?, ?)',
          [id, configJson, createdAt || now, updatedAt || now]
        );
      }
      
      console.log(`‚úÖ [CONFIG_SQLITE] Configura√ß√µes salvas com sucesso`);
    } catch (error) {
      console.error('‚ùå [CONFIG_SQLITE] Erro ao salvar configura√ß√µes:', error.message);
      throw error;
    }
  }

  /**
   * Obt√©m configura√ß√£o de um bot espec√≠fico
   * @param {string} strategyName - Nome da estrat√©gia
   * @returns {Promise<Object|null>} Configura√ß√£o do bot ou null se n√£o encontrado
   */
  static async getBotConfig(strategyName) {
    const configs = await this.loadConfigs();
    return configs.find(config => config.strategyName === strategyName) || null;
  }

  /**
   * Obt√©m configura√ß√£o de um bot por botName
   * @param {string} botName - Nome √∫nico do bot
   * @returns {Promise<Object|null>} Configura√ß√£o do bot ou null se n√£o encontrado
   */
  static async getBotConfigByBotName(botName) {
    const configs = await this.loadConfigs();
    return configs.find(config => config.botName === botName) || null;
  }

  /**
   * Obt√©m configura√ß√£o de um bot por ID
   * @param {number} botId - ID √∫nico do bot
   * @returns {Promise<Object|null>} Configura√ß√£o do bot ou null se n√£o encontrado
   */
  static async getBotConfigById(botId) {
    try {
      const result = await ConfigManagerSQLite.dbService.get(
        'SELECT botId, config, createdAt, updatedAt FROM bot_configs WHERE botId = ?',
        [botId]
      );
      
      if (!result) return null;
      
      const config = JSON.parse(result.config);
      return {
        id: result.botId,
        ...config,
        createdAt: result.createdAt,
        updatedAt: result.updatedAt
      };
    } catch (error) {
      console.error(`‚ùå [CONFIG_SQLITE] Erro ao buscar bot ${botId}:`, error.message);
      return null;
    }
  }

  /**
   * Obt√©m configura√ß√£o de um bot por botClientOrderId
   * @param {string|number} botClientOrderId - botClientOrderId do bot
   * @returns {Promise<Object|null>} Configura√ß√£o do bot ou null se n√£o encontrado
   */
  static async getBotConfigByClientOrderId(botClientOrderId) {
    const configs = await this.loadConfigs();
    return configs.find(config => config.botClientOrderId == botClientOrderId) || null;
  }

  /**
   * Atualiza configura√ß√£o de um bot por ID
   * @param {number} botId - ID √∫nico do bot
   * @param {Object} newConfig - Nova configura√ß√£o
   */
  static async updateBotConfigById(botId, newConfig) {
    console.log(`üîÑ [CONFIG_SQLITE] Iniciando atualiza√ß√£o do bot ID: ${botId}`);
    
    try {
      const currentConfig = await this.getBotConfigById(botId);
      if (!currentConfig) {
        throw new Error(`Bot com ID ${botId} n√£o encontrado`);
      }
      
      console.log(`üìù [CONFIG_SQLITE] Configura√ß√£o atual encontrada: ${currentConfig.botName}`);
      
      // Preserva os campos de rastreamento de ordens se n√£o estiverem no newConfig
      const updatedConfig = {
        ...currentConfig,
        ...newConfig,
        // Garante que os campos de rastreamento sejam preservados
        botClientOrderId: newConfig.botClientOrderId || currentConfig.botClientOrderId,
        orderCounter: newConfig.orderCounter !== undefined ? newConfig.orderCounter : currentConfig.orderCounter
      };
      
      const configJson = JSON.stringify(updatedConfig);
      const now = new Date().toISOString();
      
      await ConfigManagerSQLite.dbService.run(
        'UPDATE bot_configs SET config = ?, updatedAt = ? WHERE botId = ?',
        [configJson, now, botId]
      );
      
      console.log(`‚úÖ [CONFIG_SQLITE] Bot ${botId} atualizado com sucesso`);
    } catch (error) {
      console.error(`‚ùå [CONFIG_SQLITE] Erro ao atualizar bot ${botId}:`, error.message);
      throw error;
    }
  }

  /**
   * Adiciona uma nova configura√ß√£o de bot
   * @param {Object} config - Configura√ß√£o completa do bot
   * @returns {Promise<number>} ID do bot criado
   */
  static async addBotConfig(config) {
    try {
      const botId = await this.generateBotId();
      
      // Garante que os campos de rastreamento de ordens sejam sempre inclu√≠dos
      const newBotConfig = {
        ...config,
        // Campos de rastreamento de ordens (gerenciados pelo sistema)
        botClientOrderId: config.botClientOrderId || Math.floor(Math.random() * 10000),
        orderCounter: config.orderCounter || 0,
        status: 'stopped', // Status inicial
        nextValidationAt: new Date(Date.now() + 60000).toISOString() // Pr√≥xima valida√ß√£o em 60s
      };
      
      const configJson = JSON.stringify(newBotConfig);
      const now = new Date().toISOString();
      
      await ConfigManagerSQLite.dbService.run(
        'INSERT INTO bot_configs (botId, config, createdAt, updatedAt) VALUES (?, ?, ?, ?)',
        [botId, configJson, now, now]
      );
      
      console.log(`‚úÖ [CONFIG_SQLITE] Bot criado com ID: ${botId} e botClientOrderId: ${newBotConfig.botClientOrderId}`);
      return botId;
    } catch (error) {
      console.error(`‚ùå [CONFIG_SQLITE] Erro ao criar bot:`, error.message);
      throw error;
    }
  }

  /**
   * Remove configura√ß√£o de um bot por ID
   * @param {number} botId - ID √∫nico do bot
   */
  static async removeBotConfigById(botId) {
    try {
      const result = await ConfigManagerSQLite.dbService.run(
        'DELETE FROM bot_configs WHERE botId = ?',
        [botId]
      );
      
      if (result.changes > 0) {
        console.log(`‚úÖ [CONFIG_SQLITE] Bot ${botId} removido com sucesso`);
      } else {
        console.log(`‚ÑπÔ∏è [CONFIG_SQLITE] Bot ${botId} n√£o encontrado para remo√ß√£o`);
      }
    } catch (error) {
      console.error(`‚ùå [CONFIG_SQLITE] Erro ao remover bot ${botId}:`, error.message);
      throw error;
    }
  }

  /**
   * Atualiza status de um bot por ID
   * @param {number} botId - ID √∫nico do bot
   * @param {string} status - Novo status
   * @param {string} startTime - Tempo de in√≠cio (opcional)
   */
  static async updateBotStatusById(botId, status, startTime = null) {
    try {
      const currentConfig = await this.getBotConfigById(botId);
      if (!currentConfig) {
        throw new Error(`Bot com ID ${botId} n√£o encontrado`);
      }
      
      const updatedConfig = {
        ...currentConfig,
        status: status,
        startTime: startTime || currentConfig.startTime
      };
      
      await this.updateBotConfigById(botId, updatedConfig);
      console.log(`‚úÖ [CONFIG_SQLITE] Status do bot ${botId} atualizado para: ${status}`);
    } catch (error) {
      console.error(`‚ùå [CONFIG_SQLITE] Erro ao atualizar status do bot ${botId}:`, error.message);
      throw error;
    }
  }

  /**
   * Gera ID √∫nico para ordem
   * @param {number} botId - ID do bot
   * @param {number} botClientOrderId - botClientOrderId do bot
   * @param {number} orderCounter - Contador de ordens
   * @returns {string} ID √∫nico da ordem
   */
  static generateOrderId(botId, botClientOrderId, orderCounter) {
    return `${botId}_${botClientOrderId}_${orderCounter}`;
  }

  /**
   * Incrementa contador de ordens de um bot
   * @param {number} botId - ID do bot
   * @returns {Promise<number>} Novo valor do contador
   */
  static async incrementOrderCounter(botId) {
    try {
      const currentConfig = await this.getBotConfigById(botId);
      if (!currentConfig) {
        throw new Error(`Bot com ID ${botId} n√£o encontrado`);
      }
      
      const newCounter = (currentConfig.orderCounter || 0) + 1;
      await this.updateBotConfigById(botId, { orderCounter: newCounter });
      
      return newCounter;
    } catch (error) {
      console.error(`‚ùå [CONFIG_SQLITE] Erro ao incrementar contador do bot ${botId}:`, error.message);
      throw error;
    }
  }

  /**
   * Obt√©m pr√≥ximo ID de ordem para um bot
   * @param {number} botId - ID do bot
   * @returns {Promise<string>} Pr√≥ximo ID de ordem
   */
  static async getNextOrderId(botId) {
    try {
      const currentConfig = await this.getBotConfigById(botId);
      if (!currentConfig) {
        throw new Error(`Bot com ID ${botId} n√£o encontrado`);
      }
      
      const newCounter = await this.incrementOrderCounter(botId);
      return this.generateOrderId(botId, currentConfig.botClientOrderId, newCounter);
    } catch (error) {
      console.error(`‚ùå [CONFIG_SQLITE] Erro ao obter pr√≥ximo ID de ordem para bot ${botId}:`, error.message);
      throw error;
    }
  }
}

export default ConfigManagerSQLite;
