import readline from 'readline';
import fs from 'fs';
import path from 'path';

export class StrategySelector {
  constructor() {
    this.rl = readline.createInterface({
      input: process.stdin,
      output: process.stdout
    });
  }

  /**
   * Exibe o menu de sele√ß√£o de estrat√©gia
   */
  showMenu() {
    console.log('\nü§ñ BACKBOT - Sele√ß√£o de Estrat√©gia');
    console.log('=====================================\n');
    
    console.log('üìã Estrat√©gias Dispon√≠veis:\n');
    
    console.log('1Ô∏è‚É£  DEFAULT');
    console.log('   üìä Foco: Volume na corretora');
    console.log('   üéØ Objetivo: Maximizar n√∫mero de opera√ß√µes');
    console.log('   üí° Caracter√≠sticas:');
    console.log('      ‚Ä¢ Sinais mais frequentes');
    console.log('      ‚Ä¢ Stop loss din√¢mico');
    console.log('      ‚Ä¢ Take profit √∫nico');
    console.log('      ‚Ä¢ Ideal para corretoras que pagam por volume\n');
    
    console.log('2Ô∏è‚É£  PRO_MAX');
    console.log('   üìà Foco: Lucro e qualidade de sinais');
    console.log('   üéØ Objetivo: Maximizar retorno por opera√ß√£o');
    console.log('   üí° Caracter√≠sticas:');
    console.log('      ‚Ä¢ Sinais filtrados por qualidade (BRONZE/SILVER/GOLD/DIAMOND)');
    console.log('      ‚Ä¢ M√∫ltiplos take profits');
    console.log('      ‚Ä¢ Stop loss baseado em ATR');
    console.log('      ‚Ä¢ Ideal para traders que buscam lucro consistente\n');
    
    console.log('3Ô∏è‚É£  Sair\n');
  }

  /**
   * Aguarda a sele√ß√£o do usu√°rio
   */
  async selectStrategy() {
    return new Promise((resolve) => {
      this.rl.question('Escolha sua estrat√©gia (1-3): ', (answer) => {
        const choice = answer.trim();
        
        switch (choice) {
          case '1':
            console.log('\n‚úÖ Estrat√©gia DEFAULT selecionada!');
            console.log('üéØ Foco: Volume na corretora');
            this.rl.close();
            resolve('DEFAULT');
            break;
            
          case '2':
            console.log('\n‚úÖ Estrat√©gia PRO_MAX selecionada!');
            console.log('üéØ Foco: Lucro e qualidade de sinais');
            this.rl.close();
            resolve('PRO_MAX');
            break;
            
          case '3':
            console.log('\nüëã Saindo do Backbot...');
            this.rl.close();
            process.exit(0);
            break;
            
          default:
            console.log('\n‚ùå Op√ß√£o inv√°lida! Por favor, escolha 1, 2 ou 3.\n');
            this.showMenu();
            this.selectStrategy().then(resolve);
            break;
        }
      });
    });
  }

  /**
   * Atualiza o arquivo .env com a estrat√©gia selecionada
   */
  updateEnvFile(strategy) {
    try {
      const envPath = path.join(process.cwd(), '.env');
      let envContent = '';
      
      // L√™ o arquivo .env se existir
      if (fs.existsSync(envPath)) {
        envContent = fs.readFileSync(envPath, 'utf8');
      }
      
      // Atualiza ou adiciona a vari√°vel TRADING_STRATEGY
      const lines = envContent.split('\n');
      let strategyLineIndex = -1;
      
      for (let i = 0; i < lines.length; i++) {
        if (lines[i].startsWith('TRADING_STRATEGY=')) {
          strategyLineIndex = i;
          break;
        }
      }
      
      const newStrategyLine = `TRADING_STRATEGY=${strategy}`;
      
      if (strategyLineIndex >= 0) {
        lines[strategyLineIndex] = newStrategyLine;
      } else {
        lines.push(newStrategyLine);
      }
      
      // Escreve o arquivo atualizado
      fs.writeFileSync(envPath, lines.join('\n'));
      
      console.log(`üìù Arquivo .env atualizado com estrat√©gia: ${strategy}`);
      
    } catch (error) {
      console.error('‚ùå Erro ao atualizar arquivo .env:', error.message);
      console.log('‚ö†Ô∏è A estrat√©gia ser√° aplicada apenas nesta sess√£o.');
    }
  }

  /**
   * Processo completo de sele√ß√£o
   */
  async run() {
    this.showMenu();
    const selectedStrategy = await this.selectStrategy();
    this.updateEnvFile(selectedStrategy);
    
    // Atualiza a vari√°vel de ambiente para esta sess√£o
    process.env.TRADING_STRATEGY = selectedStrategy;
    
    console.log(`\nüöÄ Iniciando Backbot com estrat√©gia: ${selectedStrategy}`);
    console.log('‚è≥ Aguarde...\n');
    
    return selectedStrategy;
  }

  /**
   * Pergunta se o usu√°rio quer alterar a estrat√©gia atual
   */
  async askToChangeStrategy(currentStrategy) {
    return new Promise((resolve) => {
      console.log(`\nü§ñ Backbot - Estrat√©gia Atual: ${currentStrategy}`);
      console.log('=====================================\n');
      console.log('Deseja alterar a estrat√©gia? (s/n): ');
      
      this.rl.question('', (answer) => {
        const choice = answer.trim().toLowerCase();
        
        if (choice === 's' || choice === 'sim' || choice === 'y' || choice === 'yes') {
          this.rl.close();
          resolve(true);
        } else {
          console.log(`\n‚úÖ Mantendo estrat√©gia atual: ${currentStrategy}`);
          this.rl.close();
          resolve(false);
        }
      });
    });
  }
} 