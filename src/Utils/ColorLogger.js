import Logger from './Logger.js';

/**
 * Sistema de logs coloridos para m√∫ltiplos bots
 * Cada bot/estrat√©gia tem sua pr√≥pria cor para f√°cil identifica√ß√£o
 */
class ColorLogger {
  constructor(botName, strategy) {
    this.botName = botName;
    this.strategy = strategy;
    this.prefix = `\nü§ñ [${botName}-${strategy}]`;
    this.pauseLogs = false; // Controle de pausa de logs
    
    // Cores para diferentes bots
    this.colors = {
      CONTA1: '\x1b[36m', // Cyan
      CONTA2: '\x1b[35m', // Magenta
      CONTA3: '\x1b[33m', // Yellow
      CONTA4: '\x1b[32m', // Green
      DEFAULT: '\x1b[37m', // White
    };
    
    this.resetColor = '\x1b[0m';
    this.color = this.colors[botName] || this.colors.DEFAULT;
  }

  /**
   * Log normal
   */
  log(message) {
    if (this.pauseLogs) return;
    console.log(`${this.color}${this.prefix} ${message}${this.resetColor}`);
  }

  /**
   * Log de sucesso (verde)
   */
  success(message) {
    if (this.pauseLogs) return;
    console.log(`${this.color}${this.prefix} ‚úÖ ${message}${this.resetColor}`);
  }

  /**
   * Log de erro (vermelho)
   */
  error(message) {
    if (this.pauseLogs) return;
    console.log(`${this.color}${this.prefix} ‚ùå ${message}${this.resetColor}`);
  }

  /**
   * Log de aviso (amarelo)
   */
  warn(message) {
    if (this.pauseLogs) return;
    console.log(`${this.color}${this.prefix} ‚ö†Ô∏è ${message}${this.resetColor}`);
  }

  /**
   * Log de informa√ß√£o (azul)
   */
  info(message) {
    if (this.pauseLogs) return;
    console.log(`${this.color}${this.prefix} ‚ÑπÔ∏è ${message}${this.resetColor}`);
  }

  /**
   * Log de an√°lise
   */
  analyze(message) {
    if (this.pauseLogs) return;
    console.log(`${this.color}${this.prefix} üîç ${message}${this.resetColor}`);
  }

  /**
   * Log de execu√ß√£o de ordem
   */
  order(message) {
    if (this.pauseLogs) return;
    console.log(`${this.color}${this.prefix} üìä ${message}${this.resetColor}`);
  }

  /**
   * Log de capital/volume
   */
  capital(message) {
    if (this.pauseLogs) return;
    console.log(`${this.color}${this.prefix} üí∞ ${message}${this.resetColor}`);
  }

  /**
   * Log de estrat√©gia espec√≠fica
   */
  strategy(message) {
    if (this.pauseLogs) return;
    console.log(`${this.color}${this.prefix} üéØ ${message}${this.resetColor}`);
  }

  /**
   * Log de loading progressivo
   */
  loading(message) {
    if (this.pauseLogs) return;
    process.stdout.write(`${this.color}${this.prefix} ‚è≥ ${message}${this.resetColor}`);
  }

  /**
   * Limpa linha atual (para loading)
   */
  clearLine() {
    if (this.pauseLogs) return;
    process.stdout.write('\r' + ' '.repeat(80) + '\r');
  }

  // ===== M√âTODOS ESPEC√çFICOS PARA TRAILING STOP =====

  /**
   * Log de Trailing Stop aguardando posi√ß√£o ficar lucrativa (FUSCIA)
   */
  trailingWaitingProfitable(message) {
    if (this.pauseLogs) return;
    const fuchsiaColor = '\x1b[95m'; // F√∫csia
    console.log(`${fuchsiaColor}üìä [TRAILING_WAITING] ${message}${this.resetColor}`);
  }

  /**
   * Log de Trailing Stop aguardando ativa√ß√£o (LARANJA)
   */
  trailingWaitingActivation(message) {
    if (this.pauseLogs) return;
    const orangeColor = '\x1b[33m'; // Laranja
    console.log(`${orangeColor}üìä [TRAILING_WAITING] ${message}${this.resetColor}`);
  }

  /**
   * Log de Trailing Stop ativo e em lucro (VERDE)
   */
  trailingActive(message) {
    if (this.pauseLogs) return;
    const greenColor = '\x1b[32m'; // Verde
    console.log(`${greenColor}üìä [TRAILING_MONITOR] ${message}${this.resetColor}`);
  }

  /**
   * Log de Take Profit monitorado e em lucro (VERDE)
   */
  profitMonitor(message) {
    if (this.pauseLogs) return;
    Logger.debug(`üìä [PROFIT_MONITOR] ${message}`);
  }

  /**
   * Log de Take Profit fixo (AZUL)
   */
  profitFixed(message) {
    if (this.pauseLogs) return;
    Logger.debug(`üìã [PROFIT_MODE] ${message}`);
  }

  /**
   * Log de fechamento por profit (VERDE BRILHANTE)
   */
  profitClose(message) {
    if (this.pauseLogs) return;
    const brightGreenColor = '\x1b[92m'; // Verde brilhante
    console.log(`${brightGreenColor}‚úÖ [PROFIT_FIXED] ${message}${this.resetColor}`);
  }

  /**
   * Log de ADX Crossover (AMARELO)
   */
  adxCrossover(message) {
    if (this.pauseLogs) return;
    const yellowColor = '\x1b[93m'; // Amarelo brilhante
    console.log(`${yellowColor}üîÑ [ADX_CROSSOVER] ${message}${this.resetColor}`);
  }

  /**
   * Log de Trailing Stop habilitado (CIANO)
   */
  trailingEnabled(message) {
    if (this.pauseLogs) return;
    const cyanColor = '\x1b[36m'; // Ciano
    console.log(`${cyanColor}üö® [TRAILING_MODE] ${message}${this.resetColor}`);
  }

  /**
   * Log de Trailing Stop em hold/prote√ß√£o (VERMELHO)
   */
  trailingHold(message) {
    if (this.pauseLogs) return;
    const redColor = '\x1b[31m'; // Vermelho
    console.log(`${redColor}üìä [TRAILING_HOLD] ${message}${this.resetColor}`);
  }

  /**
   * Log de Trailing Stop ativo verificando gatilho (VERDE BRILHANTE)
   */
  trailingActiveCheck(message) {
    if (this.pauseLogs) return;
    const brightGreenColor = '\x1b[92m'; // Verde brilhante
    console.log(`${brightGreenColor}üìä [TRAILING_ACTIVE] ${message}${this.resetColor}`);
  }

  /**
   * Log de Trailing Stop trigger/gatilho ativado (VERMELHO BRILHANTE)
   */
  trailingTrigger(message) {
    if (this.pauseLogs) return;
    const brightRedColor = '\x1b[91m'; // Vermelho brilhante
    console.log(`${brightRedColor}üö® [TRAILING_TRIGGER] ${message}${this.resetColor}`);
  }

  /**
   * Log de Trailing Stop ativado (VERDE BRILHANTE)
   */
  trailingActivated(message) {
    if (this.pauseLogs) return;
    const brightGreenColor = '\x1b[92m'; // Verde brilhante
    console.log(`${brightGreenColor}‚úÖ [TRAILING_ACTIVATED] ${message}${this.resetColor}`);
  }

  /**
   * Log de Trailing Stop atualizado (AZUL)
   */
  trailingUpdate(message) {
    if (this.pauseLogs) return;
    const blueColor = '\x1b[34m'; // Azul
    console.log(`${blueColor}üìà [TRAILING_UPDATE] ${message}${this.resetColor}`);
  }

  /**
   * Log de Trailing Stop ativando (AMARELO)
   */
  trailingActivate(message) {
    if (this.pauseLogs) return;
    const yellowColor = '\x1b[33m'; // Amarelo
    console.log(`${yellowColor}üéØ [TRAILING_ACTIVATE] ${message}${this.resetColor}`);
  }

  /**
   * Log de Trailing Stop cleanup (CINZA)
   */
  trailingCleanup(message) {
    if (this.pauseLogs) return;
    const grayColor = '\x1b[90m'; // Cinza
    console.log(`${grayColor}üßπ [TRAILING_CLEANUP] ${message}${this.resetColor}`);
  }

  /**
   * Log de configura√ß√£o do trailing stop
   */
  trailingConfig(message) {
    if (this.pauseLogs) return;
    Logger.info(`ü§ñ [TRAILING-STOP] ‚öôÔ∏è ${message}`);
  }

  /**
   * Log de fechamento de opera√ß√£o (vermelho brilhante para destacar)
   */
  positionClosed(message) {
    if (this.pauseLogs) return;
    console.log(`\x1b[91m${this.prefix} üö® ${message}\x1b[0m`);
  }
}

export default ColorLogger; 