import History from '../Backpack/Authenticated/History.js';
import Futures from '../Backpack/Authenticated/Futures.js';
import BotOrdersManager from '../Config/BotOrdersManager.js';
import Logger from '../Utils/Logger.js';
import PositionTrackingService from './PositionTrackingService.js';

/**
 * Servi√ßo para sincronizar posi√ß√µes e detectar fechamentos autom√°ticos
 */
class PositionSyncService {
  constructor(dbService) {
    this.dbService = dbService;
    this.syncIntervals = new Map(); // botId -> intervalId
    this.lastSyncTimes = new Map(); // botId -> lastSyncTime
  }

  /**
   * Inicia monitoramento de sincroniza√ß√£o para um bot
   * @param {number} botId - ID do bot
   * @param {object} config - Configura√ß√£o do bot
   */
  async startSyncForBot(botId, config) {
    try {
      if (!config?.apiKey || !config?.apiSecret) {
        throw new Error('API_KEY e API_SECRET s√£o obrigat√≥rios');
      }

      // Para qualquer sincroniza√ß√£o anterior
      this.stopSyncForBot(botId);

      Logger.info(`üîÑ [POSITION_SYNC] Iniciando sincroniza√ß√£o para bot ${botId}`);

      // Primeira sincroniza√ß√£o imediata
      await this.syncBotPositions(botId, config);

      // Configura sincroniza√ß√£o peri√≥dica (a cada 1 minuto)
      const intervalId = setInterval(async () => {
        try {
          await this.syncBotPositions(botId, config);
        } catch (error) {
          Logger.error(`‚ùå [POSITION_SYNC] Erro na sincroniza√ß√£o do bot ${botId}:`, error.message);
        }
      }, 60000); // 1 minuto

      this.syncIntervals.set(botId, intervalId);
      Logger.info(`‚úÖ [POSITION_SYNC] Sincroniza√ß√£o iniciada para bot ${botId} (30s)`);

    } catch (error) {
      Logger.error(`‚ùå [POSITION_SYNC] Erro ao iniciar sincroniza√ß√£o para bot ${botId}:`, error.message);
    }
  }

  /**
   * Para monitoramento de sincroniza√ß√£o para um bot
   * @param {number} botId - ID do bot
   */
  stopSyncForBot(botId) {
    const intervalId = this.syncIntervals.get(botId);
    if (intervalId) {
      clearInterval(intervalId);
      this.syncIntervals.delete(botId);
      this.lastSyncTimes.delete(botId);
      Logger.info(`üõë [POSITION_SYNC] Sincroniza√ß√£o parada para bot ${botId}`);
    }
  }

  /**
   * Sincroniza posi√ß√µes de um bot espec√≠fico
   * @param {number} botId - ID do bot
   * @param {object} config - Configura√ß√£o do bot
   */
  async syncBotPositions(botId, config) {
    try {
      const startTime = Date.now();
      Logger.debug(`üîÑ [POSITION_SYNC] Iniciando sincroniza√ß√£o para bot ${botId}`);

      // NOVO SISTEMA: Usa PositionTrackingService para rastreamento baseado em fills
      Logger.info(`üîÑ [POSITION_SYNC] Usando novo sistema de rastreamento de posi√ß√µes`);

      // 1. Rastreia posi√ß√µes usando o novo sistema
      const positionTracker = new PositionTrackingService(this.dbService);
      const trackingResult = await positionTracker.trackBotPositions(botId, config);

      // 2. Busca posi√ß√µes abertas APENAS do bot (n√£o da exchange)
      // Usando apenas posi√ß√µes rastreadas pelo pr√≥prio bot para evitar interferir com trading manual
      const botOpenPositions = trackingResult.reconstructedPositions.filter(pos => pos.status === 'OPEN');

      // 3. Detecta fechamentos autom√°ticos baseado no novo sistema
      const closedPositions = await this.detectClosedPositionsNew(botId, config, trackingResult);

      // 4. NOVA SINCRONIZA√á√ÉO COMPLETA - Inclui limpeza de ordens fantasma
      try {
        const { default: OrdersService } = await import('./OrdersService.js');
        
        // Executa sincroniza√ß√£o completa (fills √≥rf√£os + corre√ß√µes + limpeza fantasma)
        const syncResults = await OrdersService.performCompleteFillsSync(botId, config);
        
        // S√≥ loga se realmente houve a√ß√µes
        if (syncResults.total > 0) {
          Logger.debug(`üîÑ [POSITION_SYNC] Bot ${botId}: Sincroniza√ß√£o - ${syncResults.total} a√ß√µes (fantasma: ${syncResults.ghostOrdersCleaned}, corrigidas: ${syncResults.ordersFixed}, fechadas: ${syncResults.positionsClosed})`);
        } else {
          Logger.debug(`üîÑ [POSITION_SYNC] Bot ${botId}: Sincroniza√ß√£o completa - nenhuma a√ß√£o necess√°ria`);
        }

      } catch (syncError) {
        Logger.warn(`‚ö†Ô∏è [POSITION_SYNC] Erro na sincroniza√ß√£o completa do bot ${botId}: ${syncError.message}`);
      }

      // 5. Atualiza estat√≠sticas
      await this.updateBotStatistics(botId, config);

      const duration = Date.now() - startTime;
      Logger.debug(`‚úÖ [POSITION_SYNC] Sincroniza√ß√£o conclu√≠da para bot ${botId} (${duration}ms)`);

      this.lastSyncTimes.set(botId, new Date());

    } catch (error) {
      Logger.error(`‚ùå [POSITION_SYNC] Erro na sincroniza√ß√£o do bot ${botId}:`, error.message);
    }
  }

  /**
   * Busca fills recentes da corretora
   * @param {number} botId - ID do bot
   * @param {object} config - Configura√ß√£o do bot
   */
  async getRecentFills(botId, config) {
    try {
      // Busca fills das √∫ltimas 24 horas
      const now = Date.now();
      const oneDayAgo = now - (24 * 60 * 60 * 1000);

      const fills = await History.getFillHistory(
        null, // symbol
        null, // orderId
        oneDayAgo,
        now,
        1000, // limit
        0, // offset
        null, // fillType
        'PERP', // marketType
        null, // sortDirection
        config.apiKey,
        config.apiSecret
      );

      if (!fills || !Array.isArray(fills)) {
        return [];
      }

      // Filtra fills do bot espec√≠fico
      const botFills = this.filterBotFills(fills, config.botClientOrderId);

      Logger.debug(`üìä [POSITION_SYNC] Encontrados ${botFills.length} fills recentes para bot ${botId}`);

      return botFills;

    } catch (error) {
      Logger.error(`‚ùå [POSITION_SYNC] Erro ao buscar fills para bot ${botId}:`, error.message);
      return [];
    }
  }

  /**
   * [DESABILITADO] Busca posi√ß√µes abertas da corretora
   *
   * MOTIVO: Este m√©todo busca TODAS as posi√ß√µes da conta, incluindo posi√ß√µes manuais.
   * Isso pode causar interfer√™ncia entre o bot e trading manual.
   *
   * NOVA ABORDAGEM: Usar apenas posi√ß√µes da tabela 'positions' (criadas pelos fills do pr√≥prio bot)
   *
   * @param {object} config - Configura√ß√£o do bot
   */
  async getOpenPositions(config) {
    Logger.warn('‚ö†Ô∏è [POSITION_SYNC] getOpenPositions foi desabilitado - usando apenas posi√ß√µes do bot');
    return [];

    // C√≥digo original comentado:
    /*
    try {
      const positions = await Futures.getOpenPositions(config.apiKey, config.apiSecret);
      return positions || [];

    } catch (error) {
      Logger.error(`‚ùå [POSITION_SYNC] Erro ao buscar posi√ß√µes abertas:`, error.message);
      return [];
    }
    */
  }

  /**
   * Busca ordens abertas do nosso banco
   * @param {number} botId - ID do bot
   */
  async getOurOpenOrders(botId) {
    try {
      const orders = await BotOrdersManager.getBotOrders(botId);

      // Filtra apenas ordens que n√£o foram fechadas
      const openOrders = orders.filter(order => {
        // CORRE√á√ÉO: Contar apenas ordens FILLED que ainda n√£o foram fechadas
        return order.status === 'FILLED' && (!order.closeTime || order.closeTime === '');
      });

      return openOrders;

    } catch (error) {
      Logger.error(`‚ùå [POSITION_SYNC] Erro ao buscar ordens abertas do bot ${botId}:`, error.message);
      return [];
    }
  }

  /**
   * NOVO M√âTODO: Detecta posi√ß√µes fechadas usando o novo sistema de rastreamento
   * @param {number} botId - ID do bot
   * @param {object} config - Configura√ß√£o do bot
   * @param {object} trackingResult - Resultado do rastreamento de posi√ß√µes
   */
  async detectClosedPositionsNew(botId, config, trackingResult) {
    const closedPositions = [];

    try {
      const { reconstructedPositions } = trackingResult;

      // Filtra posi√ß√µes que foram fechadas
      const closedPositionsData = reconstructedPositions.filter(pos => pos.isClosed);

      if (closedPositionsData.length > 0) {
        Logger.info(`üîç [POSITION_SYNC] Bot ${botId}: ${closedPositionsData.length} posi√ß√µes fechadas detectadas`);
      } else {
        Logger.debug(`üîç [POSITION_SYNC] Bot ${botId}: Nenhuma posi√ß√£o fechada detectada`);
      }

      // Para cada posi√ß√£o fechada, atualiza o banco
      for (const position of closedPositionsData) {
        try {
          await this.handleClosedPositionNew(botId, position);

          closedPositions.push({
            symbol: position.symbol,
            side: position.side,
            originalOrder: position.originalOrder,
            closureType: position.closeType,
            closePrice: position.closePrice,
            closeQuantity: position.closeQuantity,
            closeTime: position.closeTime,
            pnl: position.pnl,
            pnlPct: position.pnlPct
          });

        } catch (error) {
          Logger.error(`‚ùå [POSITION_SYNC] Erro ao processar posi√ß√£o fechada ${position.symbol}:`, error.message);
        }
      }

      if (closedPositions.length > 0) {
        Logger.info(`‚úÖ [POSITION_SYNC] Bot ${botId}: ${closedPositions.length} posi√ß√µes processadas`);
      }

    } catch (error) {
      Logger.error(`‚ùå [POSITION_SYNC] Erro ao detectar posi√ß√µes fechadas (novo sistema) para bot ${botId}:`, error.message);
    }

    return closedPositions;
  }

  /**
   * M√âTODO LEGADO: Detecta posi√ß√µes que foram fechadas automaticamente (mantido para compatibilidade)
   * @param {number} botId - ID do bot
   * @param {object} config - Configura√ß√£o do bot
   * @param {Array} ourOpenOrders - Nossas ordens abertas
   * @param {Array} recentFills - Fills recentes da corretora
   */
  async detectClosedPositions(botId, config, ourOpenOrders, recentFills) {
    const closedPositions = [];

    try {
      // Agrupa fills por s√≠mbolo
      const fillsBySymbol = this.groupFillsBySymbol(recentFills);

      // Para cada ordem aberta do nosso lado
      for (const order of ourOpenOrders) {
        const symbol = order.symbol;
        const symbolFills = fillsBySymbol[symbol] || [];

        if (symbolFills.length === 0) continue;

        // Calcula se a posi√ß√£o foi fechada
        const positionStatus = this.calculatePositionStatus(order, symbolFills);

        if (positionStatus.isClosed) {
          // Posi√ß√£o foi fechada automaticamente
          await this.handleClosedPosition(botId, order, positionStatus);
          closedPositions.push({
            originalOrder: order,
            closureType: positionStatus.closureType,
            closePrice: positionStatus.closePrice,
            closeQuantity: positionStatus.closeQuantity,
            closeTime: positionStatus.closeTime
          });
        }
      }

      if (closedPositions.length > 0) {
        Logger.info(`üîç [POSITION_SYNC] Bot ${botId}: ${closedPositions.length} posi√ß√µes fechadas automaticamente`);
      }

    } catch (error) {
      Logger.error(`‚ùå [POSITION_SYNC] Erro ao detectar posi√ß√µes fechadas para bot ${botId}:`, error.message);
    }

    return closedPositions;
  }

  /**
   * Calcula o status de uma posi√ß√£o baseado nos fills
   * @param {object} order - Ordem do nosso banco
   * @param {Array} symbolFills - Fills do s√≠mbolo
   */
  calculatePositionStatus(order, symbolFills) {
    const side = order.side; // BUY ou SELL
    const orderQuantity = parseFloat(order.quantity);
    const orderPrice = parseFloat(order.price);

    let totalFilledQuantity = 0;
    let totalFilledValue = 0;
    let closePrice = null;
    let closeTime = null;

    // Ordena fills por timestamp
    const sortedFills = symbolFills.sort((a, b) => new Date(a.timestamp) - new Date(b.timestamp));

    for (const fill of sortedFills) {
      const fillSide = fill.side === 'Bid' ? 'BUY' : (fill.side === 'Ask' ? 'SELL' : fill.side);
      const fillQuantity = parseFloat(fill.quantity);
      const fillPrice = parseFloat(fill.price);

      // Se √© dire√ß√£o oposta √† nossa posi√ß√£o
      if (fillSide !== side) {
        totalFilledQuantity += fillQuantity;
        totalFilledValue += (fillQuantity * fillPrice);
        closePrice = fillPrice;
        closeTime = new Date(fill.timestamp);

        // Se preencheu toda a quantidade, posi√ß√£o foi fechada
        if (totalFilledQuantity >= orderQuantity) {
          return {
            isClosed: true,
            closureType: 'AUTO',
            closePrice: closePrice,
            closeQuantity: orderQuantity,
            closeTime: closeTime,
            remainingQuantity: 0
          };
        }
      } else {
        // Mesma dire√ß√£o - pode ser entrada adicional
        // N√£o afeta o fechamento
      }
    }

    // Posi√ß√£o ainda aberta
    return {
      isClosed: false,
      remainingQuantity: orderQuantity - totalFilledQuantity
    };
  }

  /**
   * NOVO M√âTODO: Manipula posi√ß√µes fechadas usando o novo sistema
   * @param {number} botId - ID do bot
   * @param {object} position - Posi√ß√£o reconstru√≠da
   */
  async handleClosedPositionNew(botId, position) {
    try {
      const { symbol, side, originalOrder, closePrice, closeTime, closeQuantity, closeType, pnl, pnlPct } = position;

      Logger.info(`üîç [POSITION_SYNC] NOVO SISTEMA: Posi√ß√£o fechada: ${symbol} ${side} ${closeQuantity}`);

      // Atualiza a ordem no banco com status fechado
      await BotOrdersManager.updateOrder(originalOrder.externalOrderId, {
        status: 'CLOSED',
        closePrice: closePrice,
        closeTime: closeTime,
        closeQuantity: closeQuantity,
        closeType: closeType,
        pnl: pnl,
        pnlPct: pnlPct
      });

      Logger.info(`üí∞ [POSITION_SYNC] NOVO SISTEMA: PnL: $${pnl.toFixed(2)} (${pnlPct.toFixed(2)}%) para ${symbol}`);

    } catch (error) {
      Logger.error(`‚ùå [POSITION_SYNC] Erro ao manipular posi√ß√£o fechada (novo sistema):`, error.message);
    }
  }

  /**
   * M√âTODO LEGADO: Manipula uma posi√ß√£o que foi fechada automaticamente (mantido para compatibilidade)
   * @param {number} botId - ID do bot
   * @param {object} order - Ordem original
   * @param {object} positionStatus - Status da posi√ß√£o
   */
  async handleClosedPosition(botId, order, positionStatus) {
    try {
      Logger.info(`üîç [POSITION_SYNC] Posi√ß√£o fechada automaticamente: ${order.symbol} ${order.side} ${order.quantity}`);

      // Atualiza a ordem no banco com status fechado
      await BotOrdersManager.updateOrder(order.externalOrderId, {
        status: 'CLOSED',
        closePrice: positionStatus.closePrice,
        closeTime: positionStatus.closeTime,
        closeQuantity: positionStatus.closeQuantity,
        closeType: positionStatus.closureType
      });

      // Calcula PnL
      const pnl = this.calculatePnL(order, positionStatus);

      Logger.info(`üí∞ [POSITION_SYNC] PnL calculado: $${pnl.toFixed(2)} para ${order.symbol}`);

    } catch (error) {
      Logger.error(`‚ùå [POSITION_SYNC] Erro ao manipular posi√ß√£o fechada:`, error.message);
    }
  }

  /**
   * Calcula PnL de uma posi√ß√£o fechada
   * @param {object} order - Ordem original
   * @param {object} positionStatus - Status da posi√ß√£o
   */
  calculatePnL(order, positionStatus) {
    const entryPrice = parseFloat(order.price);
    const exitPrice = positionStatus.closePrice;
    const quantity = parseFloat(order.quantity);
    const side = order.side;

    let pnl;
    if (side === 'BUY') {
      // Long position: (exit - entry) * quantity
      pnl = (exitPrice - entryPrice) * quantity;
    } else {
      // Short position: (entry - exit) * quantity
      pnl = (entryPrice - exitPrice) * quantity;
    }

    return pnl;
  }

  /**
   * Atualiza estat√≠sticas do bot usando o novo sistema
   * @param {number} botId - ID do bot
   * @param {object} config - Configura√ß√£o do bot
   */
  async updateBotStatistics(botId, config) {
    try {
      // Usa o novo sistema para obter estat√≠sticas atualizadas
      const positionTracker = new PositionTrackingService(this.dbService);
      const trackingResult = await positionTracker.trackBotPositions(botId, config);
      const { performanceMetrics } = trackingResult;

      Logger.debug(`üìä [POSITION_SYNC] Bot ${botId}: Estat√≠sticas - ${performanceMetrics.closedPositions}/${performanceMetrics.totalPositions} posi√ß√µes, WR: ${performanceMetrics.winRate.toFixed(1)}%, PnL: $${performanceMetrics.totalPnl.toFixed(2)}`);

      // TODO: Salvar estat√≠sticas no banco de dados

    } catch (error) {
      Logger.error(`‚ùå [POSITION_SYNC] Erro ao atualizar estat√≠sticas do bot ${botId}:`, error.message);
    }
  }

  /**
   * Filtra fills que pertencem ao bot
   * @param {Array} fills - Fills da corretora
   * @param {string} botClientOrderId - ID do client do bot
   */
  filterBotFills(fills, botClientOrderId) {
    if (!botClientOrderId) return [];

    const botFills = [];
    const botClientOrderIdStr = botClientOrderId.toString();

    for (const fill of fills) {
      const clientId = fill.clientId || fill.clientOrderId || fill.client_order_id;

      if (clientId && clientId.toString().startsWith(botClientOrderIdStr)) {
        botFills.push(fill);
      }
    }

    return botFills;
  }

  /**
   * Agrupa fills por s√≠mbolo
   * @param {Array} fills - Fills da corretora
   */
  groupFillsBySymbol(fills) {
    const grouped = {};

    for (const fill of fills) {
      const symbol = fill.symbol;
      if (!grouped[symbol]) {
        grouped[symbol] = [];
      }
      grouped[symbol].push(fill);
    }

    return grouped;
  }

  /**
   * Para sincroniza√ß√£o de todos os bots
   */
  stopAllSync() {
    for (const [botId, intervalId] of this.syncIntervals.entries()) {
      clearInterval(intervalId);
    }
    this.syncIntervals.clear();
    this.lastSyncTimes.clear();
    Logger.info(`üõë [POSITION_SYNC] Todas as sincroniza√ß√µes paradas`);
  }

  /**
   * Retorna status das sincroniza√ß√µes
   */
  getSyncStatus() {
    const status = {};

    for (const [botId, intervalId] of this.syncIntervals.entries()) {
      status[botId] = {
        isActive: true,
        lastSync: this.lastSyncTimes.get(botId) || null
      };
    }

    return status;
  }
}

export default PositionSyncService;
