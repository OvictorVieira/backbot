import Order from '../Backpack/Authenticated/Order.js';
import Futures from '../Backpack/Authenticated/Futures.js';
import History from '../Backpack/Authenticated/History.js';
import DatabaseService from './DatabaseService.js';
import Logger from '../Utils/Logger.js';

/**
 * OrdersService - Centralizador de toda l√≥gica de cria√ß√£o de ordens
 *
 * Este servi√ßo encapsula toda a complexidade da cria√ß√£o de diferentes tipos de ordem,
 * sendo o √∫nico ponto no sistema respons√°vel por interagir com a API da exchange.
 */
class OrdersService {
  /**
   * @param {Object} backpackOrderClient - Cliente da API da Backpack (Order)
   * @param {DatabaseService} dbService - Inst√¢ncia do DatabaseService
   */
  constructor(backpackOrderClient = null, dbService = null) {
    this.orderClient = backpackOrderClient || Order;
    this.dbService = dbService;
  }

  /**
   * Aguarda um tempo determinado para evitar rate limiting
   * @param {number} ms - Tempo em milissegundos para aguardar
   */
  static async delay(ms) {
    return new Promise(resolve => setTimeout(resolve, ms));
  }

  async getOpenOrder(symbol, externalOrderId, apiKey, apiSecret) {
    if (!symbol || !apiKey || !apiSecret) {
      throw new Error('Par√¢metros obrigat√≥rios faltando: symbol, apiKey, apiSecret');
    }
    try {
      const openOrder = await this.orderClient.getOpenOrder(
        symbol,
        externalOrderId,
        null,
        apiKey,
        apiSecret
      );
      if (!openOrder) {
        throw new Error('Ordem n√£o encontrada');
      }

      return openOrder;
    } catch (error) {
      Logger.error(`‚ùå [ORDERS_SERVICE] Erro ao buscar ordem: ${error.message}`);
      return null;
    }
  }

  /**
   * Cria uma ordem de mercado
   * @param {Object} params - Par√¢metros da ordem
   * @param {string} params.symbol - S√≠mbolo do mercado (ex: 'SOL_USDC')
   * @param {string} params.side - Lado da ordem ('Bid' ou 'Ask')
   * @param {string} params.quantity - Quantidade da ordem
   * @param {number} params.clientId - ID √∫nico da ordem
   * @param {string} params.apiKey - API Key da conta
   * @param {string} params.apiSecret - API Secret da conta
   * @param {Object} params.additionalParams - Par√¢metros adicionais opcionais
   * @returns {Promise<Object>} Resultado da cria√ß√£o da ordem
   */
  async createMarketOrder(params) {
    try {
      const { symbol, side, quantity, clientId, apiKey, apiSecret, additionalParams = {} } = params;

      if (!symbol || !side || !quantity || !clientId) {
        throw new Error('Par√¢metros obrigat√≥rios faltando: symbol, side, quantity, clientId');
      }

      const orderBody = {
        symbol,
        side,
        quantity: quantity.toString(),
        orderType: 'Market',
        clientId,
        timeInForce: 'IOC', // Immediate or Cancel para market orders
        selfTradePrevention: 'RejectTaker',
        ...additionalParams,
      };

      Logger.info(`üì¶ [ORDERS_SERVICE] Criando ordem MARKET: ${symbol} ${side} ${quantity}`);

      const result = await this.orderClient.executeOrder(orderBody, apiKey, apiSecret);

      if (result && !result.error) {
        Logger.info(
          `‚úÖ [ORDERS_SERVICE] Ordem MARKET criada com sucesso: ${result.id || result.orderId}`
        );

        // Persiste a ordem no banco se dbService estiver dispon√≠vel
        await this._persistOrder({
          externalOrderId: result.id || result.orderId,
          symbol,
          side,
          quantity,
          orderType: 'MARKET',
          status: 'EXECUTED',
          clientId,
        });
      } else {
        Logger.error(`‚ùå [ORDERS_SERVICE] Falha ao criar ordem MARKET: ${result?.error}`);
      }

      return result;
    } catch (error) {
      Logger.error(`‚ùå [ORDERS_SERVICE] Erro ao criar ordem MARKET:`, error.message);
      return { error: error.message };
    }
  }

  /**
   * Cria uma ordem limite
   * @param {Object} params - Par√¢metros da ordem
   * @param {string} params.symbol - S√≠mbolo do mercado
   * @param {string} params.side - Lado da ordem
   * @param {string} params.quantity - Quantidade da ordem
   * @param {string} params.price - Pre√ßo limite da ordem
   * @param {number} params.clientId - ID √∫nico da ordem
   * @param {string} params.apiKey - API Key da conta
   * @param {string} params.apiSecret - API Secret da conta
   * @param {Object} params.additionalParams - Par√¢metros adicionais opcionais
   * @returns {Promise<Object>} Resultado da cria√ß√£o da ordem
   */
  async createLimitOrder(params) {
    try {
      const {
        symbol,
        side,
        quantity,
        price,
        clientId,
        apiKey,
        apiSecret,
        additionalParams = {},
      } = params;

      if (!symbol || !side || !quantity || !price || !clientId) {
        throw new Error(
          'Par√¢metros obrigat√≥rios faltando: symbol, side, quantity, price, clientId'
        );
      }

      const orderBody = {
        symbol,
        side,
        quantity: quantity.toString(),
        price: price.toString(),
        orderType: 'Limit',
        clientId,
        timeInForce: 'GTC',
        postOnly: true,
        selfTradePrevention: 'RejectTaker',
        ...additionalParams,
      };

      Logger.info(
        `üì¶ [ORDERS_SERVICE] Criando ordem LIMIT: ${symbol} ${side} ${quantity} @ ${price}`
      );

      const result = await this.orderClient.executeOrder(orderBody, apiKey, apiSecret);

      if (result && !result.error) {
        Logger.info(
          `‚úÖ [ORDERS_SERVICE] Ordem LIMIT criada com sucesso: ${result.id || result.orderId}`
        );

        // Persiste a ordem no banco se dbService estiver dispon√≠vel
        await this._persistOrder({
          externalOrderId: result.id || result.orderId,
          symbol,
          side,
          quantity,
          price,
          orderType: 'LIMIT',
          status: 'PENDING',
          clientId,
        });
      } else {
        Logger.error(`‚ùå [ORDERS_SERVICE] Falha ao criar ordem LIMIT: ${result?.error}`);
      }

      return result;
    } catch (error) {
      Logger.error(`‚ùå [ORDERS_SERVICE] Erro ao criar ordem LIMIT:`, error.message);
      return { error: error.message };
    }
  }

  /**
   * Cria uma ordem de Take Profit
   * @param {Object} params - Par√¢metros da ordem
   * @param {string} params.symbol - S√≠mbolo do mercado
   * @param {string} params.side - Lado da ordem (oposto √† posi√ß√£o)
   * @param {string} params.quantity - Quantidade da ordem
   * @param {string} params.takeProfitTriggerPrice - Pre√ßo de trigger do take profit
   * @param {string} params.takeProfitLimitPrice - Pre√ßo limite do take profit
   * @param {number} params.clientId - ID √∫nico da ordem
   * @param {string} params.apiKey - API Key da conta
   * @param {string} params.apiSecret - API Secret da conta
   * @param {Object} params.additionalParams - Par√¢metros adicionais opcionais
   * @returns {Promise<Object>} Resultado da cria√ß√£o da ordem
   */
  async createTakeProfitOrder(params) {
    try {
      const {
        symbol,
        side,
        quantity,
        takeProfitTriggerPrice,
        takeProfitLimitPrice,
        clientId,
        apiKey,
        apiSecret,
        additionalParams = {},
      } = params;

      if (
        !symbol ||
        !side ||
        !quantity ||
        !takeProfitTriggerPrice ||
        !takeProfitLimitPrice ||
        !clientId
      ) {
        throw new Error(
          'Par√¢metros obrigat√≥rios faltando: symbol, side, quantity, takeProfitTriggerPrice, takeProfitLimitPrice, clientId'
        );
      }

      // üîç PRIMEIRA VERIFICA√á√ÉO: Consulta a exchange para verificar se j√° existe ordem de take profit
      Logger.debug(
        `üîç [ORDERS_SERVICE] Verificando ordens existentes na exchange para ${symbol}...`
      );

      try {
        const existingOrders = await this.orderClient.getOpenOrders(
          symbol,
          null,
          apiKey,
          apiSecret
        );

        if (existingOrders && Array.isArray(existingOrders)) {
          // Filtra ordens de take profit existentes
          const existingTakeProfit = existingOrders.filter(
            order =>
              order.takeProfitTriggerPrice &&
              order.status === 'Pending' &&
              order.reduceOnly === true
          );

          if (existingTakeProfit.length > 0) {
            Logger.info(
              `‚ö†Ô∏è [ORDERS_SERVICE] ${symbol}: J√° existe(m) ${existingTakeProfit.length} ordem(ns) de take profit na exchange. Cancelando cria√ß√£o.`
            );
            Logger.debug(
              `üìã [ORDERS_SERVICE] Ordens existentes:`,
              existingTakeProfit.map(o => ({
                id: o.id,
                triggerPrice: o.takeProfitTriggerPrice,
                limitPrice: o.takeProfitLimitPrice,
                quantity: o.quantity,
              }))
            );

            return {
              success: false,
              message: 'Take profit j√° existe na exchange',
              existingOrders: existingTakeProfit.length,
            };
          }
        }
      } catch (exchangeError) {
        Logger.warn(
          `‚ö†Ô∏è [ORDERS_SERVICE] Erro ao verificar ordens existentes na exchange: ${exchangeError.message}. Continuando com cria√ß√£o...`
        );
      }

      const orderBody = {
        symbol,
        side,
        quantity: quantity.toString(),
        orderType: 'Limit',
        clientId,
        timeInForce: 'GTC',
        reduceOnly: true,
        selfTradePrevention: 'RejectTaker',
        takeProfitTriggerPrice: takeProfitTriggerPrice.toString(),
        takeProfitLimitPrice: takeProfitLimitPrice.toString(),
        takeProfitTriggerBy: 'MarkPrice',
        ...additionalParams,
      };

      Logger.info(
        `üì¶ [ORDERS_SERVICE] Criando ordem TAKE PROFIT: ${symbol} ${side} ${quantity} @ trigger: ${takeProfitTriggerPrice}, limit: ${takeProfitLimitPrice}`
      );

      const result = await this.orderClient.executeOrder(orderBody, apiKey, apiSecret);

      if (result && !result.error) {
        Logger.info(
          `‚úÖ [ORDERS_SERVICE] Ordem TAKE PROFIT criada com sucesso: ${result.id || result.orderId}`
        );

        // Persiste a ordem no banco se dbService estiver dispon√≠vel
        await this._persistOrder({
          externalOrderId: result.id || result.orderId,
          symbol,
          side,
          quantity,
          price: takeProfitLimitPrice,
          orderType: 'TAKE_PROFIT',
          status: 'PENDING',
          clientId,
        });
      } else {
        Logger.error(`‚ùå [ORDERS_SERVICE] Falha ao criar ordem TAKE PROFIT: ${result?.error}`);
      }

      return result;
    } catch (error) {
      Logger.error(`‚ùå [ORDERS_SERVICE] Erro ao criar ordem TAKE PROFIT:`, error.message);
      return { error: error.message };
    }
  }

  async createStopLossOrder(params) {
    try {
      const {
        symbol,
        side,
        quantity,
        stopLossTriggerPrice,
        stopLossLimitPrice = null,
        _orderType,
        clientId,
        apiKey,
        apiSecret,
      } = params;

      if (!symbol || !side || !quantity || !stopLossTriggerPrice || !clientId) {
        throw new Error(
          'Par√¢metros obrigat√≥rios faltando: symbol, side, quantity, stopLossTriggerPrice, clientId'
        );
      }

      const orderBody = {
        symbol,
        side,
        orderType: 'Market',
        reduceOnly: true,
        quantity: quantity.toString(),
        triggerPrice: stopLossTriggerPrice.toString(),
        triggerQuantity: quantity.toString(),
        timeInForce: 'GTC',
        clientId,
      };

      Logger.info(
        `üì¶ [ORDERS_SERVICE] Criando ordem STOP LOSS: ${symbol} ${side} ${quantity} @ trigger: ${stopLossTriggerPrice}${stopLossLimitPrice ? `, limit: ${stopLossLimitPrice}` : ' (MARKET)'}`
      );

      const result = await this.orderClient.executeOrder(orderBody, apiKey, apiSecret);

      if (result && !result.error) {
        Logger.info(
          `‚úÖ [ORDERS_SERVICE] Ordem STOP LOSS criada com sucesso: ${result.id || result.orderId}`
        );

        // Persiste a ordem no banco se dbService estiver dispon√≠vel
        await this._persistOrder({
          externalOrderId: result.id || result.orderId,
          symbol,
          side,
          quantity,
          price: stopLossLimitPrice || stopLossTriggerPrice,
          orderType: 'STOP_LOSS',
          status: 'PENDING',
          clientId,
        });
      } else {
        Logger.error(`‚ùå [ORDERS_SERVICE] Falha ao criar ordem STOP LOSS: ${result?.error}`);
      }

      return result;
    } catch (error) {
      Logger.error(`‚ùå [ORDERS_SERVICE] Erro ao criar ordem STOP LOSS:`, error.message);
      return { error: error.message };
    }
  }

  async cancelOrder(params) {
    try {
      const {
        symbol,
        orderId,
        cancelReason = 'Trailing Stop Atualizado',
        apiKey,
        apiSecret,
      } = params;

      // 1. Valida√ß√£o dos par√¢metros essenciais
      if (!symbol || !orderId) {
        throw new Error('Par√¢metros obrigat√≥rios faltando: symbol, orderId');
      }

      Logger.info(
        `üì¶ [ORDERS_SERVICE] Solicitando cancelamento da ordem: ${orderId} para o s√≠mbolo ${symbol}`
      );

      // 2. Chama o m√©todo do cliente de baixo n√≠vel para interagir com a API
      const result = await this.orderClient.cancelOpenOrder(
        symbol,
        orderId,
        null,
        apiKey,
        apiSecret
      );

      if (result && !result.error) {
        Logger.info(`‚úÖ [ORDERS_SERVICE] Ordem ${orderId} cancelada com sucesso na corretora.`);

        // 3. Persiste a mudan√ßa de status no seu banco de dados usando o m√©todo est√°tico
        await OrdersService.updateOrderStatus(orderId, 'CANCELLED', cancelReason);
      } else {
        const errorMessage = result?.error || 'Erro desconhecido da API';
        Logger.error(`‚ùå [ORDERS_SERVICE] Falha ao cancelar ordem ${orderId}:`, errorMessage);
      }

      return result;
    } catch (error) {
      Logger.error(
        `‚ùå [ORDERS_SERVICE] Erro cr√≠tico ao cancelar ordem ${params.orderId}:`,
        error.message
      );
      return { error: error.message };
    }
  }

  /**
   * Cria uma ordem de fechamento parcial de posi√ß√£o
   * @param {Object} params - Par√¢metros da ordem
   * @param {string} params.symbol - S√≠mbolo do mercado
   * @param {string} params.side - Lado da ordem (oposto √† posi√ß√£o)
   * @param {string} params.quantity - Quantidade da ordem
   * @param {string} params.price - Pre√ßo da ordem (opcional, usa Market se n√£o fornecido)
   * @param {number} params.clientId - ID √∫nico da ordem
   * @param {string} params.apiKey - API Key da conta
   * @param {string} params.apiSecret - API Secret da conta
   * @param {Object} params.additionalParams - Par√¢metros adicionais opcionais
   * @returns {Promise<Object>} Resultado da cria√ß√£o da ordem
   */
  async createPartialCloseOrder(params) {
    try {
      const {
        symbol,
        side,
        quantity,
        price = null,
        clientId,
        apiKey,
        apiSecret,
        additionalParams = {},
      } = params;

      if (!symbol || !side || !quantity || !clientId) {
        throw new Error('Par√¢metros obrigat√≥rios faltando: symbol, side, quantity, clientId');
      }

      const orderBody = {
        symbol,
        side,
        quantity: quantity.toString(),
        orderType: price ? 'Limit' : 'Market',
        clientId,
        timeInForce: price ? 'GTC' : 'IOC',
        reduceOnly: true,
        selfTradePrevention: 'RejectTaker',
        ...additionalParams,
      };

      // Adiciona pre√ßo apenas se fornecido
      if (price) {
        orderBody.price = price.toString();
        orderBody.postOnly = true; // Para minimizar taxas em ordens limit
      }

      Logger.info(
        `üì¶ [ORDERS_SERVICE] Criando ordem FECHAMENTO PARCIAL: ${symbol} ${side} ${quantity}${price ? ` @ ${price}` : ' (MARKET)'}`
      );

      const result = await this.orderClient.executeOrder(orderBody, apiKey, apiSecret);

      if (result && !result.error) {
        Logger.info(
          `‚úÖ [ORDERS_SERVICE] Ordem FECHAMENTO PARCIAL criada com sucesso: ${result.id || result.orderId}`
        );

        // Persiste a ordem no banco se dbService estiver dispon√≠vel
        await this._persistOrder({
          externalOrderId: result.id || result.orderId,
          symbol,
          side,
          quantity,
          price: price,
          orderType: 'PARTIAL_CLOSE',
          status: price ? 'PENDING' : 'EXECUTED',
          clientId,
        });
      } else {
        Logger.error(
          `‚ùå [ORDERS_SERVICE] Falha ao criar ordem FECHAMENTO PARCIAL: ${result?.error}`
        );
      }

      return result;
    } catch (error) {
      Logger.error(`‚ùå [ORDERS_SERVICE] Erro ao criar ordem FECHAMENTO PARCIAL:`, error.message);
      return { error: error.message };
    }
  }

  /**
   * M√©todo privado para persistir ordem no banco de dados
   * @param {Object} orderData - Dados da ordem para persistir
   * @private
   */
  async _persistOrder(orderData) {
    if (!this.dbService) {
      Logger.debug('üíæ [ORDERS_SERVICE] DatabaseService n√£o dispon√≠vel, ordem n√£o persistida');
      return;
    }

    try {
      const orderToSave = {
        externalOrderId: orderData.externalOrderId,
        symbol: orderData.symbol,
        side: orderData.side,
        quantity: orderData.quantity,
        price: orderData.price,
        orderType: orderData.orderType,
        status: orderData.status,
        clientId: orderData.clientId,
        timestamp: new Date().toISOString(),
        exchangeCreatedAt: new Date().toISOString(),
      };

      await this.addOrder(orderToSave);
      Logger.debug(`üíæ [ORDERS_SERVICE] Ordem persistida no banco: ${orderData.externalOrderId}`);
    } catch (error) {
      Logger.warn(`‚ö†Ô∏è [ORDERS_SERVICE] Falha ao persistir ordem no banco: ${error.message}`);
    }
  }

  // ============================================================================
  // M√âTODOS DE PERSIST√äNCIA (compatibilidade com o OrdersService original)
  // ============================================================================

  static dbService = null;

  /**
   * Inicializa o servi√ßo com o DatabaseService
   * @param {DatabaseService} dbService - Inst√¢ncia do DatabaseService
   */
  static init(dbService) {
    OrdersService.dbService = dbService;
  }

  /**
   * Adiciona uma nova ordem
   * @param {Object} order - Dados da ordem
   * @returns {Object} Ordem salva
   */
  static async addOrder(order) {
    try {
      if (!OrdersService.dbService || !OrdersService.dbService.isInitialized()) {
        throw new Error('Database service not initialized');
      }

      const result = await OrdersService.dbService.run(
        `INSERT INTO bot_orders (botId, externalOrderId, symbol, side, quantity, price, orderType, timestamp, status, clientId, exchangeCreatedAt, closePrice, closeTime, closeQuantity, closeType, pnl, pnlPct) 
         VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)`,
        [
          order.botId,
          order.externalOrderId,
          order.symbol,
          order.side,
          order.quantity,
          order.price,
          order.orderType,
          order.timestamp || new Date().toISOString(),
          order.status || 'PENDING',
          order.clientId || null,
          order.exchangeCreatedAt || null,
          order.closePrice || null,
          order.closeTime || null,
          order.closeQuantity || null,
          order.closeType || null,
          order.pnl || null,
          order.pnlPct || null,
        ]
      );

      console.log(
        `‚úÖ [ORDERS_SERVICE] Ordem adicionada: ${order.symbol} ${order.side} ${order.quantity}`
      );
      return { ...order, id: result.lastID };
    } catch (error) {
      console.error(`‚ùå [ORDERS_SERVICE] Erro ao adicionar ordem:`, error.message);
      throw error;
    }
  }

  /**
   * M√©todo de inst√¢ncia para adicionar ordem (compatibilidade)
   */
  async addOrder(order) {
    return OrdersService.addOrder(order);
  }

  // ============================================================================
  // OUTROS M√âTODOS EST√ÅTICOS (mantidos para compatibilidade)
  // ============================================================================

  /**
   * Obt√©m ordens de um bot espec√≠fico
   * @param {number} botId - ID do bot
   * @returns {Array} Array de ordens do bot
   */
  static async getOrdersByBotId(botId) {
    try {
      if (!OrdersService.dbService || !OrdersService.dbService.isInitialized()) {
        throw new Error('Database service not initialized');
      }

      const orders = await OrdersService.dbService.getAll(
        'SELECT * FROM bot_orders WHERE botId = ? ORDER BY timestamp DESC',
        [botId]
      );

      return orders;
    } catch (error) {
      console.error(`‚ùå [ORDERS_SERVICE] Erro ao obter ordens do bot ${botId}:`, error.message);
      return [];
    }
  }

  /**
   * Obt√©m uma ordem pelo externalOrderId
   * @param {string} externalOrderId - ID externo da ordem
   * @returns {Object|null} Ordem encontrada ou null
   */
  static async getOrderByExternalId(externalOrderId) {
    try {
      if (!OrdersService.dbService || !OrdersService.dbService.isInitialized()) {
        throw new Error('Database service not initialized');
      }

      const order = await OrdersService.dbService.get(
        'SELECT * FROM bot_orders WHERE externalOrderId = ?',
        [externalOrderId]
      );

      return order || null;
    } catch (error) {
      console.error(
        `‚ùå [ORDERS_SERVICE] Erro ao obter ordem por externalOrderId ${externalOrderId}:`,
        error.message
      );
      return null;
    }
  }

  /**
   * Atualiza uma ordem pelo externalOrderId
   * @param {string} externalOrderId - ID externo da ordem
   * @param {Object} updates - Campos a serem atualizados
   * @returns {number} N√∫mero de ordens atualizadas
   */
  static async updateOrderByExternalId(externalOrderId, updates) {
    try {
      if (!OrdersService.dbService || !OrdersService.dbService.isInitialized()) {
        throw new Error('Database service not initialized');
      }

      // Constr√≥i a query dinamicamente baseada nos campos fornecidos
      const updateFields = [];
      const values = [];

      for (const [key, value] of Object.entries(updates)) {
        if (key !== 'id' && key !== 'externalOrderId') {
          // Protege campos que n√£o devem ser atualizados
          updateFields.push(`${key} = ?`);
          values.push(value);
        }
      }

      if (updateFields.length === 0) {
        console.warn(`‚ö†Ô∏è [ORDERS_SERVICE] Nenhum campo v√°lido para atualizar`);
        return 0;
      }

      values.push(externalOrderId);
      const query = `UPDATE bot_orders SET ${updateFields.join(', ')} WHERE externalOrderId = ?`;

      const result = await OrdersService.dbService.run(query, values);

      if (result.changes > 0) {
        console.log(`‚úèÔ∏è [ORDERS_SERVICE] Ordem ${externalOrderId} atualizada`);
      }

      return result.changes;
    } catch (error) {
      console.error(
        `‚ùå [ORDERS_SERVICE] Erro ao atualizar ordem ${externalOrderId}:`,
        error.message
      );
      return 0;
    }
  }

  // Outros m√©todos est√°ticos mantidos para compatibilidade...
  static async getOrdersBySymbol(symbol) {
    try {
      if (!OrdersService.dbService || !OrdersService.dbService.isInitialized()) {
        throw new Error('Database service not initialized');
      }

      const orders = await OrdersService.dbService.getAll(
        'SELECT * FROM bot_orders WHERE symbol = ? ORDER BY timestamp DESC',
        [symbol]
      );

      return orders;
    } catch (error) {
      console.error(
        `‚ùå [ORDERS_SERVICE] Erro ao obter ordens do s√≠mbolo ${symbol}:`,
        error.message
      );
      return [];
    }
  }

  static async getAllOrders() {
    try {
      if (!OrdersService.dbService || !OrdersService.dbService.isInitialized()) {
        throw new Error('Database service not initialized');
      }

      const orders = await OrdersService.dbService.getAll(
        'SELECT * FROM bot_orders ORDER BY timestamp DESC'
      );

      return orders || [];
    } catch (error) {
      console.error(`‚ùå [ORDERS_SERVICE] Erro ao obter todas as ordens:`, error.message);
      return [];
    }
  }

  static async clearAllOrders() {
    try {
      if (!OrdersService.dbService || !OrdersService.dbService.isInitialized()) {
        throw new Error('Database service not initialized');
      }

      const result = await OrdersService.dbService.run('DELETE FROM bot_orders');

      console.log(`üßπ [ORDERS_SERVICE] Todas as ${result.changes} ordens removidas`);
      return result.changes;
    } catch (error) {
      console.error(`‚ùå [ORDERS_SERVICE] Erro ao limpar todas as ordens:`, error.message);
      return 0;
    }
  }

  /**
   * Remove todas as ordens de um bot espec√≠fico
   * @param {number} botId - ID do bot
   * @returns {Promise<number>} N√∫mero de ordens removidas
   */
  static async removeOrdersByBotId(botId) {
    try {
      if (!OrdersService.dbService || !OrdersService.dbService.isInitialized()) {
        throw new Error('Database service not initialized');
      }

      const result = await OrdersService.dbService.run('DELETE FROM bot_orders WHERE botId = ?', [
        botId,
      ]);

      console.log(`üßπ [ORDERS_SERVICE] ${result.changes} ordens do bot ${botId} removidas`);
      return result.changes;
    } catch (error) {
      console.error(`‚ùå [ORDERS_SERVICE] Erro ao remover ordens do bot ${botId}:`, error.message);
      return 0;
    }
  }

  /**
   * Atualiza o status de uma ordem
   * @param {string} externalOrderId - ID externo da ordem
   * @param {string} newStatus - Novo status da ordem
   * @param {string} cancelReason - Raz√£o do cancelamento (opcional)
   * @returns {Promise<boolean>} - True se atualizado com sucesso
   */
  static async updateOrderStatus(externalOrderId, newStatus, cancelReason = null) {
    try {
      if (!OrdersService.dbService) {
        console.warn(`‚ö†Ô∏è [ORDERS_SERVICE] Database n√£o inicializado para updateOrderStatus`);
        return false;
      }

      const updateFields = ['status = ?'];
      const updateValues = [newStatus];

      // Se for cancelamento, adiciona a raz√£o
      if (newStatus === 'CANCELLED' && cancelReason) {
        updateFields.push('closeType = ?');
        updateValues.push(cancelReason);
      }

      // Adiciona timestamp de atualiza√ß√£o
      updateFields.push('closeTime = ?');
      updateValues.push(new Date().toISOString());

      const result = await OrdersService.dbService.run(
        `UPDATE bot_orders SET ${updateFields.join(', ')} WHERE externalOrderId = ?`,
        [...updateValues, externalOrderId]
      );

      if (result.changes > 0) {
        Logger.debug(
          `‚úÖ [ORDERS_SERVICE] Status da ordem ${externalOrderId} atualizado para ${newStatus}`
        );
        return true;
      } else {
        Logger.warn(`‚ö†Ô∏è [ORDERS_SERVICE] Ordem ${externalOrderId} n√£o encontrada para atualiza√ß√£o`);
        return false;
      }
    } catch (error) {
      Logger.error(
        `‚ùå [ORDERS_SERVICE] Erro ao atualizar status da ordem ${externalOrderId}:`,
        error.message
      );
      return false;
    }
  }

  /**
   * Sincroniza todas as ordens do bot com a corretora (fonte da verdade)
   * @param {number} botId - ID do bot
   * @param {object} config - Configura√ß√£o do bot com API keys
   * @returns {Promise<number>} - N√∫mero de ordens sincronizadas
   */
  static async syncOrdersWithExchange(botId, config) {
    try {
      if (!config?.apiKey || !config?.apiSecret) {
        Logger.warn(`‚ö†Ô∏è [ORDERS_SYNC] Credenciais n√£o dispon√≠veis para bot ${botId}`);
        return 0;
      }

      Logger.info(
        `üîÑ [ORDERS_SYNC] Iniciando sincroniza√ß√£o completa com corretora para bot ${botId}`
      );

      // ETAPA 1: Buscar TODAS as ordens ativas na corretora (fonte da verdade)
      const { default: Order } = await import('../Backpack/Authenticated/Order.js');
      const exchangeOrders = await Order.getOpenOrders(
        null,
        'PERP',
        config.apiKey,
        config.apiSecret
      );

      if (!exchangeOrders) {
        Logger.warn(
          `‚ö†Ô∏è [ORDERS_SYNC] N√£o foi poss√≠vel buscar ordens da corretora para bot ${botId}`
        );
        return 0;
      }

      // Filtra apenas ordens do bot usando clientId
      const botClientOrderId = config.botClientOrderId?.toString() || '';
      const botExchangeOrders = exchangeOrders.filter(order => {
        const clientId = order.clientId?.toString() || '';
        return clientId.startsWith(botClientOrderId);
      });

      Logger.debug(
        `üìä [ORDERS_SYNC] Encontradas ${botExchangeOrders.length} ordens ativas na corretora para bot ${botId}`
      );

      // Log das ordens encontradas na corretora para debug
      botExchangeOrders.forEach(order => {
        Logger.debug(
          `üîç [EXCHANGE] Ordem: ${order.id}, ClientId: ${order.clientId}, Symbol: ${order.symbol}, Status: ${order.status}`
        );
      });

      // ETAPA 2: Buscar todas as ordens do bot no nosso banco que n√£o est√£o CLOSED
      const ourOrders = await OrdersService.dbService.getAll(
        `SELECT * FROM bot_orders 
         WHERE botId = ? AND status != 'CLOSED' 
         AND externalOrderId IS NOT NULL`,
        [botId]
      );

      Logger.debug(
        `üìä [ORDERS_SYNC] Encontradas ${ourOrders.length} ordens n√£o-CLOSED no nosso banco para bot ${botId}`
      );

      // Log das ordens do nosso banco para debug
      ourOrders.forEach(order => {
        Logger.debug(
          `üîç [OUR_DB] Ordem: ${order.externalOrderId}, ClientId: ${order.clientId}, Symbol: ${order.symbol}, Status: ${order.status}`
        );
      });

      let syncedCount = 0;

      // ETAPA 3: Criar mapa das ordens da corretora por ID e clientId
      const exchangeOrdersMapById = new Map();
      const exchangeOrdersMapByClientId = new Map();

      botExchangeOrders.forEach(order => {
        if (order.id) {
          exchangeOrdersMapById.set(order.id, order);
        }
        if (order.clientId) {
          exchangeOrdersMapByClientId.set(order.clientId.toString(), order);
        }
      });

      Logger.debug(
        `üîç [ORDERS_SYNC] Mapeadas ${exchangeOrdersMapById.size} ordens por ID e ${exchangeOrdersMapByClientId.size} por clientId`
      );

      // ETAPA 4: Sincronizar ordens do nosso banco com a corretora
      Logger.info(
        `üîÑ [ORDERS_SYNC] Iniciando sincroniza√ß√£o de ${ourOrders.length} ordens com delays para evitar rate limiting`
      );

      const closedPositionsCount = await OrdersService.syncPositionsFromExchangeFills(
        botId,
        config
      );

      Logger.info(
        `üìä [ORDERS_SYNC] Bot ${botId}: ${syncedCount} ordens sincronizadas, ${closedPositionsCount} posi√ß√µes fechadas`
      );

      for (let i = 0; i < ourOrders.length; i++) {
        const ourOrder = ourOrders[i];
        try {
          // Tentar encontrar a ordem na corretora por externalOrderId primeiro, depois por clientId
          let exchangeOrder = exchangeOrdersMapById.get(ourOrder.externalOrderId);

          if (!exchangeOrder && ourOrder.clientId) {
            exchangeOrder = exchangeOrdersMapByClientId.get(ourOrder.clientId.toString());
          }

          Logger.debug(
            `üîç [ORDERS_SYNC] Ordem ${ourOrder.externalOrderId} (clientId: ${ourOrder.clientId}): ${exchangeOrder ? 'Encontrada' : 'N√£o encontrada'} na corretora`
          );

          if (exchangeOrder) {
            // Ordem existe na corretora - sincronizar status
            const exchangeStatus = exchangeOrder.status;
            let ourStatus = 'PENDING'; // Default

            // Mapear status da corretora para nosso formato
            switch (exchangeStatus) {
              case 'Open':
              case 'New':
                ourStatus = 'PENDING';
                break;
              case 'Filled':
                ourStatus = 'FILLED';
                break;
              case 'Cancelled':
              case 'Rejected':
                ourStatus = 'CANCELLED';
                break;
              case 'PartiallyFilled':
                ourStatus = 'FILLED'; // Consideramos como preenchida
                break;
            }

            // Atualizar se houver diferen√ßa
            if (ourOrder.status !== ourStatus) {
              await OrdersService.updateOrderStatus(
                ourOrder.externalOrderId,
                ourStatus,
                'EXCHANGE_SYNC'
              );
              Logger.info(
                `üîÑ [ORDERS_SYNC] Ordem ${ourOrder.externalOrderId}: ${ourOrder.status} ‚Üí ${ourStatus}`
              );
              syncedCount++;
            }
          } else {
            // Ordem N√ÉO existe na corretora - pode ter sido executada ou cancelada
            Logger.debug(
              `‚ùå [ORDERS_SYNC] Ordem ${ourOrder.externalOrderId} n√£o encontrada nas ordens abertas da corretora`
            );

            // NOVA L√ìGICA: Se a ordem j√° est√° FILLED, n√£o alterar (posi√ß√£o j√° aberta)
            if (ourOrder.status === 'FILLED') {
              Logger.debug(
                `‚ÑπÔ∏è [ORDERS_SYNC] Ordem ${ourOrder.externalOrderId} j√° est√° FILLED - mantendo status (posi√ß√£o aberta)`
              );
              continue;
            }

            // Fila global agora coordena os delays - n√£o precisa de delay manual aqui

            // Buscar status real da ordem na corretora (sabemos que est√° PENDING no nosso lado)
            const { default: History } = await import('../Backpack/Authenticated/History.js');
            // Buscar hist√≥rico da ordem (fila global coordena rate limiting)
            const orderHistory = await History.getOrderHistory(
              ourOrder.externalOrderId, // orderId - ID da ordem espec√≠fica
              ourOrder.symbol, // symbol - s√≠mbolo do par
              10, // limit
              0, // offset
              'PERP', // marketType
              null, // sortDirection
              config.apiKey,
              config.apiSecret
            );

            // Se retornou null, a fila global j√° lidou com rate limiting
            if (orderHistory === null) {
              Logger.warn(
                `‚ö†Ô∏è [ORDERS_SYNC] Hist√≥rico n√£o dispon√≠vel para ordem ${ourOrder.externalOrderId} - mantendo PENDING`
              );
              continue;
            }

            if (orderHistory && Array.isArray(orderHistory) && orderHistory.length > 0) {
              const orderRecord = orderHistory.find(order => order.id === ourOrder.externalOrderId);

              if (orderRecord) {
                Logger.debug(
                  `üîç [ORDERS_SYNC] Status real da ordem ${ourOrder.externalOrderId} na corretora: ${orderRecord.status}`
                );

                // Sincronizar nosso status com o da corretora
                if (orderRecord.status === 'Filled' || orderRecord.status === 'PartiallyFilled') {
                  await OrdersService.updateOrderStatus(
                    ourOrder.externalOrderId,
                    'FILLED',
                    'EXCHANGE_EXECUTED'
                  );
                  Logger.info(
                    `‚úÖ [ORDERS_SYNC] Ordem ${ourOrder.externalOrderId}: PENDING ‚Üí FILLED`
                  );
                  syncedCount++;
                } else if (
                  orderRecord.status === 'Cancelled' ||
                  orderRecord.status === 'Rejected'
                ) {
                  await OrdersService.updateOrderStatus(
                    ourOrder.externalOrderId,
                    'CANCELLED',
                    'EXCHANGE_CANCELLED'
                  );
                  Logger.info(
                    `‚ùå [ORDERS_SYNC] Ordem ${ourOrder.externalOrderId}: PENDING ‚Üí CANCELLED`
                  );
                  syncedCount++;
                }
                // Se for 'Open' ou 'New', mant√©m PENDING (est√° correto)
              } else {
                Logger.warn(
                  `‚ö†Ô∏è [ORDERS_SYNC] Ordem ${ourOrder.externalOrderId} n√£o encontrada no hist√≥rico da corretora`
                );
              }
            } else if (orderHistory === null) {
              Logger.warn(
                `‚ö†Ô∏è [ORDERS_SYNC] Erro ao buscar hist√≥rico da ordem ${ourOrder.externalOrderId} - mantendo PENDING`
              );
            } else {
              Logger.warn(
                `‚ö†Ô∏è [ORDERS_SYNC] Hist√≥rico vazio para ordem ${ourOrder.externalOrderId}`
              );
            }
          }
        } catch (orderError) {
          Logger.warn(
            `‚ö†Ô∏è [ORDERS_SYNC] Erro ao sincronizar ordem ${ourOrder.externalOrderId}: ${orderError.message}`
          );
        }

        // Fila global agora coordena os delays - removemos delays manuais
        Logger.debug(`üîÑ [ORDERS_SYNC] Ordem processada (${i + 1}/${ourOrders.length})`);
      }

      return syncedCount + closedPositionsCount;
    } catch (error) {
      Logger.error(`‚ùå [ORDERS_SYNC] Erro na sincroniza√ß√£o do bot ${botId}:`, error.message);
      return 0;
    }
  }

  /**
   * FUN√á√ÉO REMOVIDA - estava marcando incorretamente ordens FILLED como CLOSED
   * P&L ser√° calculado apenas quando a posi√ß√£o for realmente fechada na corretora
   * @deprecated
   */
  static async detectAndCloseCompletedPositions(botId, config) {
    try {
      Logger.debug(`üîç [POSITION_CLOSE] Iniciando detec√ß√£o de posi√ß√µes fechadas para bot ${botId}`);

      const openPositionsFromExchange = await Futures.getOpenPositions(
        config.apiKey,
        config.apiSecret
      );
      if (!openPositionsFromExchange) {
        Logger.warn(
          `‚ö†Ô∏è [POSITION_CLOSE] N√£o foi poss√≠vel buscar posi√ß√µes abertas da corretora para bot ${botId}`
        );
        return 0;
      }

      Logger.debug(
        `üìä [POSITION_CLOSE] Posi√ß√µes abertas na corretora: ${openPositionsFromExchange.length}`
      );
      openPositionsFromExchange.forEach(pos => {
        Logger.debug(`üîç [EXCHANGE_POS] ${pos.symbol}: ${pos.size} @ ${pos.averageEntryPrice}`);
      });

      const exchangeSymbolsWithPositions = new Set(
        openPositionsFromExchange.map(pos => pos.symbol)
      );

      const filledOrders = await OrdersService.dbService.getAll(
        `SELECT * FROM bot_orders 
         WHERE botId = ? AND status = 'FILLED' 
         ORDER BY symbol, timestamp`,
        [botId]
      );

      Logger.debug(`üìä [POSITION_CLOSE] Ordens FILLED no banco: ${filledOrders.length}`);

      const positionGroups = new Map();
      filledOrders.forEach(order => {
        if (!positionGroups.has(order.symbol)) {
          positionGroups.set(order.symbol, []);
        }
        positionGroups.get(order.symbol).push(order);
      });

      Logger.debug(
        `üìä [POSITION_CLOSE] S√≠mbolos com ordens FILLED: ${Array.from(positionGroups.keys()).join(', ')}`
      );
      Logger.debug(
        `üìä [POSITION_CLOSE] S√≠mbolos com posi√ß√µes abertas: ${Array.from(exchangeSymbolsWithPositions).join(', ')}`
      );

      let closedCount = 0;

      for (const [symbol, orders] of positionGroups.entries()) {
        Logger.debug(`üîç [POSITION_CLOSE] Analisando ${symbol}: ${orders.length} ordens`);

        if (exchangeSymbolsWithPositions.has(symbol)) {
          Logger.debug(`‚ÑπÔ∏è [POSITION_CLOSE] ${symbol} tem posi√ß√£o aberta na corretora - pulando`);
          continue;
        }

        Logger.debug(
          `üîç [POSITION_CLOSE] ${symbol} N√ÉO tem posi√ß√£o aberta - verificando se pode fechar`
        );

        const position = OrdersService.calculatePositionPnL(orders);
        Logger.debug(
          `üìä [POSITION_CLOSE] ${symbol} - Quantidade: ${position.totalQuantity}, P&L: ${position.totalPnL}, Fechada: ${position.isClosed}`
        );

        if (position.isClosed) {
          Logger.info(
            `‚úÖ [POSITION_CLOSE] Fechando posi√ß√£o ${symbol} - P&L: ${position.totalPnL.toFixed(4)} USDC`
          );

          for (const order of orders) {
            const pnlForOrder =
              orders.length > 1
                ? (position.totalPnL * parseFloat(order.quantity)) /
                  Math.abs(position.totalQuantity)
                : position.totalPnL;

            await OrdersService.dbService.run(
              `UPDATE bot_orders 
               SET status = 'CLOSED', pnl = ?, closeTime = ?, closeType = 'POSITION_CLOSED'
               WHERE externalOrderId = ?`,
              [pnlForOrder, new Date().toISOString(), order.externalOrderId]
            );

            Logger.debug(
              `üìä [POSITION_CLOSE] Ordem ${order.externalOrderId} marcada como CLOSED com P&L: ${pnlForOrder}`
            );
          }

          closedCount++;
        } else {
          Logger.debug(
            `‚ÑπÔ∏è [POSITION_CLOSE] ${symbol} n√£o est√° fechada (quantidade: ${position.totalQuantity})`
          );
        }
      }

      Logger.info(`üìä [POSITION_CLOSE] Bot ${botId}: ${closedCount} posi√ß√µes fechadas`);
      return closedCount;
    } catch (error) {
      Logger.error(`‚ùå [POSITION_CLOSE] Erro ao detectar posi√ß√µes fechadas:`, error.message);
      return 0;
    }
  }

  static calculatePositionPnL(orders) {
    let netQuantity = 0;
    let totalCost = 0;
    let totalPnL = 0;

    orders.sort((a, b) => new Date(a.timestamp) - new Date(b.timestamp));

    Logger.debug(`üî¢ [PNL_CALC] Calculando P&L para ${orders.length} ordens:`);
    orders.forEach(order => {
      Logger.debug(`  ${order.side} ${order.quantity} @ ${order.price} (${order.timestamp})`);
    });

    for (const order of orders) {
      const quantity = parseFloat(order.quantity);
      const price = parseFloat(order.price);
      const orderValue = quantity * price;

      if (order.side === 'BUY') {
        netQuantity += quantity;
        totalCost += orderValue;
        Logger.debug(`  BUY: +${quantity}, netQty: ${netQuantity}, totalCost: ${totalCost}`);
      } else {
        const avgCostPrice = netQuantity > 0 ? totalCost / netQuantity : 0;
        const pnlFromSell = (price - avgCostPrice) * quantity;
        totalPnL += pnlFromSell;

        netQuantity -= quantity;
        if (netQuantity > 0) {
          totalCost = (totalCost / (netQuantity + quantity)) * netQuantity;
        } else {
          totalCost = 0;
        }
        Logger.debug(
          `  SELL: -${quantity}, avgCost: ${avgCostPrice}, sellPrice: ${price}, pnl: ${pnlFromSell}, netQty: ${netQuantity}`
        );
      }
    }

    const result = {
      totalQuantity: netQuantity,
      totalPnL,
      isClosed: Math.abs(netQuantity) < 0.01,
    };

    Logger.debug(
      `üî¢ [PNL_CALC] Resultado: netQty: ${result.totalQuantity}, P&L: ${result.totalPnL}, fechada: ${result.isClosed}`
    );
    return result;
  }

  static async syncPositionsFromExchangeFills(botId, config) {
    try {
      Logger.debug(
        `üìä [FILLS_SYNC] Iniciando sincroniza√ß√£o baseada em fills da corretora para bot ${botId}`
      );

      const botClientOrderId = config.botClientOrderId?.toString() || '';
      const botCreationDate = config.createdAt || new Date(Date.now() - 30 * 24 * 60 * 60 * 1000);
      const fromTimestamp = new Date(botCreationDate).getTime();

      const allFills = await History.getFillHistory(
        null,
        null,
        fromTimestamp,
        Date.now(),
        1000,
        0,
        null,
        'PERP',
        null,
        config.apiKey,
        config.apiSecret
      );

      if (!allFills || !Array.isArray(allFills)) {
        Logger.warn(`‚ö†Ô∏è [FILLS_SYNC] N√£o foi poss√≠vel buscar fills da corretora para bot ${botId}`);
        return 0;
      }

      // NOVA ABORDAGEM: Busca fills com clientId E fills de fechamento sem clientId
      const botFillsWithClientId = allFills.filter(fill => {
        const fillClientId = fill.clientId?.toString() || '';
        return fillClientId.startsWith(botClientOrderId);
      });

      // Identifica fills de fechamento potenciais (sem clientId) para posi√ß√µes abertas
      const orphanFills = await OrdersService.identifyOrphanFills(
        botId,
        allFills,
        botFillsWithClientId
      );

      const botFills = [...botFillsWithClientId, ...orphanFills];

      Logger.debug(
        `üìä [FILLS_SYNC] Encontrados ${botFillsWithClientId.length} fills com clientId + ${orphanFills.length} fills √≥rf√£os = ${botFills.length} fills totais do bot`
      );

      const symbolPositions = new Map();

      botFills.forEach(fill => {
        const symbol = fill.symbol;
        if (!symbolPositions.has(symbol)) {
          symbolPositions.set(symbol, []);
        }
        symbolPositions.get(symbol).push({
          side: fill.side === 'Bid' ? 'BUY' : 'SELL',
          quantity: parseFloat(fill.quantity),
          price: parseFloat(fill.price),
          timestamp: fill.timestamp,
          orderId: fill.orderId,
        });
      });

      let closedCount = 0;

      for (const [symbol, fills] of symbolPositions.entries()) {
        Logger.debug(`üîç [FILLS_SYNC] Analisando ${symbol} com ${fills.length} fills`);

        const position = OrdersService.calculatePositionFromFills(fills);

        if (position.isClosed) {
          Logger.debug(
            `‚úÖ [FILLS_SYNC] Posi√ß√£o ${symbol} fechada baseada em fills - P&L: ${position.totalPnL.toFixed(4)} USDC`
          );

          const ourOrders = await OrdersService.dbService.getAll(
            `SELECT * FROM bot_orders WHERE botId = ? AND symbol = ? AND status = 'FILLED'`,
            [botId, symbol]
          );

          for (const order of ourOrders) {
            const pnlForOrder =
              ourOrders.length > 1
                ? (position.totalPnL * parseFloat(order.quantity)) /
                  Math.abs(position.totalQuantityProcessed)
                : position.totalPnL;

            await OrdersService.dbService.run(
              `UPDATE bot_orders 
               SET status = 'CLOSED', pnl = ?, closeTime = ?, closeType = 'FILLS_BASED_CLOSE'
               WHERE externalOrderId = ?`,
              [pnlForOrder, new Date().toISOString(), order.externalOrderId]
            );

            Logger.debug(
              `üìä [FILLS_SYNC] Ordem ${order.externalOrderId} marcada como CLOSED com P&L: ${pnlForOrder}`
            );
          }

          closedCount++;
        } else {
          Logger.debug(
            `‚ÑπÔ∏è [FILLS_SYNC] ${symbol} ainda tem posi√ß√£o aberta (quantidade: ${position.totalQuantity})`
          );
        }
      }

      Logger.debug(
        `üìä [FILLS_SYNC] Bot ${botId}: ${closedCount} posi√ß√µes fechadas baseado em fills`
      );
      return closedCount;
    } catch (error) {
      Logger.error(`‚ùå [FILLS_SYNC] Erro na sincroniza√ß√£o baseada em fills:`, error.message);
      return 0;
    }
  }

  /**
   * Identifica fills √≥rf√£os (sem clientId) que podem pertencer √†s posi√ß√µes do bot
   * Isso acontece quando o usu√°rio move take profit na corretora, cancelando nossa ordem e criando uma nova
   * @param {number} botId - ID do bot
   * @param {Array} allFills - Todos os fills da corretora
   * @param {Array} botFillsWithClientId - Fills j√° identificados do bot (com clientId)
   * @returns {Array} Fills √≥rf√£os que podem pertencer ao bot
   */
  static async identifyOrphanFills(botId, allFills, botFillsWithClientId) {
    try {
      // 1. Busca posi√ß√µes FILLED do bot que ainda n√£o foram fechadas
      // INCLUINDO ordens com closeTime que n√£o foram marcadas como CLOSED (o problema identificado)
      const openFilledOrders = await OrdersService.dbService.getAll(
        `SELECT * FROM bot_orders 
         WHERE botId = ? AND status = 'FILLED'
         ORDER BY timestamp`,
        [botId]
      );

      if (openFilledOrders.length === 0) {
        Logger.debug(`üîç [ORPHAN_FILLS] Nenhuma ordem FILLED em aberto para bot ${botId}`);
        return [];
      }

      Logger.debug(
        `üîç [ORPHAN_FILLS] Bot ${botId} tem ${openFilledOrders.length} ordens FILLED em aberto`
      );

      // 2. Para cada posi√ß√£o aberta, busca fills de fechamento potenciais
      const orphanFills = [];
      const botFillsMap = new Map();

      // Mapeia fills do bot por s√≠mbolo
      botFillsWithClientId.forEach(fill => {
        const symbol = fill.symbol;
        if (!botFillsMap.has(symbol)) {
          botFillsMap.set(symbol, []);
        }
        botFillsMap.get(symbol).push(fill);
      });

      for (const order of openFilledOrders) {
        const { symbol, side, quantity } = order;

        // Busca fills sem clientId no mesmo s√≠mbolo, dire√ß√£o oposta
        const oppositeSide = side === 'BUY' ? 'Ask' : 'Bid'; // Formato da corretora

        const potentialCloseFills = allFills.filter(fill => {
          return (
            fill.symbol === symbol &&
            fill.side === oppositeSide &&
            (!fill.clientId || fill.clientId === '') && // Sem clientId
            new Date(fill.timestamp) > new Date(order.timestamp) && // Ap√≥s a abertura
            !botFillsWithClientId.includes(fill) // N√£o √© um fill j√° identificado do bot
          );
        });

        // Se encontrou fills de fechamento potenciais
        if (potentialCloseFills.length > 0) {
          Logger.info(
            `üîç [ORPHAN_FILLS] Encontrados ${potentialCloseFills.length} fills √≥rf√£os potenciais para ${symbol} ${side} ${quantity}`
          );

          // Calcula se esses fills podem fechar nossa posi√ß√£o
          const validCloseFills = OrdersService.validateOrphanFills(
            order,
            potentialCloseFills,
            botFillsMap.get(symbol) || []
          );

          if (validCloseFills.length > 0) {
            Logger.info(
              `‚úÖ [ORPHAN_FILLS] ${validCloseFills.length} fills √≥rf√£os validados para ${symbol}`
            );
            orphanFills.push(...validCloseFills);
          }
        }
      }

      Logger.info(
        `üìä [ORPHAN_FILLS] Total de ${orphanFills.length} fills √≥rf√£os identificados para bot ${botId}`
      );
      return orphanFills;
    } catch (error) {
      Logger.error(`‚ùå [ORPHAN_FILLS] Erro ao identificar fills √≥rf√£os:`, error.message);
      return [];
    }
  }

  /**
   * Valida se fills √≥rf√£os realmente pertencem √† posi√ß√£o do bot
   * @param {Object} order - Ordem aberta do bot
   * @param {Array} potentialFills - Fills potenciais de fechamento
   * @param {Array} existingFills - Fills j√° identificados do bot para o s√≠mbolo
   * @returns {Array} Fills validados
   */
  static validateOrphanFills(order, potentialFills, existingFills) {
    const validFills = [];
    const orderQuantity = parseFloat(order.quantity);

    Logger.debug(
      `üîç [ORPHAN_VALIDATE] Validando fills √≥rf√£os para ordem ${order.symbol} ${order.side} ${orderQuantity}`
    );

    // Para ordens FILLED simples, assume que a quantidade da ordem precisa ser fechada
    // Se n√£o h√° fills existentes do bot, toda a quantidade precisa ser fechada
    let quantityToClose = orderQuantity;

    if (existingFills.length > 0) {
      Logger.debug(
        `üîç [ORPHAN_VALIDATE] Existem ${existingFills.length} fills existentes para an√°lise`
      );
      // Calcula quantidade j√° processada nos fills existentes
      let processedQuantity = 0;
      existingFills.forEach(fill => {
        const fillSide = fill.side === 'Bid' ? 'BUY' : 'SELL';
        const quantity = parseFloat(fill.quantity);

        if (fillSide === order.side) {
          processedQuantity += quantity;
        } else {
          processedQuantity -= quantity; // J√° foi fechado parcialmente
        }
      });

      quantityToClose = Math.max(0, processedQuantity);
    }

    Logger.debug(`üîç [ORPHAN_VALIDATE] Quantidade a fechar: ${quantityToClose}`);

    // Se n√£o h√° quantidade para fechar, n√£o h√° fills √≥rf√£os v√°lidos
    if (quantityToClose <= 0.01) {
      Logger.debug(`üîç [ORPHAN_VALIDATE] Posi√ß√£o ${order.symbol} j√° totalmente fechada`);
      return [];
    }

    // Ordena fills por timestamp
    const sortedFills = potentialFills.sort(
      (a, b) => new Date(a.timestamp) - new Date(b.timestamp)
    );

    let remainingToClose = quantityToClose;

    for (const fill of sortedFills) {
      const fillQuantity = parseFloat(fill.quantity);

      Logger.debug(
        `üîç [ORPHAN_VALIDATE] Testando fill: ${fill.side} ${fillQuantity} @ ${fill.price}`
      );
      Logger.debug(
        `üîç [ORPHAN_VALIDATE] Remaining to close: ${remainingToClose}, Fill quantity: ${fillQuantity}`
      );

      // Aceita o fill se pode fechar total ou parcialmente a posi√ß√£o
      if (remainingToClose > 0.01 && fillQuantity <= remainingToClose + 0.1) {
        // Toler√¢ncia aumentada
        validFills.push({
          ...fill,
          side: fill.side === 'Bid' ? 'BUY' : 'SELL', // Normaliza formato
          quantity: fillQuantity,
          price: parseFloat(fill.price),
          isOrphan: true, // Marca como √≥rf√£o para logging
        });

        remainingToClose -= fillQuantity;
        Logger.info(
          `‚úÖ [ORPHAN_VALIDATE] Fill √≥rf√£o validado: ${fill.symbol} ${fill.side} ${fillQuantity} @ ${fill.price}`
        );

        // Se fechou completamente, para de buscar
        if (remainingToClose <= 0.01) {
          Logger.info(
            `‚úÖ [ORPHAN_VALIDATE] Posi√ß√£o ${order.symbol} totalmente fechada por fills √≥rf√£os`
          );
          break;
        }
      } else {
        Logger.debug(
          `üîç [ORPHAN_VALIDATE] Fill rejeitado: quantidade ${fillQuantity} > remaining ${remainingToClose}`
        );
      }
    }

    Logger.info(
      `üìä [ORPHAN_VALIDATE] ${validFills.length} fills √≥rf√£os validados para ${order.symbol}`
    );
    return validFills;
  }

  static calculatePositionFromFills(fills) {
    let netQuantity = 0;
    let totalCost = 0;
    let totalPnL = 0;
    let totalQuantityProcessed = 0;

    fills.sort((a, b) => new Date(a.timestamp) - new Date(b.timestamp));

    Logger.debug(`üî¢ [FILLS_CALC] Calculando posi√ß√£o para ${fills.length} fills:`);
    fills.forEach(fill => {
      const orphanLabel = fill.isOrphan ? ' [√ìRF√ÉO]' : '';
      Logger.debug(
        `  ${fill.side} ${fill.quantity} @ ${fill.price} (${fill.timestamp})${orphanLabel}`
      );
    });

    for (const fill of fills) {
      const quantity = fill.quantity;
      const price = fill.price;
      totalQuantityProcessed += quantity;

      if (fill.side === 'BUY') {
        netQuantity += quantity;
        totalCost += quantity * price;
        Logger.debug(`  BUY: +${quantity}, netQty: ${netQuantity}, totalCost: ${totalCost}`);
      } else {
        const avgCostPrice = netQuantity > 0 ? totalCost / netQuantity : 0;
        const pnlFromSell = (price - avgCostPrice) * quantity;
        totalPnL += pnlFromSell;

        netQuantity -= quantity;
        if (netQuantity > 0) {
          totalCost = (totalCost / (netQuantity + quantity)) * netQuantity;
        } else {
          totalCost = 0;
        }
        Logger.debug(
          `  SELL: -${quantity}, avgCost: ${avgCostPrice}, sellPrice: ${price}, pnl: ${pnlFromSell}, netQty: ${netQuantity}`
        );
      }
    }

    // VALIDA√á√ÉO MELHORADA: S√≥ marca como fechada se tiver quantidade zero
    const isQuantityClosed = Math.abs(netQuantity) < 0.01;

    // VALIDA√á√ÉO APRIMORADA: Aceita fechamentos com PnL pequeno (incluindo loss pequeno)
    // S√≥ rejeita se for realmente suspeito (PnL zero E pre√ßos id√™nticos)
    const isPnLExactlyZero = Math.abs(totalPnL) < 0.0001;
    const hasMultipleFills = fills.length > 1;

    // Verifica se os pre√ßos s√£o todos id√™nticos (indicando poss√≠vel erro)
    const prices = fills.map(f => f.price);
    const hasIdenticalPrices =
      prices.length > 1 && Math.max(...prices) - Math.min(...prices) < 0.0001;

    const isReallySuspicious = isPnLExactlyZero && hasMultipleFills && hasIdenticalPrices;

    let isClosed = isQuantityClosed;
    if (isQuantityClosed && isReallySuspicious) {
      Logger.warn(
        `‚ö†Ô∏è [FILLS_CALC] Fill suspeito detectado: PnL=$${totalPnL.toFixed(4)}, pre√ßos id√™nticos=${hasIdenticalPrices}`
      );
      Logger.warn(
        `‚ö†Ô∏è [FILLS_CALC] Fills: ${fills.map(f => `${f.side} ${f.quantity}@${f.price}`).join(', ')}`
      );
      Logger.warn(`üö´ [FILLS_CALC] N√£o marcando como fechada - poss√≠vel erro de c√°lculo`);
      isClosed = false;
    } else if (isQuantityClosed) {
      // Log detalhado para fechamentos v√°lidos (incluindo loss pequeno)
      if (Math.abs(totalPnL) < 1) {
        Logger.debug(
          `üí∏ [FILLS_CALC] Posi√ß√£o fechada com PnL pequeno: $${totalPnL.toFixed(4)} (${totalPnL > 0 ? 'gain' : 'loss'})`
        );
      } else {
        Logger.debug(
          `üí∞ [FILLS_CALC] Posi√ß√£o fechada com PnL: $${totalPnL.toFixed(2)} (${totalPnL > 0 ? 'gain' : 'loss'})`
        );
      }
    }

    const result = {
      totalQuantity: netQuantity,
      totalPnL,
      totalQuantityProcessed,
      isClosed: isClosed,
    };

    Logger.debug(
      `üî¢ [FILLS_CALC] Resultado: netQty: ${result.totalQuantity}, P&L: ${result.totalPnL}, fechada: ${result.isClosed}, suspeito: ${isReallySuspicious}`
    );
    return result;
  }

  /**
   * Identifica se uma ordem √© condicional baseada em suas propriedades
   * @param {Object} order - Ordem a ser verificada
   * @returns {boolean} True se for ordem condicional
   */
  static isConditionalOrder(order) {
    return (
      order.triggerPrice ||
      order.stopLossTriggerPrice ||
      order.takeProfitTriggerPrice ||
      order.orderType === 'STOP_MARKET' ||
      order.orderType === 'TAKE_PROFIT_MARKET' ||
      order.orderType?.includes('TRIGGER')
    );
  }

  /**
   * M√âTODO CR√çTICO: Detecta e limpa ordens fantasma - ordens que existem no banco mas n√£o na corretora
   * @param {number} botId - ID do bot
   * @param {Object} config - Configura√ß√£o do bot com credenciais
   * @returns {Promise<number>} N√∫mero de ordens fantasma limpas
   */
  static async cleanGhostOrders(botId, config) {
    try {
      Logger.info(`üëª [GHOST_ORDERS] Iniciando limpeza de ordens fantasma para bot ${botId}`);

      if (!config?.apiKey || !config?.apiSecret) {
        Logger.warn(`‚ö†Ô∏è [GHOST_ORDERS] Credenciais n√£o dispon√≠veis para bot ${botId}`);
        return 0;
      }

      // 1. Busca ordens PENDING no nosso banco
      const pendingOrdersInDB = await OrdersService.dbService.getAll(
        `SELECT * FROM bot_orders 
         WHERE botId = ? AND status IN ('PENDING', 'OPEN') 
         AND externalOrderId IS NOT NULL
         ORDER BY timestamp DESC`,
        [botId]
      );

      if (pendingOrdersInDB.length === 0) {
        Logger.info(`‚úÖ [GHOST_ORDERS] Nenhuma ordem PENDING no banco para bot ${botId}`);
        return 0;
      }

      Logger.info(
        `üìä [GHOST_ORDERS] Encontradas ${pendingOrdersInDB.length} ordens PENDING no banco para bot ${botId}`
      );

      // 2. Busca ordens abertas REAIS na corretora (incluindo ordens condicionais)
      const { default: Order } = await import('../Backpack/Authenticated/Order.js');

      // Busca ordens regulares
      const regularOrders = await Order.getOpenOrders(
        null,
        'PERP',
        config.apiKey,
        config.apiSecret
      );

      // Busca ordens condicionais (trigger orders)
      const triggerOrders = await Order.getOpenTriggerOrders(
        null,
        'PERP',
        config.apiKey,
        config.apiSecret
      );

      if (!regularOrders && !triggerOrders) {
        Logger.warn(
          `‚ö†Ô∏è [GHOST_ORDERS] N√£o foi poss√≠vel buscar ordens da corretora para bot ${botId}`
        );
        return 0;
      }

      // Unifica todas as ordens da exchange
      const allOpenOrdersOnExchange = [...(regularOrders || []), ...(triggerOrders || [])];

      // Filtra ordens do bot espec√≠fico
      const botClientOrderId = config.botClientOrderId?.toString() || '';
      const botExchangeOrders = allOpenOrdersOnExchange.filter(order => {
        const clientId = order.clientId?.toString() || '';
        return clientId.startsWith(botClientOrderId);
      });

      Logger.info(
        `üìä [GHOST_ORDERS] Encontradas ${botExchangeOrders.length} ordens REAIS na corretora para bot ${botId} (regulares: ${regularOrders?.length || 0}, condicionais: ${triggerOrders?.length || 0})`
      );

      // 3. Cria mapa de ordens que existem na corretora
      const exchangeOrderIds = new Set();
      botExchangeOrders.forEach(order => {
        if (order.id) {
          exchangeOrderIds.add(order.id);
        }
      });

      // 4. Identifica ordens fantasma
      const ghostOrders = [];
      for (const dbOrder of pendingOrdersInDB) {
        if (!exchangeOrderIds.has(dbOrder.externalOrderId)) {
          ghostOrders.push(dbOrder);
        }
      }

      Logger.info(
        `üëª [GHOST_ORDERS] Detectadas ${ghostOrders.length} ordens fantasma para bot ${botId}`
      );

      if (ghostOrders.length === 0) {
        return 0;
      }

      // 5. Log das ordens fantasma para debug (com identifica√ß√£o de tipo)
      ghostOrders.forEach(order => {
        const orderType = OrdersService.isConditionalOrder(order) ? 'condicional' : 'padr√£o';
        Logger.warn(
          `üëª [GHOST] Bot ${botId}: ${order.symbol} ${order.side} ${order.quantity} (${order.externalOrderId}) - Tipo: ${orderType} (${order.orderType})`
        );
      });

      // 6. Para cada ordem fantasma, verifica o status real na corretora via hist√≥rico
      let cleanedCount = 0;
      const { default: History } = await import('../Backpack/Authenticated/History.js');

      for (const ghostOrder of ghostOrders) {
        try {
          Logger.debug(
            `üîç [GHOST_ORDERS] Verificando ordem fantasma ${ghostOrder.externalOrderId} via hist√≥rico`
          );

          // Busca hist√≥rico da ordem espec√≠fica
          const orderHistory = await History.getOrderHistory(
            ghostOrder.externalOrderId,
            ghostOrder.symbol,
            10,
            0,
            'PERP',
            null,
            config.apiKey,
            config.apiSecret
          );

          if (orderHistory && Array.isArray(orderHistory) && orderHistory.length > 0) {
            const orderRecord = orderHistory.find(order => order.id === ghostOrder.externalOrderId);

            if (orderRecord) {
              Logger.info(
                `üîç [GHOST_ORDERS] Status real da ordem fantasma ${ghostOrder.externalOrderId}: ${orderRecord.status}`
              );

              // Atualiza status baseado no hist√≥rico real
              let newStatus = 'PENDING';
              let closeType = 'GHOST_ORDER_SYNC';

              switch (orderRecord.status) {
                case 'Filled':
                case 'PartiallyFilled':
                  newStatus = 'FILLED';
                  closeType = 'GHOST_ORDER_FILLED';
                  break;
                case 'Cancelled':
                case 'Rejected':
                case 'Expired':
                  newStatus = 'CANCELLED';
                  closeType = 'GHOST_ORDER_CANCELLED';
                  break;
                default:
                  // Se ainda est√° Open/New no hist√≥rico, mas n√£o nas ordens abertas,
                  // provavelmente foi cancelada ou expirou muito recentemente
                  newStatus = 'CANCELLED';
                  closeType = 'GHOST_ORDER_MISSING';
                  break;
              }

              if (newStatus !== ghostOrder.status) {
                await OrdersService.updateOrderStatus(
                  ghostOrder.externalOrderId,
                  newStatus,
                  closeType
                );

                // Log aprimorado identificando tipo da ordem
                const orderType = OrdersService.isConditionalOrder(ghostOrder)
                  ? 'condicional'
                  : 'padr√£o';
                Logger.info(
                  `‚úÖ [GHOST_ORDERS] Ordem ${orderType} fantasma processada para ${ghostOrder.symbol}: ID ${ghostOrder.externalOrderId} (${ghostOrder.status} ‚Üí ${newStatus})`
                );
                cleanedCount++;
              }
            } else {
              // Ordem n√£o encontrada nem no hist√≥rico - marca como CANCELLED
              await OrdersService.updateOrderStatus(
                ghostOrder.externalOrderId,
                'CANCELLED',
                'GHOST_ORDER_NOT_FOUND'
              );

              // Log aprimorado para ordem n√£o encontrada
              const orderType = OrdersService.isConditionalOrder(ghostOrder)
                ? 'condicional'
                : 'padr√£o';
              Logger.info(
                `‚ùå [GHOST_ORDERS] Ordem ${orderType} fantasma ${ghostOrder.symbol} n√£o encontrada: ID ${ghostOrder.externalOrderId} - marcada como CANCELLED`
              );
              cleanedCount++;
            }
          } else {
            // Erro ao buscar hist√≥rico ou hist√≥rico vazio - marca como CANCELLED
            await OrdersService.updateOrderStatus(
              ghostOrder.externalOrderId,
              'CANCELLED',
              'GHOST_ORDER_NO_HISTORY'
            );
            Logger.warn(
              `‚ö†Ô∏è [GHOST_ORDERS] N√£o foi poss√≠vel obter hist√≥rico da ordem fantasma ${ghostOrder.externalOrderId} - marcando como CANCELLED`
            );
            cleanedCount++;
          }
        } catch (orderError) {
          Logger.error(
            `‚ùå [GHOST_ORDERS] Erro ao processar ordem fantasma ${ghostOrder.externalOrderId}: ${orderError.message}`
          );
        }
      }

      Logger.info(
        `üéâ [GHOST_ORDERS] Limpeza conclu√≠da para bot ${botId}: ${cleanedCount}/${ghostOrders.length} ordens fantasma processadas`
      );
      return cleanedCount;
    } catch (error) {
      Logger.error(`‚ùå [GHOST_ORDERS] Erro na limpeza de ordens fantasma: ${error.message}`);
      return 0;
    }
  }

  /**
   * M√âTODO DE CORRE√á√ÉO: Corrige ordens que t√™m closeTime mas n√£o foram marcadas como CLOSED
   * Isso pode acontecer se o sistema foi interrompido durante uma atualiza√ß√£o
   * @param {number} botId - ID do bot (opcional, se n√£o fornecido corrige todos)
   * @returns {Promise<number>} N√∫mero de ordens corrigidas
   */
  static async fixOrdersWithCloseTimeButNotClosed(botId = null) {
    try {
      Logger.debug(
        `üîß [ORDERS_FIX] Iniciando corre√ß√£o de ordens com closeTime n√£o marcadas como CLOSED${botId ? ` para bot ${botId}` : ''}`
      );

      // Busca ordens com closeTime mas status != CLOSED
      const query = botId
        ? `SELECT * FROM bot_orders WHERE botId = ? AND closeTime IS NOT NULL AND closeTime != '' AND status != 'CLOSED' ORDER BY timestamp`
        : `SELECT * FROM bot_orders WHERE closeTime IS NOT NULL AND closeTime != '' AND status != 'CLOSED' ORDER BY timestamp`;

      const params = botId ? [botId] : [];
      const problematicOrders = await OrdersService.dbService.getAll(query, params);

      if (problematicOrders.length === 0) {
        Logger.debug(`‚úÖ [ORDERS_FIX] Nenhuma ordem problem√°tica encontrada`);
        return 0;
      }

      Logger.debug(
        `üîç [ORDERS_FIX] Encontradas ${problematicOrders.length} ordens com closeTime que n√£o est√£o CLOSED:`
      );
      problematicOrders.forEach(order => {
        Logger.debug(
          `  Bot ${order.botId}: ${order.symbol} ${order.side} ${order.quantity} (${order.externalOrderId}) - Status: ${order.status}`
        );
      });

      let fixedCount = 0;

      // Para cada ordem problem√°tica, verifica se realmente deveria estar fechada
      for (const order of problematicOrders) {
        try {
          Logger.debug(
            `üîß [ORDERS_FIX] Analisando ordem ${order.externalOrderId} - ${order.symbol}`
          );

          // Se tem closeTime e n√£o √© PENDING nem CANCELLED, provavelmente deveria estar CLOSED
          if (order.status === 'FILLED') {
            Logger.info(
              `üîß [ORDERS_FIX] Corrigindo ordem FILLED com closeTime: ${order.externalOrderId}`
            );

            // Atualiza para CLOSED mantendo os dados existentes
            await OrdersService.dbService.run(
              `UPDATE bot_orders 
               SET status = 'CLOSED', 
                   closeType = COALESCE(closeType, 'SYSTEM_CORRECTION')
               WHERE externalOrderId = ?`,
              [order.externalOrderId]
            );

            Logger.info(`‚úÖ [ORDERS_FIX] Ordem ${order.externalOrderId} marcada como CLOSED`);
            fixedCount++;
          } else {
            Logger.debug(
              `‚ÑπÔ∏è [ORDERS_FIX] Ordem ${order.externalOrderId} tem status ${order.status} - n√£o corrigindo automaticamente`
            );
          }
        } catch (orderError) {
          Logger.error(
            `‚ùå [ORDERS_FIX] Erro ao corrigir ordem ${order.externalOrderId}: ${orderError.message}`
          );
        }
      }

      Logger.debug(
        `üéâ [ORDERS_FIX] Corre√ß√£o conclu√≠da: ${fixedCount}/${problematicOrders.length} ordens corrigidas`
      );
      return fixedCount;
    } catch (error) {
      Logger.error(`‚ùå [ORDERS_FIX] Erro na corre√ß√£o de ordens: ${error.message}`);
      return 0;
    }
  }

  /**
   * M√âTODO PRINCIPAL: Executa sincroniza√ß√£o completa incluindo limpeza de ordens fantasma
   * @param {number} botId - ID do bot
   * @param {Object} config - Configura√ß√£o do bot
   * @returns {Promise<Object>} Resultado da sincroniza√ß√£o completa
   */
  static async performCompleteFillsSync(botId, config) {
    try {
      Logger.info(`üöÄ [COMPLETE_SYNC] Iniciando sincroniza√ß√£o completa para bot ${botId}`);

      const results = {
        orphanFillsDetected: 0,
        positionsClosed: 0,
        ordersFixed: 0,
        ghostOrdersCleaned: 0,
        orphanTrailingStatesCleaned: 0,
        total: 0,
      };

      // 1. CR√çTICO: Limpa ordens fantasma primeiro (prioridade)
      results.ghostOrdersCleaned = await OrdersService.cleanGhostOrders(botId, config);

      // 3. Executa sincroniza√ß√£o baseada em fills (incluindo √≥rf√£os)
      results.positionsClosed = await OrdersService.syncPositionsFromExchangeFills(botId, config);

      // 4. Limpa dados √≥rf√£os da tabela trailing_state
      results.orphanTrailingStatesCleaned = await OrdersService.cleanOrphanTrailingStates(botId);

      results.total =
        results.ghostOrdersCleaned +
        results.ordersFixed +
        results.positionsClosed +
        results.orphanTrailingStatesCleaned;

      Logger.debug(`üéâ [COMPLETE_SYNC] Sincroniza√ß√£o completa conclu√≠da para bot ${botId}:`);
      Logger.debug(`   ‚Ä¢ Ordens fantasma limpas: ${results.ghostOrdersCleaned}`);
      Logger.debug(`   ‚Ä¢ Ordens corrigidas: ${results.ordersFixed}`);
      Logger.debug(`   ‚Ä¢ Posi√ß√µes fechadas: ${results.positionsClosed}`);
      Logger.debug(`   ‚Ä¢ Trailing states √≥rf√£os limpos: ${results.orphanTrailingStatesCleaned}`);
      Logger.debug(`   ‚Ä¢ Total de a√ß√µes: ${results.total}`);

      return results;
    } catch (error) {
      Logger.error(`‚ùå [COMPLETE_SYNC] Erro na sincroniza√ß√£o completa: ${error.message}`);
      return {
        orphanFillsDetected: 0,
        positionsClosed: 0,
        ordersFixed: 0,
        ghostOrdersCleaned: 0,
        orphanTrailingStatesCleaned: 0,
        total: 0,
      };
    }
  }

  /**
   * M√âTODO ESPECIFICO: Apenas limpeza de ordens fantasma (uso direto)
   * @param {number} botId - ID do bot
   * @param {Object} config - Configura√ß√£o do bot
   * @returns {Promise<Object>} Resultado da limpeza
   */
  static async performGhostOrdersCleanup(botId, config) {
    try {
      Logger.info(
        `üëª [GHOST_CLEANUP] Executando apenas limpeza de ordens fantasma para bot ${botId}`
      );

      const ghostOrdersCleaned = await OrdersService.cleanGhostOrders(botId, config);

      Logger.info(
        `üéâ [GHOST_CLEANUP] Limpeza conclu√≠da para bot ${botId}: ${ghostOrdersCleaned} ordens fantasma processadas`
      );

      return {
        ghostOrdersCleaned,
        success: true,
      };
    } catch (error) {
      Logger.error(`‚ùå [GHOST_CLEANUP] Erro na limpeza de ordens fantasma: ${error.message}`);
      return { ghostOrdersCleaned: 0, success: false, error: error.message };
    }
  }

  /**
   * Limpa dados √≥rf√£os da tabela trailing_state que n√£o t√™m ordens correspondentes
   * @param {number} botId - ID do bot
   * @returns {Promise<number>} N√∫mero de registros limpos
   */
  static async cleanOrphanTrailingStates(botId) {
    try {
      if (!OrdersService.dbService || !OrdersService.dbService.db) {
        Logger.warn(`‚ö†Ô∏è [TRAILING_CLEANUP] Database n√£o dispon√≠vel`);
        return 0;
      }

      Logger.debug(
        `üßπ [TRAILING_CLEANUP] Iniciando limpeza de trailing states √≥rf√£os para bot ${botId}`
      );

      // Busca todos os trailing states do bot
      const trailingStates = await OrdersService.dbService.getAll(
        `SELECT id, botId, symbol FROM trailing_state WHERE botId = ?`,
        [botId]
      );

      if (trailingStates.length === 0) {
        Logger.debug(`‚ÑπÔ∏è [TRAILING_CLEANUP] Nenhum trailing state encontrado para bot ${botId}`);
        return 0;
      }

      Logger.debug(
        `üîç [TRAILING_CLEANUP] Encontrados ${trailingStates.length} trailing states para bot ${botId}`
      );

      let cleanedCount = 0;

      for (const trailingState of trailingStates) {
        try {
          // Verifica se existem ordens ativas (FILLED sem closeTime) para este s√≠mbolo
          const activeOrders = await OrdersService.dbService.getAll(
            `SELECT id FROM bot_orders 
             WHERE botId = ? AND symbol = ? AND status = 'FILLED' 
             AND (closeTime IS NULL OR closeTime = '')`,
            [botId, trailingState.symbol]
          );

          // Se n√£o h√° ordens ativas para este s√≠mbolo, remove o trailing state
          if (activeOrders.length === 0) {
            await OrdersService.dbService.run(`DELETE FROM trailing_state WHERE id = ?`, [
              trailingState.id,
            ]);

            Logger.info(
              `üóëÔ∏è [TRAILING_CLEANUP] Trailing state √≥rf√£o removido: ${trailingState.symbol} (ID: ${trailingState.id})`
            );
            cleanedCount++;
          } else {
            Logger.debug(
              `‚úÖ [TRAILING_CLEANUP] Trailing state v√°lido mantido: ${trailingState.symbol} (${activeOrders.length} ordens ativas)`
            );
          }
        } catch (error) {
          Logger.error(
            `‚ùå [TRAILING_CLEANUP] Erro ao processar trailing state ${trailingState.id}: ${error.message}`
          );
        }
      }

      Logger.debug(
        `üéâ [TRAILING_CLEANUP] Limpeza conclu√≠da para bot ${botId}: ${cleanedCount} trailing states √≥rf√£os removidos`
      );
      return cleanedCount;
    } catch (error) {
      Logger.error(
        `‚ùå [TRAILING_CLEANUP] Erro na limpeza de trailing states √≥rf√£os: ${error.message}`
      );
      return 0;
    }
  }
}

export default OrdersService;
