/**
 * Classe Abstrata para todas as Exchanges.
 * Define a interface comum que a HFTStrategy espera.
 * Cada nova exchange deve estender esta classe e implementar seus m√©todos.
 */
export class BaseExchange {
  constructor(name) {
    this.name = name;
  }

  /**
   * Conecta ao WebSocket da exchange e gerencia os callbacks.
   * @param {object} callbacks - Objeto com fun√ß√µes de callback: { onOrderbookUpdate, onUserTradeUpdate }
   */
  async connectWebSocket(callbacks) {
    throw new Error('O m√©todo connectWebSocket deve ser implementado pela subclasse.');
  }

  /**
   * Assina os canais do usu√°rio.
   * @param {string[]} symbols - Lista de s√≠mbolos para assinar.
   * @param {string} apiKey - Chave da API para autentica√ß√£o.
   * @param {string} apiSecret - Secret da API para autentica√ß√£o.
   */
  async subscribeUserTrades(symbols, apiKey, apiSecret) {
    throw new Error('O m√©todo subscribeUserTrades deve ser implementado pela subclasse.');
  }

  /**
   * Assina o canal do orderbook.
   * @param {string[]} symbols - Lista de s√≠mbolos para assinar.
   */
  async subscribeOrderbook(symbols) {
    throw new Error('O m√©todo subscribeOrderbook deve ser implementado pela subclasse.');
  }

  /**
   * Obt√©m o snapshot do book de ofertas via API REST.
   * @param {string} symbol - S√≠mbolo do mercado.
   */
  async getDepth(symbol) {
    throw new Error('O m√©todo getDepth deve ser implementado pela subclasse.');
  }

  /**
   * Obt√©m o pre√ßo de mercado mais recente.
   * @param {string} symbol - S√≠mbolo do mercado.
   */
  async getMarketPrice(symbol) {
    throw new Error('O m√©todo getMarketPrice deve ser implementado pela subclasse.');
  }

  /**
   * Coloca uma ordem na exchange.
   * @param {string} symbol - S√≠mbolo do mercado.
   * @param {string} side - 'BUY' ou 'SELL'.
   * @param {number} price - Pre√ßo da ordem.
   * @param {string} quantity - Quantidade da ordem.
   * @param {string} apiKey - API Key para autentica√ß√£o.
   * @param {string} apiSecret - API Secret para autentica√ß√£o.
   * @param {object} options - Op√ß√µes adicionais (ex: clientId).
   */
  async placeOrder(symbol, side, price, quantity, apiKey, apiSecret, options = {}) {
    throw new Error('O m√©todo placeOrder deve ser implementado pela subclasse.');
  }

  /**
   * Cancela uma ordem espec√≠fica.
   * @param {string} symbol - S√≠mbolo do mercado.
   * @param {string} orderId - ID da ordem.
   * @param {string} apiKey - API Key para autentica√ß√£o.
   * @param {string} apiSecret - API Secret para autentica√ß√£o.
   */
  async cancelOrder(symbol, orderId, apiKey, apiSecret) {
    throw new Error('O m√©todo cancelOrder deve ser implementado pela subclasse.');
  }

  /**
   * Cancela todas as ordens abertas para um s√≠mbolo.
   * @param {string} symbol - S√≠mbolo do mercado.
   * @param {string} apiKey - API Key para autentica√ß√£o.
   * @param {string} apiSecret - API Secret para autentica√ß√£o.
   */
  async cancelAllOpenOrders(symbol, apiKey, apiSecret) {
    throw new Error('O m√©todo cancelAllOpenOrders deve ser implementado pela subclasse.');
  }

  // M√©todos de utilidade que podem ser gen√©ricos
  async getAccountBalance() {
    throw new Error('O m√©todo getAccountBalance deve ser implementado pela subclasse.');
  }

  /**
   * Obt√©m dados normalizados da conta para c√°lculo de quantidade
   * @param {string} apiKey - API Key para autentica√ß√£o.
   * @param {string} apiSecret - API Secret para autentica√ß√£o.
   * @returns {object} Dados normalizados: { capitalAvailable, balances }
   */
  async getAccountData(apiKey, apiSecret) {
    throw new Error('O m√©todo getAccountData deve ser implementado pela subclasse.');
  }

  /**
   * Obt√©m informa√ß√µes de formata√ß√£o espec√≠ficas do mercado/token
   * @param {string} symbol - S√≠mbolo do mercado.
   * @param {string} apiKey - API Key para autentica√ß√£o.
   * @param {string} apiSecret - API Secret para autentica√ß√£o.
   * @returns {object} Dados do mercado: { decimal_quantity, decimal_price, stepSize_quantity, tickSize }
   */
  async getMarketInfo(symbol, apiKey, apiSecret) {
    throw new Error('O m√©todo getMarketInfo deve ser implementado pela subclasse.');
  }

  async getOpenOrders(symbol) {
    throw new Error('O m√©todo getOpenOrders deve ser implementado pela subclasse.');
  }

  // ============================================
  // üîß M√âTODOS ADICIONAIS PARA MIGRA√á√ÉO COMPLETA
  // ============================================

  /**
   * Account Management Methods
   */

  /**
   * Obt√©m informa√ß√µes completas da conta
   * @param {string} apiKey - API Key para autentica√ß√£o.
   * @param {string} apiSecret - API Secret para autentica√ß√£o.
   * @returns {object} Informa√ß√µes completas da conta
   */
  async getAccount(apiKey, apiSecret) {
    throw new Error('O m√©todo getAccount deve ser implementado pela subclasse.');
  }

  /**
   * Obt√©m posi√ß√µes atuais da conta
   * @param {string} apiKey - API Key para autentica√ß√£o.
   * @param {string} apiSecret - API Secret para autentica√ß√£o.
   * @returns {Array} Lista de posi√ß√µes ativas
   */
  async getPositions(apiKey, apiSecret) {
    throw new Error('O m√©todo getPositions deve ser implementado pela subclasse.');
  }

  /**
   * Obt√©m informa√ß√µes de capital/colateral
   * @param {string} apiKey - API Key para autentica√ß√£o.
   * @param {string} apiSecret - API Secret para autentica√ß√£o.
   * @returns {object} Informa√ß√µes de capital e colateral
   */
  async getCapital(apiKey, apiSecret) {
    throw new Error('O m√©todo getCapital deve ser implementado pela subclasse.');
  }

  /**
   * Market Data Methods
   */

  /**
   * Obt√©m todos os mercados dispon√≠veis
   * @returns {Array} Lista de mercados dispon√≠veis
   */
  async getMarkets() {
    throw new Error('O m√©todo getMarkets deve ser implementado pela subclasse.');
  }

  /**
   * Obt√©m ticker para um s√≠mbolo espec√≠fico
   * @param {string} symbol - S√≠mbolo do mercado.
   * @returns {object} Dados do ticker (pre√ßo, volume, etc.)
   */
  async getTicker(symbol) {
    throw new Error('O m√©todo getTicker deve ser implementado pela subclasse.');
  }

  /**
   * Obt√©m dados de candlestick (klines)
   * @param {string} symbol - S√≠mbolo do mercado.
   * @param {string} interval - Intervalo dos candles (1m, 5m, 1h, etc.).
   * @param {number} limit - N√∫mero de candles a retornar.
   * @returns {Array} Array de dados de candlestick
   */
  async getKlines(symbol, interval, limit = 100) {
    throw new Error('O m√©todo getKlines deve ser implementado pela subclasse.');
  }

  /**
   * Obt√©m trades recentes
   * @param {string} symbol - S√≠mbolo do mercado.
   * @param {number} limit - N√∫mero de trades a retornar.
   * @returns {Array} Lista de trades recentes
   */
  async getTrades(symbol, limit = 100) {
    throw new Error('O m√©todo getTrades deve ser implementado pela subclasse.');
  }

  /**
   * Order Management Methods
   */

  /**
   * Obt√©m hist√≥rico de ordens
   * @param {string} symbol - S√≠mbolo do mercado.
   * @param {string} apiKey - API Key para autentica√ß√£o.
   * @param {string} apiSecret - API Secret para autentica√ß√£o.
   * @param {object} options - Op√ß√µes adicionais (limit, startTime, endTime).
   * @returns {Array} Hist√≥rico de ordens
   */
  async getOrderHistory(symbol, apiKey, apiSecret, options = {}) {
    throw new Error('O m√©todo getOrderHistory deve ser implementado pela subclasse.');
  }

  /**
   * Obt√©m status de uma ordem espec√≠fica
   * @param {string} symbol - S√≠mbolo do mercado.
   * @param {string} orderId - ID da ordem.
   * @param {string} apiKey - API Key para autentica√ß√£o.
   * @param {string} apiSecret - API Secret para autentica√ß√£o.
   * @returns {object} Status da ordem
   */
  async getOrderStatus(symbol, orderId, apiKey, apiSecret) {
    throw new Error('O m√©todo getOrderStatus deve ser implementado pela subclasse.');
  }

  /**
   * Modifica uma ordem existente
   * @param {string} symbol - S√≠mbolo do mercado.
   * @param {string} orderId - ID da ordem.
   * @param {object} modifications - Modifica√ß√µes a aplicar (price, quantity, etc.).
   * @param {string} apiKey - API Key para autentica√ß√£o.
   * @param {string} apiSecret - API Secret para autentica√ß√£o.
   * @returns {object} Ordem modificada
   */
  async modifyOrder(symbol, orderId, modifications, apiKey, apiSecret) {
    throw new Error('O m√©todo modifyOrder deve ser implementado pela subclasse.');
  }

  /**
   * Futures Specific Methods
   */

  /**
   * Obt√©m posi√ß√µes de futuros
   * @param {string} apiKey - API Key para autentica√ß√£o.
   * @param {string} apiSecret - API Secret para autentica√ß√£o.
   * @returns {Array} Lista de posi√ß√µes de futuros
   */
  async getFuturesPositions(apiKey, apiSecret) {
    throw new Error('O m√©todo getFuturesPositions deve ser implementado pela subclasse.');
  }

  /**
   * Obt√©m balan√ßo de futuros
   * @param {string} apiKey - API Key para autentica√ß√£o.
   * @param {string} apiSecret - API Secret para autentica√ß√£o.
   * @returns {object} Balan√ßo de futuros
   */
  async getFuturesBalance(apiKey, apiSecret) {
    throw new Error('O m√©todo getFuturesBalance deve ser implementado pela subclasse.');
  }

  /**
   * Altera alavancagem de uma posi√ß√£o
   * @param {string} symbol - S√≠mbolo do mercado.
   * @param {number} leverage - Nova alavancagem.
   * @param {string} apiKey - API Key para autentica√ß√£o.
   * @param {string} apiSecret - API Secret para autentica√ß√£o.
   * @returns {object} Resultado da altera√ß√£o
   */
  async changeLeverage(symbol, leverage, apiKey, apiSecret) {
    throw new Error('O m√©todo changeLeverage deve ser implementado pela subclasse.');
  }

  /**
   * Utility Methods
   */

  /**
   * Obt√©m ordens abertas para um s√≠mbolo espec√≠fico
   * @param {string} symbol - S√≠mbolo do mercado.
   * @param {string} apiKey - API Key para autentica√ß√£o.
   * @param {string} apiSecret - API Secret para autentica√ß√£o.
   * @returns {Array} Lista de ordens abertas
   */
  async getOpenOrdersForSymbol(symbol, apiKey, apiSecret) {
    throw new Error('O m√©todo getOpenOrdersForSymbol deve ser implementado pela subclasse.');
  }

  /**
   * Verifica se uma ordem foi executada
   * @param {string} symbol - S√≠mbolo do mercado.
   * @param {string} orderId - ID da ordem.
   * @param {string} apiKey - API Key para autentica√ß√£o.
   * @param {string} apiSecret - API Secret para autentica√ß√£o.
   * @returns {boolean} True se a ordem foi executada
   */
  async isOrderFilled(symbol, orderId, apiKey, apiSecret) {
    const orderStatus = await this.getOrderStatus(symbol, orderId, apiKey, apiSecret);
    return orderStatus && (orderStatus.status === 'FILLED' || orderStatus.status === 'PARTIALLY_FILLED');
  }
}

export default BaseExchange;
