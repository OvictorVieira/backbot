import { BaseStopLoss } from './BaseStopLoss.js';
import TrailingStop from '../../TrailingStop/TrailingStop.js';
import ColorLogger from '../../Utils/ColorLogger.js';

export class DefaultStopLoss extends BaseStopLoss {
  constructor(config = null) {
    super();
    this.config = config;
  }

  // Inst√¢ncia do ColorLogger para logs coloridos
  static colorLogger = new ColorLogger('STOP', 'LOSS');

  /**
   * Fun√ß√£o de debug condicional
   * @param {string} message - Mensagem de debug
   */
  static debug(message) {
    if (process.env.LOG_TYPE === 'debug') {
      console.log(message);
    }
  }

  /**
   * Implementa√ß√£o do stop loss para estrat√©gia DEFAULT
   * @param {object} position - Dados da posi√ß√£o
   * @param {object} account - Dados da conta
   * @param {object} marketData - Dados de mercado atuais
   * @param {object} config - Configura√ß√£o do bot
   * @returns {object|null} - Objeto com decis√£o de fechamento ou null se n√£o deve fechar
   */
  shouldClosePosition(position, account, marketData, config = null) {
    try {
      // Usa config.enableTrailingStop se dispon√≠vel, sen√£o assume false
      const enableTrailingStop = this.config?.enableTrailingStop === true;

      if (enableTrailingStop) {
        return null;
      }

      // Valida√ß√£o inicial dos dados
      if (!this.validateData(position, account)) {
        console.error(`‚ùå [STOP_LOSS_DEBUG] ${position.symbol}: Dados inv√°lidos - position: ${!!position}, account: ${!!account}, symbol: ${position?.symbol}, netQuantity: ${position?.netQuantity}`);
        return null;
      }

      // Configura√ß√µes do stop loss - usar configura√ß√µes do bot ou fallback para vari√°vel de ambiente
      const MAX_NEGATIVE_PNL_STOP_PCT = Number(this.config?.maxNegativePnlStopPct || -10);

      const ENABLE_TP_VALIDATION = this.config?.enableTpValidation === 'true';
      
      // Verifica se os valores s√£o v√°lidos
      if (isNaN(MAX_NEGATIVE_PNL_STOP_PCT)) {
        console.error(`‚ùå [STOP_LOSS_ERROR] Valor inv√°lido detectado:`);
        console.error(`   MAX_NEGATIVE_PNL_STOP_PCT: ${MAX_NEGATIVE_PNL_STOP_PCT} (isNaN: ${isNaN(MAX_NEGATIVE_PNL_STOP_PCT)})`);
        return null;
      }
      
      // Verifica se os valores s√£o n√∫meros finitos
      if (!isFinite(MAX_NEGATIVE_PNL_STOP_PCT)) {
        console.error(`‚ùå [STOP_LOSS_ERROR] Valor n√£o finito detectado:`);
        console.error(`   MAX_NEGATIVE_PNL_STOP_PCT: ${MAX_NEGATIVE_PNL_STOP_PCT} (isFinite: ${isFinite(MAX_NEGATIVE_PNL_STOP_PCT)})`);
        return null;
      }

      // Calcula PnL
      const { pnl, pnlPct } = TrailingStop.calculatePnL(position, account);
      
      // Verifica se o PnL √© v√°lido
      if (isNaN(pnl) || isNaN(pnlPct)) {
        console.error(`‚ùå [STOP_LOSS_ERROR] PnL inv√°lido detectado:`);
        console.error(`   pnl: ${pnl} (isNaN: ${isNaN(pnl)})`);
        console.error(`   pnlPct: ${pnlPct} (isNaN: ${isNaN(pnlPct)})`);
        return null;
      }

      // Verifica se o PnL est√° abaixo do limite negativo
      // Para valores negativos: -10% <= -4% = true (deve fechar)
      const shouldCloseByPercentage = pnlPct <= MAX_NEGATIVE_PNL_STOP_PCT;
      
      if (shouldCloseByPercentage) {
        console.log(`üö® [STOP_LOSS] ${position.symbol}: Fechando por stop loss em %`);
        console.log(`   ‚Ä¢ PnL atual: ${pnlPct.toFixed(2)}%`);
        console.log(`   ‚Ä¢ Limite: ${MAX_NEGATIVE_PNL_STOP_PCT}%`);
        console.log(`   ‚Ä¢ Diferen√ßa: ${(pnlPct - MAX_NEGATIVE_PNL_STOP_PCT).toFixed(2)}%`);
        return {
          shouldClose: true,
          reason: `PERCENTAGE: PnL ${pnlPct}% <= limite ${MAX_NEGATIVE_PNL_STOP_PCT}%`,
          type: 'PERCENTAGE',
          pnl,
          pnlPct
        };
      }

      // Monitoramento de take profit m√≠nimo em tempo real (se habilitada)
      if (ENABLE_TP_VALIDATION && pnl > 0 && !enableTrailingStop) {
        const takeProfitMonitoring = this.monitorTakeProfitMinimum(position, account);
        
        if (takeProfitMonitoring && takeProfitMonitoring.shouldTakePartialProfit) {
          return takeProfitMonitoring;
        }
      }

      return null;

    } catch (error) {
      console.error('DefaultStopLoss.shouldClosePosition - Error:', error);
      return null;
    }
  }

} 