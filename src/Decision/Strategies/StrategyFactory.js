import { DefaultStrategy } from './DefaultStrategy.js';
import { ProMaxStrategy } from './ProMaxStrategy.js';

export class StrategyFactory {
  /**
   * Cria uma inst√¢ncia da estrat√©gia baseada no tipo especificado
   * @param {string} strategyType - Tipo da estrat√©gia ('DEFAULT', 'PRO_MAX')
   * @returns {BaseStrategy} - Inst√¢ncia da estrat√©gia
   */
  static createStrategy(strategyType) {
    console.log(`üîç StrategyFactory: Tipo recebido: "${strategyType}"`);
    
    const strategy = strategyType?.toUpperCase() || 'DEFAULT';
    console.log(`üîç StrategyFactory: Tipo processado: "${strategy}"`);
    
    switch(strategy) {
      case 'DEFAULT':
        console.log(`‚úÖ StrategyFactory: Criando estrat√©gia DEFAULT`);
        return new DefaultStrategy();
          case 'PRO_MAX':
      console.log(`‚úÖ StrategyFactory: Criando estrat√©gia PRO_MAX`);
      return new ProMaxStrategy();
      default:
        console.log(`‚ö†Ô∏è Estrat√©gia "${strategy}" n√£o encontrada, usando DEFAULT`);
        return new DefaultStrategy();
    }
  }

  /**
   * Lista todas as estrat√©gias dispon√≠veis
   * @returns {string[]} - Array com nomes das estrat√©gias
   */
  static getAvailableStrategies() {
    return ['DEFAULT', 'PRO_MAX'];
  }

  /**
   * Valida se uma estrat√©gia √© suportada
   * @param {string} strategyType - Tipo da estrat√©gia
   * @returns {boolean} - True se a estrat√©gia √© v√°lida
   */
  static isValidStrategy(strategyType) {
    return this.getAvailableStrategies().includes(strategyType?.toUpperCase());
  }
} 