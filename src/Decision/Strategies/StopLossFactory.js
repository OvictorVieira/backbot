import Logger from '../../Utils/Logger.js';

export class StopLossFactory {
  /**
   * Cria uma inst√¢ncia do stop loss baseada na estrat√©gia
   * @param {string} strategyType - Tipo da estrat√©gia ('DEFAULT', 'PRO_MAX')
   * @param {object} config - Configura√ß√µes do bot (opcional)
   * @returns {BaseStopLoss} - Inst√¢ncia do stop loss
   */
  static async createStopLoss(strategyType, config = null) {
    const strategy = strategyType?.toUpperCase() || 'DEFAULT';

    switch (strategy) {
      case 'DEFAULT':
        const { DefaultStopLoss } = await import('./DefaultStopLoss.js');
        return new DefaultStopLoss(config);
      case 'PRO_MAX':
        const { ProMaxStopLoss } = await import('./ProMaxStopLoss.js');
        return new ProMaxStopLoss(config);
      default:
        if (strategy === 'ALPHA_FLOW') {
          Logger.debug(`üß† ALPHAFLOW: Stop loss calculado internamente (-10% do pre√ßo de entrada)`);
        } else {
          Logger.warn(`‚ö†Ô∏è Stop loss para estrat√©gia "${strategy}" n√£o encontrado, usando DEFAULT`);
        }
        const { DefaultStopLoss: DefaultStopLossDefault } = await import('./DefaultStopLoss.js');
        return new DefaultStopLossDefault(config);
    }
  }

  /**
   * Lista todos os stop losses dispon√≠veis
   * @returns {string[]} - Array com nomes dos stop losses
   */
  static getAvailableStopLosses() {
    return ['DEFAULT', 'PRO_MAX'];
  }

  /**
   * Valida se um stop loss √© suportado
   * @param {string} strategyType - Tipo da estrat√©gia
   * @returns {boolean} - True se o stop loss √© v√°lido
   */
  static isValidStopLoss(strategyType) {
    return this.getAvailableStopLosses().includes(strategyType?.toUpperCase());
  }
}
