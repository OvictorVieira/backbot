// üîß MIGRA√á√ÉO PARA EXCHANGE FACTORY
import ExchangeManager from '../Exchange/ExchangeManager.js';
import AccountController from './AccountController.js';
import Utils, { validateLeverageForSymbol } from '../Utils/Utils.js';
import TrailingStop from '../TrailingStop/TrailingStop.js';
import ConfigManagerSQLite from '../Config/ConfigManagerSQLite.js';
import BotOrdersManager from '../Config/BotOrdersManager.js';
import Logger from '../Utils/Logger.js';
import Semaphore from '../Utils/Semaphore.js';
import { calculateIndicators } from '../Decision/Indicators.js';
import { ProMaxStrategy } from '../Decision/Strategies/ProMaxStrategy.js';
import OrdersService from '../Services/OrdersService.js';
import RiskManager from '../Risk/RiskManager.js';
import PositionUtils from '../Utils/PositionUtils.js';
import CacheInvalidator from '../Utils/CacheInvalidator.js';
import StopLossUtilsModule from '../Utils/PositionUtils.js';
import QuantityCalculator from '../Utils/QuantityCalculator.js';
import OrderBookAnalyzer from '../Utils/OrderBookAnalyzer.js';
import LimitOrderValidator from '../Utils/LimitOrderValidator.js';

class OrderController {
  // Inst√¢ncia centralizada do OrdersService
  static ordersService = new OrdersService();

  // Armazena ordens de entrada pendentes para monitoramento POR BOT (apenas estrat√©gia PRO_MAX)
  static pendingEntryOrdersByBot = {};

  // Contador de tentativas de stop loss por s√≠mbolo
  static stopLossAttempts = null;

  // Cache de posi√ß√µes que j√° foram validadas para stop loss
  static validatedStopLossPositions = new Set();

  // Lock para cria√ß√£o de stop loss (evita m√∫ltiplas cria√ß√µes simult√¢neas)
  static stopLossCreationInProgress = new Set(); // Armazena os s√≠mbolos que est√£o com uma cria√ß√£o de SL em andamento

  // Lock para cria√ß√£o de take profit (evita m√∫ltiplas cria√ß√µes simult√¢neas)
  static takeProfitCreationInProgress = new Set(); // Armazena os s√≠mbolos que est√£o com uma cria√ß√£o de TP em andamento

  // Cache de verifica√ß√£o de stop loss para evitar m√∫ltiplas chamadas desnecess√°rias
  static stopLossCheckCache = new Map(); // { symbol: { lastCheck: timestamp, hasStopLoss: boolean } }
  static stopLossCheckCacheTimeout = 30000; // 30 segundos de cache

  // Cache de verifica√ß√£o de take profit para evitar m√∫ltiplas chamadas desnecess√°rias
  static takeProfitCheckCache = new Map(); // { symbol: { lastCheck: timestamp, hasTakeProfit: boolean } }
  static takeProfitCheckCacheTimeout = 30000; // 30 segundos de cache
  static marketInfo;

  // Sistema de rastreamento de timeouts ativos para cancelamento adequado
  static activeTimeouts = new Map(); // { timeoutId: { symbol, description, timestamp } }

  // üîß Exchange Manager para migra√ß√£o gradual
  static exchangeManagerCache = new Map(); // Cache de ExchangeManager por config

  /**
   * üîß MIGRA√á√ÉO: Obt√©m ExchangeManager configurado para uma config espec√≠fica
   * @param {object} config - Configura√ß√£o do bot
   * @returns {ExchangeManager} - Inst√¢ncia configurada do ExchangeManager
   */
  static getExchangeManager(config) {
    const exchangeName = config?.exchangeName || config?.exchange || 'backpack';
    const cacheKey = `${exchangeName}_${config?.apiKey || 'default'}`;

    if (!OrderController.exchangeManagerCache.has(cacheKey)) {
      const exchangeManager = ExchangeManager.createFromConfig(config);
      OrderController.exchangeManagerCache.set(cacheKey, exchangeManager);
      Logger.debug(`üîÑ [OrderController] ExchangeManager criado para ${exchangeName}`);
    }

    return OrderController.exchangeManagerCache.get(cacheKey);
  }

  /**
   * Cria um timeout rastreado que pode ser cancelado
   * @param {Function} callback - Fun√ß√£o a ser executada
   * @param {number} delay - Delay em milliseconds
   * @param {string} symbol - S√≠mbolo relacionado
   * @param {string} description - Descri√ß√£o do timeout
   * @returns {NodeJS.Timeout} - ID do timeout
   */
  static createTrackedTimeout(callback, delay, symbol, description = 'Unknown') {
    const timeoutId = setTimeout(() => {
      // Remove do rastreamento quando executar
      OrderController.activeTimeouts.delete(timeoutId);
      callback();
    }, delay);

    // Adiciona ao rastreamento
    OrderController.activeTimeouts.set(timeoutId, {
      symbol,
      description,
      timestamp: Date.now(),
      delay,
    });

    Logger.debug(`‚è±Ô∏è [TIMEOUT_TRACKER] Criado timeout para ${symbol}: ${description} (${delay}ms)`);
    return timeoutId;
  }

  /**
   * Cancela todos os timeouts ativos
   */
  static cancelAllActiveTimeouts() {
    const count = OrderController.activeTimeouts.size;
    if (count > 0) {
      Logger.info(`üö´ [TIMEOUT_TRACKER] Cancelando ${count} timeouts ativos...`);

      for (const [timeoutId, info] of OrderController.activeTimeouts.entries()) {
        clearTimeout(timeoutId);
        Logger.debug(`üö´ [TIMEOUT_TRACKER] Cancelado: ${info.symbol} - ${info.description}`);
      }

      OrderController.activeTimeouts.clear();
      Logger.info(`‚úÖ [TIMEOUT_TRACKER] Todos os timeouts foram cancelados`);
    }
  }

  /**
   * Cancela timeouts espec√≠ficos de um s√≠mbolo
   * @param {string} symbol - S√≠mbolo para cancelar timeouts
   */
  static cancelTimeoutsForSymbol(symbol) {
    const timeoutsToCancel = [];

    for (const [timeoutId, info] of OrderController.activeTimeouts.entries()) {
      if (info.symbol === symbol) {
        timeoutsToCancel.push(timeoutId);
      }
    }

    if (timeoutsToCancel.length > 0) {
      Logger.info(
        `üö´ [TIMEOUT_TRACKER] Cancelando ${timeoutsToCancel.length} timeouts para ${symbol}`
      );

      for (const timeoutId of timeoutsToCancel) {
        const info = OrderController.activeTimeouts.get(timeoutId);
        clearTimeout(timeoutId);
        OrderController.activeTimeouts.delete(timeoutId);
        Logger.debug(`üö´ [TIMEOUT_TRACKER] Cancelado: ${symbol} - ${info.description}`);
      }
    }
  }

  /**
   * Formata pre√ßo de forma segura, limitando a 6 casas decimais para evitar erro "Price decimal too long"
   * @param {number} value - Valor a ser formatado
   * @param {number} decimal_price - N√∫mero de casas decimais desejado
   * @param {number} tickSize - Tamanho do tick para valida√ß√£o
   * @returns {string} - Pre√ßo formatado como string
   */
  static formatPriceSafely(value, decimal_price, tickSize = null) {
    // Limita decimal_price a 6 casas decimais para evitar erro da API
    const safeDecimalPrice = Math.min(decimal_price, 6);
    let formattedPrice = parseFloat(value).toFixed(safeDecimalPrice);

    // Se temos tickSize, valida se o pre√ßo √© m√∫ltiplo do tickSize
    if (tickSize && tickSize > 0) {
      const price = parseFloat(formattedPrice);
      const remainder = price % tickSize;

      // Se n√£o √© m√∫ltiplo exato, ajusta para o m√∫ltiplo mais pr√≥ximo
      if (remainder !== 0) {
        const adjustedPrice = Math.round(price / tickSize) * tickSize;
        formattedPrice = adjustedPrice.toFixed(safeDecimalPrice);
        Logger.warn(
          `‚ö†Ô∏è [PRICE_ADJUST] Pre√ßo ${price} n√£o √© m√∫ltiplo de ${tickSize}, ajustado para ${adjustedPrice}`
        );
      }
    }

    return formattedPrice.toString();
  }

  /**
   * Gera um ID √∫nico de ordem para um bot
   * @param {object} config - Configura√ß√£o do bot
   * @returns {number} ID √∫nico da ordem como Int (ex: 1548001)
   */
  static async generateUniqueOrderId(config) {
    try {
      // Se temos o config, usamos diretamente o botClientOrderId
      if (config && config.botClientOrderId) {
        const orderId = await ConfigManagerSQLite.getNextOrderId(config.id);
        Logger.debug(
          `üÜî [ORDER_ID] Gerado ID √∫nico usando config: ${orderId} (Bot ID: ${config.id}, botClientOrderId: ${config.botClientOrderId})`
        );
        // Converte para n√∫mero inteiro para compatibilidade com a API da Backpack
        // Garante que orderId seja uma string antes de usar replace()
        const orderIdStr = String(orderId);
        const numericId = parseInt(orderIdStr.replace(/_/g, ''));
        Logger.debug(`üÜî [ORDER_ID] ID convertido para n√∫mero: ${numericId}`);
        return numericId;
      }

      // Fallback: tenta obter o bot por nome se config n√£o for null
      if (config && config.id) {
        const botConfig = await ConfigManagerSQLite.getBotConfigByBotName(config.id);
        if (botConfig && botConfig.id) {
          const orderId = await ConfigManagerSQLite.getNextOrderId(botConfig.id);
          Logger.debug(
            `üÜî [ORDER_ID] Gerado ID √∫nico por nome: ${orderId} (Bot ID: ${botConfig.id})`
          );
          const orderIdStr = String(orderId);
          const numericId = parseInt(orderIdStr.replace(/_/g, ''));
          Logger.debug(`üÜî [ORDER_ID] ID convertido para n√∫mero: ${numericId}`);
          return numericId;
        }
      }

      // Se n√£o conseguiu gerar ID √∫nico, ERRO - n√£o deve gerar aleat√≥rio
      throw new Error(
        `N√£o foi poss√≠vel gerar ID √∫nico. Config ou botClientOrderId n√£o encontrado.`
      );
    } catch (error) {
      Logger.error(`‚ùå [ORDER_ID] Erro ao gerar ID √∫nico:`, error.message);
      // Em vez de parar o bot, gera um ID de emerg√™ncia baseado no timestamp
      const emergencyId = Math.floor(Date.now() / 1000) % 1000000;
      Logger.warn(`‚ö†Ô∏è [ORDER_ID] Usando ID de emerg√™ncia: ${emergencyId}`);
      return emergencyId;
    }
  }

  /**
   * Gera ID √∫nico para ordens de take profit
   */
  static async generateTakeProfitOrderId(config, targetIndex = 0) {
    try {
      const baseId = await this.generateUniqueOrderId(config);
      // Adiciona sufixo para identificar que √© take profit
      return parseInt(`${baseId}${targetIndex + 1}`);
    } catch (error) {
      Logger.error(`‚ùå [ORDER_ID] Erro ao gerar ID para take profit:`, error.message);
      // Em vez de parar o bot, gera um ID de emerg√™ncia
      const emergencyId = (Math.floor(Date.now() / 1000) % 1000000) + (targetIndex + 1);
      Logger.warn(`‚ö†Ô∏è [ORDER_ID] Usando ID de emerg√™ncia para take profit: ${emergencyId}`);
      return emergencyId;
    }
  }

  /**
   * Gera ID √∫nico para ordens de stop loss
   */
  static async generateStopLossOrderId(config) {
    try {
      const baseId = await this.generateUniqueOrderId(config);
      return parseInt(`${baseId}999`);
    } catch (error) {
      Logger.error(`‚ùå [ORDER_ID] Erro ao gerar ID para stop loss:`, error.message);
      const emergencyId = (Math.floor(Date.now() / 1000) % 1000000) + 999;
      Logger.warn(`‚ö†Ô∏è [ORDER_ID] Usando ID de emerg√™ncia para stop loss: ${emergencyId}`);
      return emergencyId;
    }
  }

  /**
   * Gera ID √∫nico para ordens de failsafe
   */
  static async generateFailsafeOrderId(config, type = 'stop') {
    try {
      const baseId = await this.generateUniqueOrderId(config);
      // Adiciona sufixo para identificar que √© failsafe
      const suffix = type === 'stop' ? '1001' : '1002';
      return parseInt(`${baseId}${suffix}`);
    } catch (error) {
      Logger.error(`‚ùå [ORDER_ID] Erro ao gerar ID para failsafe:`, error.message);
      // Em vez de parar o bot, gera um ID de emerg√™ncia
      const emergencyId =
        (Math.floor(Date.now() / 1000) % 1000000) + (type === 'stop' ? 1001 : 1002);
      Logger.warn(`‚ö†Ô∏è [ORDER_ID] Usando ID de emerg√™ncia para failsafe: ${emergencyId}`);
      return emergencyId;
    }
  }

  /**
   * Recupera todas as ordens de um bot espec√≠fico por ID
   * @param {number} botId - ID do bot
   * @param {object} config - Configura√ß√µes do bot
   * @returns {Array} Lista de ordens do bot
   */
  static async getBotOrdersById(botId, config = null) {
    try {
      // SEMPRE usa credenciais do config - lan√ßa exce√ß√£o se n√£o dispon√≠vel
      if (!config?.apiKey || !config?.apiSecret) {
        throw new Error(
          'API_KEY e API_SECRET s√£o obrigat√≥rios - deve ser passado da config do bot'
        );
      }

      // Obt√©m todas as ordens da exchange
      Logger.debug(
        `üîç [BOT_ORDERS] Buscando todas as ordens da conta para filtrar por bot ID: ${botId}`
      );
      // üîß MIGRA√á√ÉO: Usa ExchangeManager em vez de Order direto
      const exchangeManager = OrderController.getExchangeManager(config);
      const allOrders = await exchangeManager.getOpenOrdersForSymbol(null, config.apiKey, config.apiSecret);

      if (!allOrders || allOrders.length === 0) {
        Logger.debug(`üìã [BOT_ORDERS] Nenhuma ordem encontrada na conta`);
        return [];
      }

      Logger.debug(`üìã [BOT_ORDERS] Total de ordens na conta: ${allOrders.length}`);

      // Obt√©m configura√ß√£o do bot por ID
      const botConfig = await ConfigManagerSQLite.getBotConfigById(botId);
      if (!botConfig || !botConfig.botClientOrderId) {
        Logger.warn(`‚ö†Ô∏è [BOT_ORDERS] Bot ID ${botId} n√£o encontrado ou sem botClientOrderId`);
        return [];
      }

      Logger.debug(
        `üîç [BOT_ORDERS] Filtrando ordens para bot: ${botConfig.botName} (botClientOrderId: ${botConfig.botClientOrderId})`
      );

      // Filtra ordens do bot espec√≠fico usando botClientOrderId e valida√ß√£o de tempo
      const botOrders = allOrders.filter(order => {
        // Usa a valida√ß√£o centralizada
        return OrderController.validateOrderForImport(order, botConfig);
      });

      Logger.debug(
        `üìã [BOT_ORDERS] Encontradas ${botOrders.length} ordens para bot ID ${botId} (${botConfig.botName})`
      );

      // Log detalhado das ordens encontradas
      botOrders.forEach(order => {
        Logger.debug(
          `   üìÑ [BOT_ORDERS] ${order.symbol}: ${order.orderType} ${order.side} @ ${order.price} (ID: ${order.clientId})`
        );
      });

      return botOrders;
    } catch (error) {
      Logger.error(`‚ùå [BOT_ORDERS] Erro ao recuperar ordens do bot ID ${botId}:`, error.message);
      return [];
    }
  }

  /**
   * Recupera todas as ordens de um bot espec√≠fico (m√©todo legado por nome)
   * @param {string} botName - Nome do bot
   * @param {object} config - Configura√ß√µes do bot
   * @returns {Array} Lista de ordens do bot
   */
  static async getBotOrders(botName, config = null) {
    try {
      // Busca configura√ß√£o do bot por nome
      const botConfig = await ConfigManagerSQLite.getBotConfigByBotName(botName);
      if (!botConfig) {
        Logger.warn(`‚ö†Ô∏è [BOT_ORDERS] Bot ${botName} n√£o encontrado`);
        return [];
      }

      // Usa o m√©todo por ID
      return await OrderController.getBotOrdersById(botConfig.id, config);
    } catch (error) {
      Logger.error(`‚ùå [BOT_ORDERS] Erro ao recuperar ordens de ${botName}:`, error.message);
      return [];
    }
  }

  /**
   * Recupera todas as ordens de todos os bots
   * @param {object} config - Configura√ß√µes do bot (para credenciais)
   * @returns {object} Objeto com ordens organizadas por bot
   */
  static async getAllBotsOrders(config = null) {
    try {
      // SEMPRE usa credenciais do config - lan√ßa exce√ß√£o se n√£o dispon√≠vel
      if (!config?.apiKey || !config?.apiSecret) {
        throw new Error(
          'API_KEY e API_SECRET s√£o obrigat√≥rios - deve ser passado da config do bot'
        );
      }

      // Obt√©m todas as ordens da exchange
      // üîß MIGRA√á√ÉO: Usa ExchangeManager em vez de Order direto
      const exchangeManager = OrderController.getExchangeManager(config);
      const allOrders = await exchangeManager.getOpenOrdersForSymbol(null, config.apiKey, config.apiSecret);
      if (!allOrders || allOrders.length === 0) {
        Logger.debug(`üìã [ALL_BOTS_ORDERS] Nenhuma ordem encontrada`);
        return {};
      }

      // Obt√©m apenas bots tradicionais (n√£o HFT)
      const allBots = await ConfigManagerSQLite.loadTraditionalBots();
      const botsOrders = {};

      // Para cada bot, filtra suas ordens
      for (const botConfig of allBots) {
        if (!botConfig.botClientOrderId) continue;

        const botOrders = allOrders.filter(order => {
          if (!order.clientId) return false;

          const clientIdStr = order.clientId.toString();
          const botClientOrderIdStr = botConfig.botClientOrderId.toString();

          const isBotOrder = clientIdStr.startsWith(botClientOrderIdStr);

          if (!isBotOrder) return false;

          // Usa a valida√ß√£o centralizada
          return OrderController.validateOrderForImport(order, botConfig);
        });

        if (botOrders.length > 0) {
          botsOrders[botConfig.botName] = {
            botId: botConfig.id,
            strategyName: botConfig.strategyName,
            orders: botOrders,
          };
        }
      }

      Logger.debug(`üìã [ALL_BOTS_ORDERS] Resumo:`);
      Object.keys(botsOrders).forEach(botName => {
        const botData = botsOrders[botName];
        Logger.debug(`   ü§ñ ${botName} (${botData.strategyName}): ${botData.orders.length} ordens`);
      });

      return botsOrders;
    } catch (error) {
      Logger.error(
        `‚ùå [ALL_BOTS_ORDERS] Erro ao recuperar ordens de todos os bots:`,
        error.message
      );
      return {};
    }
  }

  /**
   * Valida se uma ordem deve ser importada baseado no tempo de cria√ß√£o do bot
   * @param {Object} order - Dados da ordem
   * @param {Object} botConfig - Configura√ß√£o do bot
   * @returns {boolean} True se a ordem deve ser importada
   */
  static validateOrderForImport(order, botConfig) {
    const clientIdStr = order.clientId?.toString();
    const botClientOrderIdStr = botConfig.botClientOrderId.toString();

    if (!clientIdStr?.startsWith(botClientOrderIdStr)) {
      Logger.debug(
        `   ‚ö†Ô∏è [ORDER_VALIDATION] Ordem ${order.symbol} ignorada - n√£o pertence ao bot (clientId: ${clientIdStr}, botClientOrderId: ${botClientOrderIdStr})`
      );
      return false;
    }

    // VALIDA√á√ÉO DE TEMPO: Verifica se a ordem foi criada ap√≥s a cria√ß√£o do bot
    if (botConfig.createdAt && order.createdAt) {
      const botCreatedAt = new Date(botConfig.createdAt).getTime();
      const orderTime = new Date(order.createdAt).getTime();

      if (orderTime < botCreatedAt) {
        Logger.debug(
          `   ‚è∞ [ORDER_VALIDATION] Ordem antiga ignorada: ${order.symbol} (ID: ${order.clientId}) - Ordem: ${new Date(orderTime).toISOString()}, Bot criado: ${new Date(botCreatedAt).toISOString()}`
        );
        return false;
      }

      Logger.debug(
        `   ‚úÖ [ORDER_VALIDATION] Ordem v√°lida: ${order.symbol} (ID: ${order.clientId}) - Tempo: ${new Date(orderTime).toISOString()}`
      );
    } else {
      Logger.debug(
        `   ‚úÖ [ORDER_VALIDATION] Ordem do bot encontrada (sem valida√ß√£o de tempo): ${order.symbol} (ID: ${order.clientId})`
      );
    }

    return true;
  }

  /**
   * Adiciona ordem de entrada para monitoramento (apenas estrat√©gia PRO_MAX)
   * @param {string} market - S√≠mbolo do mercado
   * @param {object} orderData - Dados da ordem (stop, isLong, etc.)
   * @param {string} botName - Nome √∫nico do bot
   */
  static addPendingEntryOrder(market, orderData, botName = 'DEFAULT') {
    if (!OrderController.pendingEntryOrdersByBot[botName]) {
      OrderController.pendingEntryOrdersByBot[botName] = {};
    }
    // Adiciona timestamp de cria√ß√£o da ordem
    const orderDataWithTimestamp = {
      ...orderData,
      createdAt: Date.now(),
    };
    OrderController.pendingEntryOrdersByBot[botName][market] = orderDataWithTimestamp;
    Logger.debug(`\n[MONITOR-${botName}] Ordem registrada para monitoramento: ${market}`);
  }

  /**
   * Remove ordem de entrada do monitoramento
   * @param {string} market - S√≠mbolo do mercado
   * @param {string} botName - Nome √∫nico do bot
   */
  static removePendingEntryOrder(market, botName = 'DEFAULT') {
    if (OrderController.pendingEntryOrdersByBot[botName]) {
      delete OrderController.pendingEntryOrdersByBot[botName][market];
    }
  }

  /**
   * Monitora ordens de entrada pendentes e cria take profits quando executadas
   * @param {string} botName - Nome √∫nico do bot para monitorar
   * @param {object} config - Configura√ß√µes espec√≠ficas do bot (apiKey, apiSecret, etc.)
   */
  static async monitorPendingEntryOrders(botName = 'DEFAULT', config = null) {
    // Executa para todas as estrat√©gias (DEFAULT e PRO_MAX)
    // A l√≥gica de timeout de ordens √© aplicada para todas as contas
    try {
      // SEMPRE usa credenciais do config - lan√ßa exce√ß√£o se n√£o dispon√≠vel
      if (!config?.apiKey || !config?.apiSecret) {
        throw new Error(
          'API_KEY e API_SECRET s√£o obrigat√≥rios - deve ser passado da config do bot'
        );
      }
      const apiKey = config.apiKey;
      const apiSecret = config.apiSecret;

      const accountOrders = OrderController.pendingEntryOrdersByBot[botName];
      if (!accountOrders) {
        // Mesmo sem ordens pendentes, verifica se h√° posi√ß√µes abertas que precisam de alvos
        await OrderController.checkForUnmonitoredPositions(botName, config);
        return;
      }

      const markets = Object.keys(accountOrders);
      if (markets.length === 0) {
        // Mesmo sem ordens pendentes, verifica se h√° posi√ß√µes abertas que precisam de alvos
        await OrderController.checkForUnmonitoredPositions(botName, config);
        return;
      }

      // Tenta obter posi√ß√µes com retry
      let positions = [];
      try {
        // üîß MIGRA√á√ÉO: Usa ExchangeManager em vez de Futures direto
        const exchangeMgr = OrderController.getExchangeManager({ apiKey, apiSecret });
        positions = (await exchangeManager.getFuturesPositions(apiKey, apiSecret)) || [];

        if (positions.length > 0) {
          // Verifica se h√° posi√ß√µes que n√£o est√£o sendo monitoradas
          const monitoredMarkets = Object.keys(accountOrders || {});
        }
      } catch (error) {
        Logger.warn(
          `‚ö†Ô∏è [MONITOR-${botName}] Falha ao obter posi√ß√µes, continuando monitoramento...`
        );
        Logger.error(`‚ùå [MONITOR-${botName}] Erro detalhado:`, error.message);
        positions = [];
      }

      for (const market of markets) {
        const orderData = accountOrders[market];
        const position = positions.find(
          p => p.symbol === market && Math.abs(Number(p.netQuantity)) > 0
        );

        if (position) {
          // Log detalhado de taxa total e PnL atual
          const Account = await AccountController.get({
            apiKey,
            apiSecret,
            strategy: config?.strategyName || 'DEFAULT',
          });

          // ‚úÖ DEFENSIVE CHECK: Se Account ou markets n√£o dispon√≠veis, pula processamento
          if (!Account) {
            Logger.debug(
              `‚ö†Ô∏è [ORDER_MONITOR] ${market}: Dados da conta n√£o dispon√≠veis - pulando processamento`
            );
            continue;
          }

          // üîß MIGRA√á√ÉO: Usa ExchangeManager para obter markets em vez de Account.markets direto
          const exchangeMgr = OrderController.getExchangeManager({ apiKey, apiSecret });
          const allMarkets = await exchangeManager.getMarkets();
          const marketInfo = allMarkets?.find(m => m.symbol === market);

          // Verifica se marketInfo existe antes de acessar a propriedade fee
          if (!marketInfo) {
            Logger.warn(
              `‚ö†Ô∏è [MONITOR-${botName}] Market info n√£o encontrada para ${market}, usando fee padr√£o`
            );
            return; // Retorna se n√£o encontrar as informa√ß√µes do mercado
          }

          const fee = marketInfo.fee || config?.fee || 0.0004;
          const entryPrice = parseFloat(
            position.avgEntryPrice || position.entryPrice || position.markPrice
          );
          const currentPrice = parseFloat(position.markPrice);
          const quantity = Math.abs(Number(position.netQuantity));
          const orderValue = entryPrice * quantity;
          const exitValue = currentPrice * quantity;
          const entryFee = orderValue * fee;
          const exitFee = exitValue * fee;
          const totalFee = entryFee + exitFee;

          // Usa a fun√ß√£o calculatePnL do TrailingStop para calcular o PnL corretamente
          const leverage = Account.leverage;
          const { pnl, pnlPct } = TrailingStop.calculatePnL(position, Account);

          const percentFee = orderValue > 0 ? (totalFee / orderValue) * 100 : 0;
          OrderController.debug(
            `üìã [MANUAL_POSITION] ${position.symbol} | Volume: $${orderValue.toFixed(2)} | Taxa estimada: $${totalFee.toFixed(6)} (‚âà ${percentFee.toFixed(2)}%) | PnL: $${pnl.toFixed(6)} (${pnlPct.toFixed(3)}%) | ‚ö†Ô∏è Par n√£o configurado`
          );
          continue; // Pula cria√ß√£o de ordens para pares n√£o autorizados
        }

        const fee = this.marketInfo.fee || config?.fee || 0.0004;
        const entryPrice = parseFloat(
          position.avgEntryPrice || position.entryPrice || position.markPrice
        );
        const currentPrice = parseFloat(position.markPrice);
        const quantity = Math.abs(Number(position.netQuantity));
        const orderValue = entryPrice * quantity;
        const exitValue = currentPrice * quantity;
        const entryFee = orderValue * fee;
        const exitFee = exitValue * fee;
        const totalFee = entryFee + exitFee;

        // Usa a fun√ß√£o calculatePnL do TrailingStop para calcular o PnL corretamente
        const leverage = Account.leverage;
        const { pnl, pnlPct } = TrailingStop.calculatePnL(position, Account);

        const percentFee = orderValue > 0 ? (totalFee / orderValue) * 100 : 0;
        OrderController.debug(
          `[MONITOR][ALL] ${position.symbol} | Volume: $${orderValue.toFixed(2)} | Taxa total estimada (entrada+sa√≠da): $${totalFee.toFixed(6)} (‚âà ${percentFee.toFixed(2)}%) | PnL atual: $${pnl.toFixed(6)} | PnL%: ${pnlPct.toFixed(3)}%`
        );
      }

      // Verifica se h√° posi√ß√µes que n√£o est√£o sendo monitoradas
      const pendingAccountOrders = OrderController.pendingEntryOrdersByBot[botName] || {};
      const monitoredMarkets = Object.keys(pendingAccountOrders);
      const unmonitoredPositions = positions.filter(pos => !monitoredMarkets.includes(pos.symbol));

      if (unmonitoredPositions.length > 0) {
        // Verifica se j√° foram criados alvos para essas posi√ß√µes (evita loop infinito)
        for (const position of unmonitoredPositions) {
          // Verifica se o par est√° autorizado antes de tentar criar ordens
          const Account = await AccountController.get({
            apiKey,
            apiSecret,
            strategy: config?.strategyName,
          });

          // Verifica se os dados da conta foram carregados com sucesso
          if (!Account) {
            Logger.warn(
              `‚ö†Ô∏è [WEBSOCKET] Dados da conta indispon√≠veis para ${position.symbol} - ignorando opera√ß√£o`
            );
            continue;
          }

          // üîß MIGRA√á√ÉO: Usa ExchangeManager para obter markets em vez de Account.markets direto
          const exchangeManager = OrderController.getExchangeManager({ symbol: position.symbol });
          const markets = await exchangeManager.getMarkets();
          const marketInfo = markets.find(m => m.symbol === position.symbol);

          if (!marketInfo) {
            OrderController.debug(
              `‚ÑπÔ∏è [MANUAL_POSITION] ${position.symbol}: Par n√£o autorizado - pulando cria√ß√£o de ordens autom√°ticas`
            );
            continue; // Pula posi√ß√µes em pares n√£o autorizados
          }

          // SEMPRE valida e cria stop loss para todas as posi√ß√µes AUTORIZADAS
          await OrderController.validateAndCreateStopLoss(position, botName, config);

          // Log de debug para monitoramento
          OrderController.debug(`üõ°Ô∏è [MONITOR] ${position.symbol}: Stop loss validado/criado`);
        }
      }
    } catch (error) {
      Logger.warn(
        `‚ö†Ô∏è [MONITOR-${botName}] Falha ao verificar posi√ß√µes n√£o monitoradas:`,
        error.message
      );
    }
  }

  /**
   * L√≥gica dedicada para tratar a cria√ß√£o dos Take Profits ap√≥s execu√ß√£o da ordem PRO_MAX
   */
  static async handlePositionOpenedForProMax(market, position, orderData, botName, config = null) {
    // S√≥ executa para estrat√©gias PRO_MAX
    if (botName !== 'PRO_MAX') {
      return;
    }
    try {
      // Busca informa√ß√µes do mercado
      // Usa credenciais do config se dispon√≠vel, sen√£o usa vari√°veis de ambiente
      const apiKey = config?.apiKey;
      const apiSecret = config?.apiSecret;

      const Account = await AccountController.get({
        apiKey,
        apiSecret,
        strategy: config?.strategyName || 'DEFAULT',
      });

      // Verifica se os dados da conta foram carregados com sucesso
      if (!Account) {
        Logger.warn(
          `‚ö†Ô∏è [${config?.botName || 'BOT'}] Dados da conta indispon√≠veis para ${market} - ignorando opera√ß√£o`
        );
        return;
      }

      // üîß MIGRA√á√ÉO: Usa ExchangeManager para obter markets em vez de Account.markets direto
      const exchangeManager = OrderController.getExchangeManager({ symbol: market });
      const markets = await exchangeManager.getMarkets();
      const marketInfo = markets.find(m => m.symbol === market);
      if (!marketInfo) {
        Logger.error(`‚ùå [PRO_MAX] Market info n√£o encontrada para ${market}`);
        return;
      }
      const decimal_quantity = marketInfo.decimal_quantity;
      const decimal_price = marketInfo.decimal_price;
      const stepSize_quantity = marketInfo.stepSize_quantity;
      const tickSize = marketInfo.tickSize;

      // Pre√ßo real de entrada
      const entryPrice = parseFloat(
        position.avgEntryPrice || position.entryPrice || position.markPrice
      );
      const isLong = parseFloat(position.netQuantity) > 0;

      // Recalcula os targets usando a estrat√©gia PRO_MAX
      // Importa a estrat√©gia para usar o c√°lculo
      const strategy = new ProMaxStrategy();
      // Para o c√°lculo, precisamos de dados de mercado (ATR, etc). Usamos o √∫ltimo candle dispon√≠vel.
      // Usa o timeframe da ordem ou fallback para configura√ß√£o
      const timeframe = orderData?.time || config?.time || '5m';
      const marketsAPI = new Markets();
      const candles = await marketsAPI.getKLines(market, timeframe, 30);
      const indicators = await calculateIndicators(candles, timeframe, market);
      const data = { ...indicators, market: marketInfo, marketPrice: entryPrice };
      const action = isLong ? 'long' : 'short';
      const stopAndTargets = strategy.calculateStopAndMultipleTargets(data, entryPrice, action);
      if (!stopAndTargets) {
        Logger.error(`‚ùå [PRO_MAX] N√£o foi poss√≠vel calcular targets para ${market}`);
        return;
      }
      const { stop, targets } = stopAndTargets;
      if (!targets || targets.length === 0) {
        Logger.error(`‚ùå [PRO_MAX] Nenhum target calculado para ${market}`);
        return;
      }

      // Quantidade total da posi√ß√£o
      const totalQuantity = Math.abs(Number(position.netQuantity));
      // N√∫mero m√°ximo de TPs poss√≠veis baseado no step size
      const maxTPs = Math.floor(totalQuantity / stepSize_quantity);
      const nTPs = Math.min(targets.length, maxTPs);

      // Limita pelo n√∫mero m√°ximo de ordens de take profit definido na configura√ß√£o
      const maxTakeProfitOrders = config?.maxTakeProfitOrders || 5;
      const finalTPs = Math.min(nTPs, maxTakeProfitOrders);

      if (finalTPs === 0) {
        Logger.error(
          `‚ùå [PRO_MAX] Posi√ß√£o muito pequena para criar qualquer TP v√°lido para ${market}`
        );
        return;
      }

      // Log explicativo quando s√£o criadas menos ordens do que o esperado
      if (finalTPs < targets.length) {
        Logger.debug(`üìä [PRO_MAX] ${market}: Ajuste de quantidade de TPs:`);
        Logger.debug(`   ‚Ä¢ Targets calculados: ${targets.length}`);
        Logger.debug(`   ‚Ä¢ Tamanho da posi√ß√£o: ${totalQuantity}`);
        Logger.debug(`   ‚Ä¢ Step size m√≠nimo: ${stepSize_quantity}`);
        Logger.debug(
          `   ‚Ä¢ M√°ximo de TPs poss√≠veis: ${maxTPs} (${totalQuantity} √∑ ${stepSize_quantity})`
        );
        Logger.debug(`   ‚Ä¢ Limite configurado: ${maxTakeProfitOrders} (MAX_TAKE_PROFIT_ORDERS)`);
        Logger.debug(`   ‚Ä¢ TPs que ser√£o criados: ${finalTPs}`);
        if (finalTPs < nTPs) {
          Logger.debug(
            `   ‚Ä¢ Motivo: Limitado pela configura√ß√£o MAX_TAKE_PROFIT_ORDERS=${maxTakeProfitOrders}`
          );
        } else {
          Logger.debug(
            `   ‚Ä¢ Motivo: Posi√ß√£o pequena n√£o permite dividir em ${targets.length} ordens de ${stepSize_quantity} cada`
          );
        }
      }

      const quantities = [];
      let remaining = totalQuantity;

      // Para posi√ß√µes pequenas, tenta criar pelo menos 3 alvos se poss√≠vel
      const minTargets = Math.min(3, targets.length);
      const actualTargets = Math.max(finalTPs, minTargets);

      for (let i = 0; i < actualTargets; i++) {
        let qty;
        if (i === actualTargets - 1) {
          qty = remaining; // tudo que sobrou
        } else {
          // Para posi√ß√µes pequenas, divide igualmente
          qty = Math.floor(totalQuantity / actualTargets / stepSize_quantity) * stepSize_quantity;
          if (qty < stepSize_quantity) {
            qty = stepSize_quantity;
            // Log quando a quantidade calculada √© menor que o step size
            if (actualTargets < targets.length) {
              Logger.debug(
                `   ‚Ä¢ TP ${i + 1}: Quantidade calculada (${(totalQuantity / actualTargets).toFixed(6)}) < step size (${stepSize_quantity}), ajustado para ${stepSize_quantity}`
              );
            }
          }
          if (qty > remaining) qty = remaining;
        }
        quantities.push(qty);
        remaining -= qty;
      }

      // Ajusta targets para o n√∫mero real de TPs
      const usedTargets = targets.slice(0, actualTargets);
      const formatPrice = value => parseFloat(value).toFixed(decimal_price).toString();
      const formatQuantity = value => {
        if (value <= 0) {
          throw new Error(`Quantidade deve ser positiva: ${value}`);
        }
        let formatted = parseFloat(value).toFixed(decimal_quantity);
        if (parseFloat(formatted) === 0 && stepSize_quantity > 0) {
          return stepSize_quantity.toString();
        }
        return formatted.toString();
      };
      Logger.info(
        `üéØ [PRO_MAX] ${market}: Criando ${actualTargets} take profits. Quantidades: [${quantities.join(', ')}] (total: ${totalQuantity})`
      );
      // Cria ordens de take profit
      for (let i = 0; i < actualTargets; i++) {
        const targetPrice = parseFloat(usedTargets[i]);

        // üéØ INTEGRA√á√ÉO ORDER BOOK: Ajusta pre√ßo TP para evitar execu√ß√£o imediata
        const adjustedTPPrice = await OrderBookAnalyzer.findClosestOrderBookPrice(
          market,
          isLong ? 'SELL' : 'BUY', // Lado da ordem de fechamento
          targetPrice,
          1.0 // Max 1% de desvio para TP
        );

        const finalTPPrice = adjustedTPPrice || targetPrice;

        if (adjustedTPPrice && adjustedTPPrice !== targetPrice) {
          Logger.debug(
            `üìä [PRO_MAX] [ORDER_BOOK] TP ${i + 1} ajustado: $${targetPrice.toFixed(6)} ‚Üí $${adjustedTPPrice.toFixed(6)}`
          );
        }

        const takeProfitTriggerPrice = finalTPPrice;
        const qty = quantities[i];
        const orderBody = {
          symbol: market,
          side: isLong ? 'Ask' : 'Bid',
          orderType: 'Limit',
          postOnly: true,
          reduceOnly: true,
          quantity: formatQuantity(qty),
          price: formatPrice(finalTPPrice), // üéØ Usa pre√ßo ajustado
          takeProfitTriggerBy: 'LastPrice',
          takeProfitTriggerPrice: formatPrice(takeProfitTriggerPrice), // üéØ Usa pre√ßo ajustado
          takeProfitLimitPrice: formatPrice(finalTPPrice), // üéØ Usa pre√ßo ajustado
          timeInForce: 'GTC',
          selfTradePrevention: 'RejectTaker',
          clientId: await OrderController.generateUniqueOrderId(config),
        };
        const result = await OrderController.ordersService.createTakeProfitOrder({
          symbol: market,
          side: orderBody.side,
          quantity: orderBody.quantity,
          takeProfitTriggerPrice: orderBody.takeProfitTriggerPrice,
          takeProfitLimitPrice: orderBody.takeProfitLimitPrice,
          clientId: orderBody.clientId,
          apiKey: config?.apiKey,
          apiSecret: config?.apiSecret,
          additionalParams: {
            takeProfitTriggerBy: orderBody.takeProfitTriggerBy,
            timeInForce: orderBody.timeInForce,
            selfTradePrevention: orderBody.selfTradePrevention,
            postOnly: orderBody.postOnly,
            reduceOnly: orderBody.reduceOnly,
          },
        });
        if (result && !result.error) {
          Logger.info(
            `‚úÖ [PRO_MAX] ${market}: Take Profit ${i + 1}/${actualTargets} criado - Pre√ßo: ${targetPrice.toFixed(6)}, Quantidade: ${qty}, OrderID: ${result.id || 'N/A'}`
          );
        } else {
          Logger.error(
            `‚ùå [PRO_MAX] ${market}: Take Profit ${i + 1}/${actualTargets} FALHOU - Pre√ßo: ${targetPrice.toFixed(6)}, Quantidade: ${qty}, Motivo: ${result?.error || 'desconhecido'}`
          );
        }
      }

      // Cria ordem de stop loss simples se necess√°rio
      if (stop !== undefined && !isNaN(parseFloat(stop))) {
        const stopBody = {
          symbol: market,
          side: isLong ? 'Ask' : 'Bid', // Para LONG, vende (Ask) para fechar. Para SHORT, compra (Bid) para fechar
          orderType: 'Limit',
          postOnly: true,
          reduceOnly: true,
          quantity: formatQuantity(totalQuantity),
          price: formatPrice(stop),
          timeInForce: 'GTC',
          clientId: await OrderController.generateUniqueOrderId(config),
        };
        const stopResult = await OrderController.ordersService.createStopLossOrder({
          symbol: market,
          side: stopBody.side,
          quantity: stopBody.quantity,
          stopLossTriggerPrice: stopBody.price,
          stopLossLimitPrice: stopBody.price,
          clientId: stopBody.clientId,
          apiKey: config?.apiKey,
          apiSecret: config?.apiSecret,
          additionalParams: {
            timeInForce: stopBody.timeInForce,
            postOnly: stopBody.postOnly,
            reduceOnly: stopBody.reduceOnly,
          },
        });

        if (stopResult && !stopResult.error) {
          Logger.info(
            `üõ°Ô∏è [PRO_MAX] ${market}: Stop loss criado - Pre√ßo: ${stop.toFixed(6)}, Quantidade: ${totalQuantity}`
          );
        } else {
          Logger.warn(
            `‚ö†Ô∏è [PRO_MAX] ${market}: N√£o foi poss√≠vel criar stop loss. Motivo: ${stopResult && stopResult.error ? stopResult.error : 'desconhecido'}`
          );
        }
      }

      // Valida se existe stop loss e cria se necess√°rio
      await OrderController.validateAndCreateStopLoss(position, botName, config);
    } catch (error) {
      Logger.error(`‚ùå [PRO_MAX] Erro ao processar posi√ß√£o aberta para ${market}:`, error.message);
    }
  }

  /**
   * For√ßa a cria√ß√£o de alvos para posi√ß√µes j√° abertas que n√£o foram monitoradas
   */
  static async forceCreateTargetsForExistingPosition(position, botName, config = null) {
    // S√≥ executa para estrat√©gias PRO_MAX
    if (botName !== 'PRO_MAX') {
      return;
    }
    try {
      // Usa credenciais do config se dispon√≠vel
      const apiKey = config?.apiKey;
      const apiSecret = config?.apiSecret;

      if (!apiKey || !apiSecret) {
        Logger.error(`‚ùå [PRO_MAX] Credenciais de API n√£o fornecidas para ${position.symbol}`);
        return;
      }

      const Account = await AccountController.get({
        apiKey,
        apiSecret,
        strategy: config?.strategyName || 'DEFAULT',
      });

      // Verifica se os dados da conta foram carregados com sucesso
      if (!Account) {
        Logger.warn(
          `‚ö†Ô∏è [PRO_MAX] Dados da conta indispon√≠veis para ${position.symbol} - ignorando opera√ß√£o`
        );
        return;
      }

      // üîß MIGRA√á√ÉO: Usa ExchangeManager para obter markets em vez de Account.markets direto
      const exchangeManager = OrderController.getExchangeManager({ symbol: position.symbol });
      const markets = await exchangeManager.getMarkets();
      const marketInfo = markets.find(m => m.symbol === position.symbol);
      if (!marketInfo) {
        Logger.error(`‚ùå [PRO_MAX] Market info n√£o encontrada para ${position.symbol}`);
        return;
      }

      const decimal_quantity = marketInfo.decimal_quantity;
      const decimal_price = marketInfo.decimal_price;
      const stepSize_quantity = marketInfo.stepSize_quantity;

      // Pre√ßo real de entrada
      const entryPrice = parseFloat(
        position.avgEntryPrice || position.entryPrice || position.markPrice
      );
      const isLong = parseFloat(position.netQuantity) > 0;

      // Recalcula os targets usando a estrat√©gia PRO_MAX
      const { ProMaxStrategy } = await import('../Decision/Strategies/ProMaxStrategy.js');
      const strategy = new ProMaxStrategy();

      // Usa timeframe da configura√ß√£o
      const timeframe = config?.time || '5m';
      const marketsAPI = new Markets();
      const candles = await marketsAPI.getKLines(position.symbol, timeframe, 30);
      const indicators = await calculateIndicators(candles, timeframe, position.symbol);
      const data = { ...indicators, market: marketInfo, marketPrice: entryPrice };
      const action = isLong ? 'long' : 'short';

      const stopAndTargets = strategy.calculateStopAndMultipleTargets(data, entryPrice, action);
      if (!stopAndTargets) {
        Logger.error(`‚ùå [PRO_MAX] N√£o foi poss√≠vel calcular targets para ${position.symbol}`);
        return;
      }

      const { stop, targets } = stopAndTargets;
      if (!targets || targets.length === 0) {
        Logger.error(`‚ùå [PRO_MAX] Nenhum target calculado para ${position.symbol}`);
        return;
      }

      // Quantidade total da posi√ß√£o
      const totalQuantity = Math.abs(Number(position.netQuantity));
      // N√∫mero m√°ximo de TPs poss√≠veis baseado no step size
      const maxTPs = Math.floor(totalQuantity / stepSize_quantity);
      const nTPs = Math.min(targets.length, maxTPs);

      // Limita pelo n√∫mero m√°ximo de ordens de take profit definido na configura√ß√£o
      const maxTakeProfitOrders = config?.maxTakeProfitOrders || 5;
      const finalTPs = Math.min(nTPs, maxTakeProfitOrders);

      if (finalTPs === 0) {
        Logger.error(
          `‚ùå [PRO_MAX] Posi√ß√£o muito pequena para criar qualquer TP v√°lido para ${position.symbol}`
        );
        return;
      }

      // Log explicativo quando s√£o criadas menos ordens do que o esperado
      if (finalTPs < targets.length) {
        Logger.debug(`üìä [PRO_MAX] ${position.symbol}: Ajuste de quantidade de TPs:`);
        Logger.debug(`   ‚Ä¢ Targets calculados: ${targets.length}`);
        Logger.debug(`   ‚Ä¢ Tamanho da posi√ß√£o: ${totalQuantity}`);
        Logger.debug(`   ‚Ä¢ Step size m√≠nimo: ${stepSize_quantity}`);
        Logger.debug(
          `   ‚Ä¢ M√°ximo de TPs poss√≠veis: ${maxTPs} (${totalQuantity} √∑ ${stepSize_quantity})`
        );
        Logger.debug(`   ‚Ä¢ Limite configurado: ${maxTakeProfitOrders} (MAX_TAKE_PROFIT_ORDERS)`);
        Logger.debug(`   ‚Ä¢ TPs que ser√£o criados: ${finalTPs}`);
        if (finalTPs < nTPs) {
          Logger.debug(
            `   ‚Ä¢ Motivo: Limitado pela configura√ß√£o MAX_TAKE_PROFIT_ORDERS=${maxTakeProfitOrders}`
          );
        } else {
          Logger.debug(
            `   ‚Ä¢ Motivo: Posi√ß√£o pequena n√£o permite dividir em ${targets.length} ordens de ${stepSize_quantity} cada`
          );
        }
      }

      const quantities = [];
      let remaining = totalQuantity;

      // Para posi√ß√µes pequenas, tenta criar pelo menos 3 alvos se poss√≠vel
      const minTargets = Math.min(3, targets.length);
      const actualTargets = Math.max(finalTPs, minTargets);

      for (let i = 0; i < actualTargets; i++) {
        let qty;
        if (i === actualTargets - 1) {
          qty = remaining; // tudo que sobrou
        } else {
          // Para posi√ß√µes pequenas, divide igualmente
          qty = Math.floor(totalQuantity / actualTargets / stepSize_quantity) * stepSize_quantity;
          if (qty < stepSize_quantity) {
            qty = stepSize_quantity;
            // Log quando a quantidade calculada √© menor que o step size
            if (actualTargets < targets.length) {
              Logger.debug(
                `   ‚Ä¢ TP ${i + 1}: Quantidade calculada (${(totalQuantity / actualTargets).toFixed(6)}) < step size (${stepSize_quantity}), ajustado para ${stepSize_quantity}`
              );
            }
          }
          if (qty > remaining) qty = remaining;
        }
        quantities.push(qty);
        remaining -= qty;
      }

      // Ajusta targets para o n√∫mero real de TPs
      const usedTargets = targets.slice(0, actualTargets);
      const formatPrice = value => parseFloat(value).toFixed(decimal_price).toString();
      const formatQuantity = value => {
        if (value <= 0) {
          throw new Error(`Quantidade deve ser positiva: ${value}`);
        }
        let formatted = parseFloat(value).toFixed(decimal_quantity);
        if (parseFloat(formatted) === 0 && stepSize_quantity > 0) {
          return stepSize_quantity.toString();
        }
        return formatted.toString();
      };

      Logger.debug(
        `\nüéØ [PRO_MAX] ${position.symbol}: Criando ${actualTargets} take profits. Quantidades: [${quantities.join(', ')}] (total: ${totalQuantity})`
      );

      // Cria ordens de take profit
      for (let i = 0; i < actualTargets; i++) {
        const targetPrice = parseFloat(usedTargets[i]);

        // üéØ INTEGRA√á√ÉO ORDER BOOK: Ajusta pre√ßo TP para evitar execu√ß√£o imediata
        const adjustedTPPrice = await OrderBookAnalyzer.findClosestOrderBookPrice(
          position.symbol,
          isLong ? 'SELL' : 'BUY', // Lado da ordem de fechamento
          targetPrice,
          1.0 // Max 1% de desvio para TP
        );

        const finalTPPrice = adjustedTPPrice || targetPrice;

        if (adjustedTPPrice && adjustedTPPrice !== targetPrice) {
          Logger.debug(
            `üìä [PRO_MAX] [ORDER_BOOK] ${position.symbol} TP ${i + 1} ajustado: $${targetPrice.toFixed(6)} ‚Üí $${adjustedTPPrice.toFixed(6)}`
          );
        }

        const takeProfitTriggerPrice = finalTPPrice;
        const qty = quantities[i];
        const orderBody = {
          symbol: position.symbol,
          side: isLong ? 'Ask' : 'Bid',
          orderType: 'Limit',
          postOnly: true,
          reduceOnly: true,
          quantity: formatQuantity(qty),
          price: formatPrice(finalTPPrice), // üéØ Usa pre√ßo ajustado
          takeProfitTriggerBy: 'LastPrice',
          takeProfitTriggerPrice: formatPrice(takeProfitTriggerPrice), // üéØ Usa pre√ßo ajustado
          takeProfitLimitPrice: formatPrice(finalTPPrice), // üéØ Usa pre√ßo ajustado
          timeInForce: 'GTC',
          selfTradePrevention: 'RejectTaker',
          clientId: await OrderController.generateUniqueOrderId(config),
        };
        // üîß MIGRA√á√ÉO: Usa ExchangeManager em vez de Order direto
        const exchangeManager = OrderController.getExchangeManager(config);
        const result = await exchangeManager.executeOrder(orderBody, config?.apiKey, config?.apiSecret);
        if (result && !result.error) {
          Logger.debug(
            `‚úÖ [PRO_MAX] ${position.symbol}: Take Profit ${i + 1}/${actualTargets} criado - Pre√ßo: ${targetPrice.toFixed(6)}, Quantidade: ${qty}, OrderID: ${result.id || 'N/A'}`
          );
        } else {
          Logger.debug(
            `‚ùå [PRO_MAX] ${position.symbol}: Take Profit ${i + 1}/${actualTargets} FALHOU - Pre√ßo: ${targetPrice.toFixed(6)}, Quantidade: ${qty}, Motivo: ${result?.error || 'desconhecido'}`
          );
        }
      }

      // Cria ordem de stop loss se necess√°rio
      if (stop !== undefined && !isNaN(parseFloat(stop))) {
        // üéØ INTEGRA√á√ÉO ORDER BOOK: Ajusta pre√ßo SL para evitar execu√ß√£o imediata
        const adjustedSLPrice = await OrderBookAnalyzer.findClosestOrderBookPrice(
          position.symbol,
          isLong ? 'SELL' : 'BUY', // Lado da ordem de fechamento
          stop,
          1.0 // Max 1% de desvio para SL
        );

        const finalSLPrice = adjustedSLPrice || stop;

        if (adjustedSLPrice && adjustedSLPrice !== stop) {
          Logger.debug(
            `üìä [PRO_MAX] [ORDER_BOOK] ${position.symbol} SL ajustado: $${stop.toFixed(6)} ‚Üí $${adjustedSLPrice.toFixed(6)}`
          );
        }

        const stopLossTriggerPrice = finalSLPrice;
        const stopBody = {
          symbol: position.symbol,
          side: isLong ? 'Ask' : 'Bid',
          orderType: 'Limit',
          postOnly: true,
          reduceOnly: true,
          quantity: formatQuantity(totalQuantity),
          price: formatPrice(finalSLPrice), // üéØ Usa pre√ßo ajustado
          stopLossTriggerBy: 'LastPrice',
          stopLossTriggerPrice: formatPrice(stopLossTriggerPrice), // üéØ Usa pre√ßo ajustado
          stopLossLimitPrice: formatPrice(finalSLPrice), // üéØ Usa pre√ßo ajustado
          timeInForce: 'GTC',
          selfTradePrevention: 'RejectTaker',
          clientId: await OrderController.generateUniqueOrderId(config),
        };
        // üîß MIGRA√á√ÉO: Usa ExchangeManager em vez de Order direto
        const exchangeManager = OrderController.getExchangeManager(config);
        const stopResult = await exchangeManager.executeOrder(stopBody, config?.apiKey, config?.apiSecret);
        if (stopResult) {
          Logger.debug(
            `üõ°Ô∏è [PRO_MAX] ${position.symbol}: Stop loss criado - Pre√ßo: ${stop.toFixed(6)}`
          );
        }
      }

      // Valida se existe stop loss e cria se necess√°rio
      await OrderController.validateAndCreateStopLoss(position, botName, config);
    } catch (error) {
      Logger.error(
        `‚ùå [PRO_MAX] Erro ao for√ßar cria√ß√£o de alvos para ${position.symbol}:`,
        error.message
      );
    }
  }

  /**
   * Valida se h√° margem suficiente para abrir uma ordem
   * @param {string} market - S√≠mbolo do mercado
   * @param {number} volume - Volume em USD
   * @param {object} accountInfo - Informa√ß√µes da conta
   * @param {string} apiKey - API Key do bot
   * @param {string} apiSecret - API Secret do bot
   * @returns {object} - { isValid: boolean, message: string }
   */
  async validateMargin(market, volume, accountInfo, apiKey = null, apiSecret = null) {
    try {
      // Obt√©m posi√ß√µes abertas para calcular margem em uso
      // üîß MIGRA√á√ÉO: Usa ExchangeManager em vez de Futures direto
      const exchangeManager = OrderController.getExchangeManager({ apiKey, apiSecret });
      const positions = await exchangeManager.getFuturesPositions(apiKey, apiSecret);
      const currentPosition = positions?.find(p => p.symbol === market);

      // Calcula margem necess√°ria para a nova ordem (volume / leverage)
      const requiredMargin = volume / accountInfo.leverage;

      // Calcula margem j√° em uso
      let usedMargin = 0;
      if (positions && positions.length > 0) {
        usedMargin = positions.reduce((total, pos) => {
          const positionValue = Math.abs(parseFloat(pos.netQuantity) * parseFloat(pos.markPrice));
          return total + positionValue;
        }, 0);
      }

      // Margem dispon√≠vel (com margem de seguran√ßa de 95%)
      const availableMargin = accountInfo.capitalAvailable * 0.95;
      const remainingMargin = availableMargin - usedMargin;

      // Verifica se h√° margem suficiente
      if (requiredMargin > remainingMargin) {
        return {
          isValid: false,
          message: `Necess√°rio: $${requiredMargin.toFixed(2)}, Dispon√≠vel: $${remainingMargin.toFixed(2)}, Em uso: $${usedMargin.toFixed(2)}`,
        };
      }

      return {
        isValid: true,
        message: `Margem OK - Dispon√≠vel: $${remainingMargin.toFixed(2)}, Necess√°rio: $${requiredMargin.toFixed(2)}`,
      };
    } catch (error) {
      Logger.error('‚ùå Erro na valida√ß√£o de margem:', error.message);
      return {
        isValid: false,
        message: `Erro ao validar margem: ${error.message}`,
      };
    }
  }

  static async cancelPendingOrders(symbol, config = null) {
    try {
      // SEMPRE usa credenciais do config - lan√ßa exce√ß√£o se n√£o dispon√≠vel
      if (!config?.apiKey || !config?.apiSecret) {
        throw new Error(
          'API_KEY e API_SECRET s√£o obrigat√≥rios - deve ser passado da config do bot'
        );
      }
      const apiKey = config.apiKey;
      const apiSecret = config.apiSecret;

      // Obt√©m ordens abertas para o s√≠mbolo
      // üîß MIGRA√á√ÉO: Usa ExchangeManager em vez de Order direto
      const exchangeManager = OrderController.getExchangeManager({ apiKey, apiSecret });
      const openOrders = await exchangeManager.getOpenOrdersForSymbol(symbol, apiKey, apiSecret);

      if (!openOrders || openOrders.length === 0) {
        return true;
      }

      // Filtra apenas ordens de entrada pendentes (n√£o ordens de stop loss ou take profit)
      const pendingEntryOrders = openOrders.filter(order => {
        // Verifica se √© uma ordem pendente
        const isPending =
          order.status === 'Pending' ||
          order.status === 'New' ||
          order.status === 'PartiallyFilled';

        // Verifica se N√ÉO √© uma ordem de stop loss ou take profit
        const isNotStopLoss = !order.stopLossTriggerPrice && !order.stopLossLimitPrice;
        const isNotTakeProfit = !order.takeProfitTriggerPrice && !order.takeProfitLimitPrice;

        // Verifica se N√ÉO √© uma ordem reduceOnly (que s√£o ordens de sa√≠da)
        const isNotReduceOnly = !order.reduceOnly;

        return isPending && isNotStopLoss && isNotTakeProfit && isNotReduceOnly;
      });

      if (pendingEntryOrders.length === 0) {
        Logger.debug(`‚ÑπÔ∏è ${symbol}: Nenhuma ordem de entrada pendente encontrada para cancelar`);
        return true;
      }

      // Log detalhado das ordens que ser√£o canceladas
      Logger.debug(
        `üîç ${symbol}: Encontradas ${pendingEntryOrders.length} ordens de entrada pendentes para cancelar:`
      );
      pendingEntryOrders.forEach((order, index) => {
        Logger.debug(
          `   ${index + 1}. ID: ${order.id}, Status: ${order.status}, ReduceOnly: ${order.reduceOnly}, StopLoss: ${!!order.stopLossTriggerPrice}, TakeProfit: ${!!order.takeProfitTriggerPrice}`
        );
      });

      // Cancela apenas as ordens de entrada pendentes espec√≠ficas
      const cancelPromises = pendingEntryOrders.map(async order => {
        // üîß MIGRA√á√ÉO: Usa ExchangeManager em vez de Order direto
        const cancelResult = await exchangeManager.cancelOpenOrder(
          symbol,
          order.id,
          order.clientId,
          apiKey,
          apiSecret
        );

        // Se cancelamento foi bem-sucedido, atualiza status no banco
        if (cancelResult && !cancelResult.error) {
          try {
            await BotOrdersManager.updateOrder(order.id, {
              status: 'CANCELLED',
              closeTime: new Date().toISOString(),
              closeType: 'PENDING_ENTRY_CLEANUP',
            });
            Logger.debug(
              `üìù [CANCEL_PENDING] ${symbol}: Status da ordem ${order.id} atualizado no banco para CANCELLED`
            );
          } catch (dbError) {
            Logger.warn(
              `‚ö†Ô∏è [CANCEL_PENDING] ${symbol}: Erro ao atualizar status da ordem ${order.id} no banco: ${dbError.message}`
            );
          }
        }

        return cancelResult;
      });

      const cancelResults = await Promise.all(cancelPromises);
      const successfulCancels = cancelResults.filter(
        result => result !== null && !result.error
      ).length;

      if (successfulCancels > 0) {
        Logger.info(
          `üóëÔ∏è ${symbol}: ${successfulCancels} ordens de entrada pendentes canceladas com sucesso`
        );
        return true;
      } else {
        Logger.error(`‚ùå ${symbol}: Falha ao cancelar ordens de entrada pendentes`);
        return false;
      }
    } catch (error) {
      Logger.error(
        `‚ùå Erro ao cancelar ordens de entrada pendentes para ${symbol}:`,
        error.message
      );
      return false;
    }
  }

  static async forceClose(position, account = null, config = null) {
    // Se account n√£o foi fornecido, obt√©m da API
    const configWithSymbol = { ...config, symbol: position.symbol };
    const Account = account || (await AccountController.get(configWithSymbol));

    // Log detalhado para debug
    // üîß MIGRA√á√ÉO: Usa ExchangeManager para obter markets em vez de Account.markets direto
    const exchangeManager = OrderController.getExchangeManager(config || {});
    const allMarkets = await exchangeManager.getMarkets();

    Logger.debug(
      `üîç [FORCE_CLOSE] Procurando market ${position.symbol} entre ${allMarkets?.length || 0} dispon√≠veis`
    );

    let market = allMarkets.find(el => {
      return el.symbol === position.symbol;
    });

    // Se n√£o encontrou, tenta uma busca case-insensitive
    if (!market) {
      const marketCaseInsensitive = allMarkets.find(el => {
        return el.symbol.toLowerCase() === position.symbol.toLowerCase();
      });
      if (marketCaseInsensitive) {
        Logger.debug(
          `‚ö†Ô∏è [FORCE_CLOSE] Market encontrado com case diferente para ${position.symbol}: ${marketCaseInsensitive.symbol}`
        );
        market = marketCaseInsensitive;
      }
    }

    // Verifica se o market foi encontrado
    if (!market) {
      Logger.error(
        `‚ùå [FORCE_CLOSE] Market n√£o encontrado para ${position.symbol}. Markets dispon√≠veis: ${allMarkets?.map(m => m.symbol).join(', ') || 'nenhum'}`
      );
      throw new Error(`Market n√£o encontrado para ${position.symbol}`);
    }

    Logger.debug(
      `‚úÖ [FORCE_CLOSE] Market encontrado para ${position.symbol}: decimal_quantity=${market.decimal_quantity}`
    );

    const isLong = parseFloat(position.netQuantity) > 0;
    const quantity = Math.abs(parseFloat(position.netQuantity));
    const decimal = market.decimal_quantity;

    const body = {
      symbol: position.symbol,
      orderType: 'Market',
      side: isLong ? 'Ask' : 'Bid', // Ask if LONG , Bid if SHORT
      reduceOnly: true,
      clientId: await OrderController.generateUniqueOrderId(config),
      quantity: String(quantity.toFixed(decimal)),
    };

    // Fecha a posi√ß√£o
    const closeResult = await OrderController.ordersService.createMarketOrder({
      symbol: position.symbol,
      side: body.side,
      quantity: body.quantity,
      clientId: body.clientId,
      apiKey: config?.apiKey,
      apiSecret: config?.apiSecret,
      additionalParams: {
        reduceOnly: body.reduceOnly,
      },
    });
    // Log detalhado da taxa de fechamento
    const fee = market.fee || config?.fee || 0.0004;
    // Tente obter o pre√ßo de execu√ß√£o real
    let closePrice = closeResult?.price || position.markPrice || position.entryPrice;
    const exitValue = parseFloat(body.quantity) * parseFloat(closePrice);
    const exitFee = exitValue * fee;
    Logger.info(
      `[LOG][FEE] Fechamento: ${position.symbol} | Valor: $${exitValue.toFixed(2)} | Fee sa√≠da: $${exitFee.toFixed(6)} (${(fee * 100).toFixed(4)}%)`
    );
    // Cancela ordens pendentes para este s√≠mbolo
    if (closeResult) {
      await this.cancelPendingOrders(position.symbol, config);
      // Cancela ordens de seguran√ßa (failsafe)
      await OrderController.cancelFailsafeOrders(position.symbol, 'DEFAULT', config);

      // Limpa o estado do trailing stop ap√≥s fechar a posi√ß√£o
      try {
        const TrailingStop = (await import('../TrailingStop/TrailingStop.js')).default;
        TrailingStop.clearTrailingState(position.symbol);
      } catch (error) {
        Logger.error(
          `[FORCE_CLOSE] Erro ao limpar trailing state para ${position.symbol}:`,
          error.message
        );
      }

      // Limpeza autom√°tica de ordens √≥rf√£s para este s√≠mbolo
      try {
        Logger.debug(
          `üßπ [FORCE_CLOSE] ${position.symbol}: Verificando ordens √≥rf√£s ap√≥s fechamento...`
        );
        const orphanResult = await OrderController.monitorAndCleanupOrphanedOrders(
          'DEFAULT',
          config
        );
        if (orphanResult.orphaned > 0) {
          Logger.info(
            `üßπ [FORCE_CLOSE] ${position.symbol}: ${orphanResult.orphaned} ordens √≥rf√£s limpas ap√≥s fechamento`
          );
        }
      } catch (error) {
        Logger.error(
          `[FORCE_CLOSE] Erro ao limpar ordens √≥rf√£s para ${position.symbol}:`,
          error.message
        );
      }
    }

    return closeResult;
  }

  /**
   * Realiza take profit parcial de uma posi√ß√£o
   * @param {object} position - Dados da posi√ß√£o
   * @param {number} partialPercentage - Porcentagem da posi√ß√£o para realizar
   * @param {object} account - Dados da conta (opcional)
   * @param {object} config - Configura√ß√£o do bot (opcional)
   * @returns {boolean} - Sucesso da opera√ß√£o
   */
  static async takePartialProfit(position, partialPercentage = 50, account = null, config = null) {
    try {
      // Se account n√£o foi fornecido, obt√©m da API
      const Account = account || (await AccountController.get(config));
      // üîß MIGRA√á√ÉO: Usa ExchangeManager para obter markets em vez de Account.markets direto
      const exchangeManager = OrderController.getExchangeManager(config || {});
      const allMarkets = await exchangeManager.getMarkets();
      const market = allMarkets.find(el => {
        return el.symbol === position.symbol;
      });

      // Verifica se o market foi encontrado
      if (!market) {
        Logger.error(
          `‚ùå [TAKE_PARTIAL] Market n√£o encontrado para ${position.symbol}. Markets dispon√≠veis: ${allMarkets?.map(m => m.symbol).join(', ') || 'nenhum'}`
        );
        throw new Error(`Market n√£o encontrado para ${position.symbol}`);
      }

      // Usa porcentagem da configura√ß√£o se n√£o fornecida
      const partialPercentageToUse = partialPercentage || config?.partialTakeProfitPercentage || 50;

      const isLong = parseFloat(position.netQuantity) > 0;
      const totalQuantity = Math.abs(parseFloat(position.netQuantity));
      const partialQuantity = (totalQuantity * partialPercentageToUse) / 100;
      const decimal = market.decimal_quantity;

      const body = {
        symbol: position.symbol,
        orderType: 'Market',
        side: isLong ? 'Ask' : 'Bid', // Ask if LONG , Bid if SHORT
        reduceOnly: true,
        clientId: await OrderController.generateUniqueOrderId(config),
        quantity: String(partialQuantity.toFixed(decimal)),
      };

      // Realiza o take profit parcial
      const partialResult = await OrderController.ordersService.createPartialCloseOrder({
        symbol: position.symbol,
        side: body.side,
        quantity: body.quantity,
        clientId: body.clientId,
        apiKey: config?.apiKey,
        apiSecret: config?.apiSecret,
        additionalParams: {
          reduceOnly: body.reduceOnly,
        },
      });

      if (partialResult) {
        // Se o take profit parcial fechou toda a posi√ß√£o, limpa o trailing state
        const remainingQuantity = totalQuantity - partialQuantity;
        if (remainingQuantity <= 0) {
          try {
            const TrailingStop = (await import('../TrailingStop/TrailingStop.js')).default;
            TrailingStop.clearTrailingState(position.symbol);
          } catch (error) {
            Logger.error(
              `[TAKE_PARTIAL] Erro ao limpar trailing state para ${position.symbol}:`,
              error.message
            );
          }
        }
        return true;
      } else {
        return false;
      }
    } catch (error) {
      Logger.error(
        `‚ùå Erro ao realizar take profit parcial para ${position.symbol}:`,
        error.message
      );
      return false;
    }
  }

  static async hasPartialTakeProfitOrder(position, config) {
    try {
      const isLong = parseFloat(position.netQuantity) > 0;

      const OrderModule = await import('../Backpack/Authenticated/Order.js');
      const openOrders = await OrderModule.default.getOpenOrders(
        position.symbol,
        'PERP',
        config?.apiKey,
        config?.apiSecret
      );

      if (!openOrders || openOrders.length === 0) {
        return false;
      }

      // Procura por ordem LIMIT reduce-only com a quantidade parcial
      const partialOrder = openOrders.find(order => {
        let isReducePrice;
        if (isLong) {
          isReducePrice =
            parseFloat(order.triggerPrice || order.price) > parseFloat(position.entryPrice);
        } else {
          isReducePrice =
            parseFloat(order.triggerPrice || order.price) < parseFloat(position.entryPrice);
        }

        return order.reduceOnly === true && isReducePrice;
      });

      return !!partialOrder;
    } catch (error) {
      Logger.error(
        `‚ùå [TP_CHECK] Erro ao verificar ordem de take profit parcial para ${symbol}:`,
        error.message
      );
      return false;
    }
  }

  /**
   * Cria ordem LIMIT de take profit parcial na corretora
   * @param {object} position - Dados da posi√ß√£o
   * @param {number} takeProfitPrice - Pre√ßo do take profit
   * @param {number} percentageToClose - Porcentagem da posi√ß√£o para fechar (ex: 50 = 50%)
   * @param {object} account - Dados da conta (opcional)
   * @param config
   * @returns {object|null} - Resultado da opera√ß√£o ou null se falhar
   */
  static async createPartialTakeProfitOrder(
    position,
    takeProfitPrice,
    percentageToClose = 50,
    account = null,
    config = null
  ) {
    try {
      // Se account n√£o foi fornecido, obt√©m da API
      const Account = account || (await AccountController.get(config));
      // üîß MIGRA√á√ÉO: Usa ExchangeManager para obter markets em vez de Account.markets direto
      const exchangeManager = OrderController.getExchangeManager(config || {});
      const allMarkets = await exchangeManager.getMarkets();

      let market = allMarkets.find(el => {
        return el.symbol === position.symbol;
      });

      // Se n√£o encontrou, tenta uma busca case-insensitive
      if (!market) {
        const marketCaseInsensitive = allMarkets.find(el => {
          return el.symbol.toLowerCase() === position.symbol.toLowerCase();
        });
        if (marketCaseInsensitive) {
          Logger.info(
            `‚ö†Ô∏è [TP_LIMIT] Market encontrado com case diferente para ${position.symbol}: ${marketCaseInsensitive.symbol}`
          );
          market = marketCaseInsensitive;
        }
      }

      // Verifica se o market foi encontrado
      if (!market) {
        Logger.error(
          `‚ùå [TP_LIMIT] Market n√£o encontrado para ${position.symbol}. Markets dispon√≠veis: ${allMarkets?.map(m => m.symbol).join(', ') || 'nenhum'}`
        );
        throw new Error(`Market n√£o encontrado para ${position.symbol}`);
      }

      const isLong = parseFloat(position.netQuantity) > 0;
      const totalQuantity = Math.abs(parseFloat(position.netQuantity));
      const quantityToClose = (totalQuantity * percentageToClose) / 100;
      const decimal_quantity = market.decimal_quantity;
      const decimal_price = market.decimal_price;

      Logger.info(`üéØ [TP_LIMIT] ${position.symbol}: Criando ordem LIMIT de take profit parcial`);
      Logger.info(
        `üìä [TP_LIMIT] ${position.symbol}: Pre√ßo: $${takeProfitPrice.toFixed(decimal_price)}, Quantidade: ${quantityToClose.toFixed(decimal_quantity)} (${percentageToClose}%)`
      );

      const formatPrice = value => parseFloat(value).toFixed(decimal_price).toString();
      const formatQuantity = value => {
        if (value <= 0) {
          throw new Error(`Quantidade deve ser positiva: ${value}`);
        }
        let formatted = parseFloat(value).toFixed(decimal_quantity);
        if (parseFloat(formatted) === 0 && market.stepSize_quantity > 0) {
          return market.stepSize_quantity.toString();
        }
        return formatted.toString();
      };

      const orderBody = {
        symbol: position.symbol,
        orderType: 'Limit',
        side: isLong ? 'Ask' : 'Bid', // Ask if LONG, Bid if SHORT
        reduceOnly: true,
        quantity: formatQuantity(quantityToClose),
        price: formatPrice(takeProfitPrice),
        timeInForce: 'GTC',
        clientId: await OrderController.generateUniqueOrderId(config),
      };

      Logger.info(`üîÑ [TP_LIMIT] ${position.symbol}: Enviando ordem LIMIT para corretora...`);

      const result = await OrderController.ordersService.createLimitOrder({
        symbol: position.symbol,
        side: orderBody.side,
        quantity: orderBody.quantity,
        price: orderBody.price,
        clientId: orderBody.clientId,
        apiKey: config?.apiKey,
        apiSecret: config?.apiSecret,
        additionalParams: {
          timeInForce: orderBody.timeInForce,
          reduceOnly: orderBody.reduceOnly,
        },
      });

      if (result && !result.error) {
        Logger.info(
          `‚úÖ [TP_LIMIT] ${position.symbol}: Ordem LIMIT de take profit parcial criada com sucesso!`
        );
        Logger.info(`   ‚Ä¢ Order ID: ${result.id || 'N/A'}`);
        Logger.info(`   ‚Ä¢ Pre√ßo: $${takeProfitPrice.toFixed(decimal_price)}`);
        Logger.info(`   ‚Ä¢ Quantidade: ${quantityToClose.toFixed(decimal_quantity)}`);
        Logger.info(`   ‚Ä¢ Tipo: ${isLong ? 'LONG' : 'SHORT'}`);
        Logger.info(`   ‚Ä¢ ReduceOnly: true`);
        Logger.info(`   ‚Ä¢ OrderType: Limit`);
        return result;
      } else {
        const errorMsg = result && result.error ? result.error : 'desconhecido';
        Logger.error(
          `‚ùå [TP_LIMIT] ${position.symbol}: Falha ao criar ordem LIMIT - Erro: ${errorMsg}`
        );
        return null;
      }
    } catch (error) {
      Logger.error(
        `‚ùå [TP_LIMIT] Erro ao criar ordem LIMIT de take profit parcial para ${position.symbol}:`,
        error.message
      );
      return null;
    }
  }

  /**
   * Fecha parcialmente uma posi√ß√£o (usado pela Estrat√©gia H√≠brida)
   * @param {object} position - Dados da posi√ß√£o
   * @param {number} percentageToClose - Porcentagem da posi√ß√£o para fechar (ex: 50 = 50%)
   * @param {object} account - Dados da conta (opcional)
   * @returns {object|null} - Resultado da opera√ß√£o ou null se falhar
   */
  static async closePartialPosition(position, percentageToClose, account = null, config = null) {
    try {
      // Se account n√£o foi fornecido, obt√©m da API
      const Account = account || (await AccountController.get(config));
      // üîß MIGRA√á√ÉO: Usa ExchangeManager para obter markets em vez de Account.markets direto
      const exchangeManager = OrderController.getExchangeManager(config || {});
      const allMarkets = await exchangeManager.getMarkets();

      // Log detalhado para debug
      Logger.info(`üîç [CLOSE_PARTIAL] Procurando market para ${position.symbol}`);
      Logger.info(
        `üîç [CLOSE_PARTIAL] Total de markets dispon√≠veis: ${allMarkets?.length || 0}`
      );

      let market = allMarkets.find(el => {
        return el.symbol === position.symbol;
      });

      // Se n√£o encontrou, tenta uma busca case-insensitive
      if (!market) {
        const marketCaseInsensitive = allMarkets.find(el => {
          return el.symbol.toLowerCase() === position.symbol.toLowerCase();
        });
        if (marketCaseInsensitive) {
          Logger.info(
            `‚ö†Ô∏è [CLOSE_PARTIAL] Market encontrado com case diferente para ${position.symbol}: ${marketCaseInsensitive.symbol}`
          );
          market = marketCaseInsensitive;
        }
      }

      // Verifica se o market foi encontrado
      if (!market) {
        Logger.error(
          `‚ùå [CLOSE_PARTIAL] Market n√£o encontrado para ${position.symbol}. Markets dispon√≠veis: ${allMarkets?.map(m => m.symbol).join(', ') || 'nenhum'}`
        );
        throw new Error(`Market n√£o encontrado para ${position.symbol}`);
      }

      Logger.info(
        `‚úÖ [CLOSE_PARTIAL] Market encontrado para ${position.symbol}: decimal_quantity=${market.decimal_quantity}`
      );

      const isLong = parseFloat(position.netQuantity) > 0;
      const totalQuantity = Math.abs(parseFloat(position.netQuantity));
      const quantityToClose = (totalQuantity * percentageToClose) / 100;
      const decimal = market.decimal_quantity;

      Logger.info(
        `üìä [CLOSE_PARTIAL] ${position.symbol}: Fechando ${percentageToClose}% da posi√ß√£o`
      );
      Logger.info(
        `üìä [CLOSE_PARTIAL] ${position.symbol}: Quantidade total: ${totalQuantity}, Quantidade a fechar: ${quantityToClose.toFixed(decimal)}`
      );

      const body = {
        symbol: position.symbol,
        orderType: 'Market',
        side: isLong ? 'Ask' : 'Bid', // Ask if LONG , Bid if SHORT
        reduceOnly: true,
        clientId: await OrderController.generateUniqueOrderId(config),
        quantity: String(quantityToClose.toFixed(decimal)),
      };

      // Fecha parcialmente a posi√ß√£o
      // üîß MIGRA√á√ÉO: Reutiliza ExchangeManager j√° criado acima
      const closeResult = await exchangeManager.executeOrder(body, config?.apiKey, config?.apiSecret);

      if (closeResult) {
        // Log detalhado da taxa de fechamento parcial
        const fee = market.fee || 0.0004;
        let closePrice = closeResult?.price || position.markPrice || position.entryPrice;
        const exitValue = parseFloat(body.quantity) * parseFloat(closePrice);
        const exitFee = exitValue * fee;

        Logger.info(
          `üí∞ [CLOSE_PARTIAL] ${position.symbol}: Fechamento parcial realizado com sucesso!`
        );
        Logger.info(
          `üí∞ [CLOSE_PARTIAL] ${position.symbol}: Valor fechado: $${exitValue.toFixed(2)} | Fee: $${exitFee.toFixed(6)} (${(fee * 100).toFixed(4)}%)`
        );
        Logger.info(
          `üí∞ [CLOSE_PARTIAL] ${position.symbol}: Quantidade restante: ${(totalQuantity - quantityToClose).toFixed(decimal)}`
        );

        return closeResult;
      } else {
        Logger.error(
          `‚ùå [CLOSE_PARTIAL] ${position.symbol}: Falha ao executar ordem de fechamento parcial`
        );
        return null;
      }
    } catch (error) {
      Logger.error(
        `‚ùå [CLOSE_PARTIAL] Erro ao fechar parcialmente ${position.symbol}:`,
        error.message
      );
      return null;
    }
  }

  // Fun√ß√£o auxiliar para calcular slippage percentual
  static calcSlippagePct(priceLimit, priceCurrent) {
    return (Math.abs(priceCurrent - priceLimit) / priceLimit) * 100;
  }

  // Fun√ß√£o auxiliar para revalidar sinal
  static async revalidateSignal({ market, botName, originalSignalData, config = null }) {
    try {
      // Se n√£o temos dados originais do sinal, assume v√°lido
      if (!originalSignalData) {
        Logger.info(
          `‚ÑπÔ∏è [${botName}] ${market}: Sem dados originais para revalida√ß√£o. Assumindo sinal v√°lido.`
        );
        return true;
      }

      // Usa a estrat√©gia passada como par√¢metro
      const strategyNameToUse = botName || config?.strategyName || 'DEFAULT';

      // Importa a estrat√©gia apropriada
      const { StrategyFactory } = await import('../Decision/Strategies/StrategyFactory.js');
      const strategy = StrategyFactory.createStrategy(strategyNameToUse);

      Logger.info(
        `üîç [${botName}] ${market}: Usando estrat√©gia: ${strategyNameToUse} (${strategy?.constructor?.name || 'N√ÉO ENCONTRADA'})`
      );

      if (!strategy) {
        Logger.warn(
          `‚ö†Ô∏è [${botName}] ${market}: Estrat√©gia ${strategyNameToUse} n√£o encontrada. Assumindo sinal v√°lido.`
        );
        return true;
      }

      // Obt√©m dados de mercado atualizados
      const timeframe = originalSignalData.config?.time || config?.time || '5m';
      const markets = new Markets();
      const candles = await markets.getKLines(market, timeframe, 30);

      if (!candles || candles.length < 20) {
        Logger.warn(
          `‚ö†Ô∏è [${botName}] ${market}: Dados insuficientes para revalida√ß√£o. Assumindo sinal v√°lido.`
        );
        return true;
      }

      // Calcula indicadores atualizados
      const { calculateIndicators } = await import('../Decision/Indicators.js');
      const indicators = await calculateIndicators(candles, timeframe, market);

      // Obt√©m informa√ß√µes do mercado
      const Account = await AccountController.get(config);

      // Verifica se os dados da conta foram carregados com sucesso
      if (!Account) {
        Logger.warn(
          `‚ö†Ô∏è [${botName}] Dados da conta indispon√≠veis para ${market} - ignorando opera√ß√£o`
        );
        return null;
      }

      // üîß MIGRA√á√ÉO: Usa ExchangeManager para obter markets em vez de Account.markets direto
      const exchangeManager = OrderController.getExchangeManager(config || {});
      const allMarkets = await exchangeManager.getMarkets();
      const marketInfo = allMarkets.find(m => m.symbol === market);
      const currentPrice = parseFloat(candles[candles.length - 1].close);

      // Cria dados para an√°lise
      const data = {
        ...indicators,
        market: marketInfo,
        marketPrice: currentPrice,
      };

      // Reanalisa o trade com dados atualizados
      const fee = marketInfo.fee || config?.fee || 0.0004;

      // ‚úÖ USA RISKMANAGER: Calcula investimento baseado no capitalPercentage
      const investmentUSD = RiskManager.calculateInvestmentAmount(Account.capitalAvailable, config);

      const media_rsi = config?.mediaRsi || 50;

      Logger.info(
        `üîç [${botName}] ${market}: Revalidando com dados atualizados - Pre√ßo atual: $${currentPrice.toFixed(6)}, Fee: ${fee}, Investment: $${investmentUSD}`
      );

      const decision = await strategy.analyzeTrade(
        fee,
        data,
        investmentUSD,
        media_rsi,
        originalSignalData.config || {},
        'NEUTRAL' // btcTrend - assume neutro para revalida√ß√£o
      );

      // Verifica se o sinal ainda √© v√°lido
      const originalAction = originalSignalData.action;
      const currentAction = decision?.action;

      // Normaliza as a√ß√µes para compara√ß√£o (remove espa√ßos, converte para lowercase)
      const normalizedOriginalAction = originalAction?.toLowerCase()?.trim();
      const normalizedCurrentAction = currentAction?.toLowerCase()?.trim();

      // Se n√£o h√° decis√£o atual, significa que n√£o h√° sinal v√°lido
      if (!decision) {
        Logger.info(
          `üîç [${botName}] ${market}: Estrat√©gia retornou null - n√£o h√° sinal v√°lido atualmente`
        );
        return false;
      }

      // Se n√£o h√° a√ß√£o atual, significa que n√£o h√° sinal v√°lido
      if (!currentAction) {
        Logger.info(
          `üîç [${botName}] ${market}: Estrat√©gia n√£o retornou a√ß√£o - n√£o h√° sinal v√°lido atualmente`
        );
        return false;
      }

      const isStillValid = normalizedCurrentAction === normalizedOriginalAction;

      if (isStillValid) {
        Logger.info(`‚úÖ [${botName}] ${market}: Sinal revalidado com sucesso.`);
      } else {
        Logger.info(
          `‚ùå [${botName}] ${market}: Sinal n√£o √© mais v√°lido. Condi√ß√µes de mercado mudaram.`
        );
        Logger.info(
          `üîç [${botName}] ${market}: A√ß√£o original: ${originalAction} (normalizada: ${normalizedOriginalAction}), A√ß√£o atual: ${currentAction || 'NENHUMA'} (normalizada: ${normalizedCurrentAction || 'NENHUMA'})`
        );
        Logger.info(`üîç [${botName}] ${market}: Decision completo:`, decision);
      }

      return isStillValid;
    } catch (error) {
      Logger.warn(
        `‚ö†Ô∏è [${botName}] ${market}: Erro na revalida√ß√£o do sinal: ${error.message}. Assumindo v√°lido.`
      );
      return true; // Em caso de erro, assume v√°lido para n√£o perder oportunidades
    }
  }

  // Fun√ß√£o principal de execu√ß√£o h√≠brida
  static async openHybridOrder({
    entry,
    stop,
    target,
    action,
    market,
    volume, // üóëÔ∏è DEPRECATED: ser√° calculado internamente
    decimal_quantity,
    decimal_price,
    stepSize_quantity,
    minQuantity,
    botName = 'DEFAULT',
    originalSignalData,
    config = null,
    account = null, // ‚úÖ NOVO: dados da conta para c√°lculo interno
  }) {
    // Define strategy name early for error handling
    const strategyNameToUse = config?.strategyName || botName || 'UNKNOWN';

    try {
      const formatPrice = value => parseFloat(value).toFixed(decimal_price).toString();

      // Valida√ß√µes b√°sicas
      if (!entry || !stop || !target || !action || !market) {
        return { error: 'Par√¢metros obrigat√≥rios ausentes' };
      }

      const entryPrice = parseFloat(entry);

      // ‚úÖ NOVA ABORDAGEM CENTRALIZADA: QuantityCalculator calcula volume internamente
      const marketInfo = {
        decimal_quantity,
        decimal_price,
        stepSize_quantity: stepSize_quantity || 0,
        minQuantity: minQuantity,
      };

      // Se account n√£o foi fornecida, busca dinamicamente
      const configWithSymbol = { ...config, symbol: market };
      const accountData = account || (await AccountController.get(configWithSymbol));
      if (!accountData) {
        Logger.error(
          `‚ùå [QUANTITY_ERROR] ${market}: AccountController retornou null - API temporariamente indispon√≠vel`
        );
        return { error: 'Dados da conta temporariamente indispon√≠veis - aguardando reconex√£o' };
      }

      if (!accountData.capitalAvailable && accountData.capitalAvailable !== 0) {
        Logger.error(
          `‚ùå [QUANTITY_ERROR] ${market}: capitalAvailable √© ${accountData.capitalAvailable} - dados de capital inv√°lidos`
        );
        Logger.error(
          `‚ùå [QUANTITY_ERROR] ${market}: accountData keys dispon√≠veis:`,
          Object.keys(accountData)
        );
        return { error: 'Capital dispon√≠vel n√£o encontrado nos dados da conta' };
      }

      const quantityResult = QuantityCalculator.calculatePositionSize(
        entryPrice,
        marketInfo,
        config || {},
        accountData,
        market
      );

      if (!quantityResult.isValid) {
        Logger.error(`‚ùå [QUANTITY_ERROR] ${market}: ${quantityResult.error}`);
        return { error: quantityResult.error };
      }

      const quantity = quantityResult.quantity;
      const orderValue = quantityResult.orderValue;
      const side = action === 'long' ? 'Bid' : 'Ask';
      const finalPrice = parseFloat(entryPrice); // ‚úÖ CORRE√á√ÉO: Mant√©m como n√∫mero para poder usar .toFixed()

      // Debug dos valores calculados
      Logger.debug(
        `üîç [ORDER_CALC] ${market}: Entry=${entryPrice}, Qty=${quantity}, Vol=$${quantityResult.volumeUSD.toFixed(2)}, Side=${side}`
      );

      // Valida√ß√£o de quantidade
      if (parseFloat(quantity) <= 0) {
        return { error: `Quantidade inv√°lida: ${quantity}` };
      }

      // Log inicial da execu√ß√£o h√≠brida
      Logger.info(`\nüöÄ [${strategyNameToUse}] ${market}: Iniciando execu√ß√£o h√≠brida`);
      Logger.info(
        `üìä [${strategyNameToUse}] ${market}: Pre√ßo de entrada: $${entryPrice.toFixed(6)} | Quantidade: ${quantity} | Valor: $${orderValue.toFixed(2)}`
      );

      // Calcula pre√ßos de stop loss e take profit (com ajuste por alavancagem)
      const stopPrice = parseFloat(stop);
      let targetPrice = parseFloat(target); // Ser√° ajustado por alavancagem

      // Ajusta Stop Loss pelo leverage do bot/s√≠mbolo
      let leverageAdjustedStopPrice = stopPrice;
      let actualStopLossPct = Math.abs(Number(config?.maxNegativePnlStopPct ?? 10)); // Default value
      let actualTakeProfitPct = Math.abs(Number(config?.minProfitPercentage ?? 10)); // Default value

      try {
        const Account = await AccountController.get({
          apiKey: config?.apiKey,
          apiSecret: config?.apiSecret,
          strategy: config?.strategyName || 'DEFAULT',
        });
        if (Account && Account.leverage) {
          const rawLeverage = Number(Account.leverage);
          const leverage = validateLeverageForSymbol(market, rawLeverage);
          const baseStopLossPct = Math.abs(Number(config?.maxNegativePnlStopPct ?? 10));
          actualStopLossPct = baseStopLossPct / leverage;
          const isLong = action === 'long';
          const computedLeverageStop = isLong
            ? entryPrice * (1 - actualStopLossPct / 100)
            : entryPrice * (1 + actualStopLossPct / 100);

          // Usa o stop mais conservador (mais pr√≥ximo do entry, portanto mais protetor)
          if (isFinite(computedLeverageStop)) {
            if (isLong) {
              leverageAdjustedStopPrice =
                Math.max(computedLeverageStop, stopPrice || 0) || computedLeverageStop;
            } else {
              leverageAdjustedStopPrice =
                Math.min(computedLeverageStop, stopPrice || Infinity) || computedLeverageStop;
            }
          }

          Logger.info(
            `üõ°Ô∏è [STOP_LEVERAGE] ${market}: base=${baseStopLossPct}% leverage=${leverage}x ‚Üí efetivo=${actualStopLossPct.toFixed(2)}% | stop(orig)=${isFinite(stopPrice) ? stopPrice.toFixed(6) : 'NaN'} ‚Üí stop(lev)=${leverageAdjustedStopPrice.toFixed(6)}`
          );

          // üîß CORRE√á√ÉO CR√çTICA: Ajusta o Take Profit considerando a alavancagem
          const baseTakeProfitPct = Math.abs(Number(config?.minProfitPercentage ?? 10));
          actualTakeProfitPct = baseTakeProfitPct / leverage;

          const leverageAdjustedTakeProfit = isLong
            ? entryPrice * (1 + actualTakeProfitPct / 100)
            : entryPrice * (1 - actualTakeProfitPct / 100);

          // Usa o take profit mais conservador (mais pr√≥ximo do entry quando alavancagem √© alta)
          if (isFinite(leverageAdjustedTakeProfit)) {
            if (isLong) {
              // Para LONG: TP menor (mais pr√≥ximo) √© mais conservador
              targetPrice =
                Math.min(leverageAdjustedTakeProfit, targetPrice || Infinity) ||
                leverageAdjustedTakeProfit;
            } else {
              // Para SHORT: TP maior (mais pr√≥ximo) √© mais conservador
              targetPrice =
                Math.max(leverageAdjustedTakeProfit, targetPrice || 0) ||
                leverageAdjustedTakeProfit;
            }
          }

          Logger.info(
            `üéØ [TP_LEVERAGE] ${market}: base=${baseTakeProfitPct}% leverage=${leverage}x ‚Üí efetivo=${actualTakeProfitPct.toFixed(2)}% | tp(orig)=${isFinite(parseFloat(target)) ? parseFloat(target).toFixed(6) : 'NaN'} ‚Üí tp(lev)=${targetPrice.toFixed(6)}`
          );
        } else {
          Logger.warn(
            `‚ö†Ô∏è [TP_LEVERAGE] ${market}: N√£o foi poss√≠vel obter leverage para ajuste do take profit. Usando TP informado.`
          );
        }
      } catch (levErr) {
        Logger.warn(
          `‚ö†Ô∏è [TP_LEVERAGE] ${market}: Erro ao ajustar TP por leverage: ${levErr.message}. Usando TP informado.`
        );
      }

      // Verifica se o Trailing Stop est√° habilitado para determinar se deve criar Take Profit fixo
      const enableTrailingStop = config?.enableTrailingStop === true;

      Logger.info(
        `üõ°Ô∏è [${strategyNameToUse}] ${market}: Configurando ordens de seguran√ßa integradas`
      );
      Logger.info(
        `   ‚Ä¢ Stop Loss: $${leverageAdjustedStopPrice.toFixed(6)} (ajustado por alavancagem)`
      );

      if (enableTrailingStop) {
        Logger.info(`   ‚Ä¢ Take Profit: Ser√° gerenciado dinamicamente pelo Trailing Stop`);
      } else {
        Logger.info(`   ‚Ä¢ Take Profit: $${targetPrice.toFixed(6)} (ajustado por alavancagem)`);
      }

      // üéØ INTEGRA√á√ÉO ORDER BOOK: Ajusta pre√ßos para evitar execu√ß√£o imediata
      Logger.info(`üîç [ORDER_BOOK] ${market}: Ajustando pre√ßos com base no order book...`);

      // Ajusta pre√ßo principal da ordem (busca por pre√ßos pr√≥ximos ao pre√ßo final calculado)
      // Para a entrada, queremos pre√ßos muito pr√≥ximos (0.1% de diferen√ßa m√°xima)
      const entryPriceRef = finalPrice; // Usar o pre√ßo final como refer√™ncia
      const entryDeviation = 0.1; // M√°ximo 0.1% de diferen√ßa para entrada
      // Para bot tradicional: usa pre√ßo calculado sem ajuste de OrderBook para entrada
      // Apenas Stop Loss e Take Profit usam OrderBook para encontrar pre√ßos EXATOS
      const adjustedEntryPrice = finalPrice;

      // Para bot tradicional: usa pre√ßo calculado (n√£o precisa verificar null)

      // Ajusta pre√ßo de Stop Loss baseado na porcentagem configurada
      const stopLossPercentage = action === 'long' ? -actualStopLossPct : actualStopLossPct;
      const adjustedStopLossPrice = await OrderBookAnalyzer.findClosestOrderBookPrice(
        market,
        side === 'BUY' ? 'SELL' : 'BUY', // Lado oposto para SL
        entryPrice, // Usar pre√ßo de entrada como refer√™ncia
        stopLossPercentage // Usar porcentagem configurada
      );

      // üö® CR√çTICO: Se OrderBook n√£o encontrou pre√ßo de Stop Loss, CANCELAR
      if (adjustedStopLossPrice === null) {
        Logger.error(
          `‚ùå [ORDER_EXECUTION] ${market}: Imposs√≠vel ajustar Stop Loss via OrderBook - CANCELANDO opera√ß√£o`
        );
        return {
          error:
            'OrderBook falhou ao encontrar pre√ßo de Stop Loss - opera√ß√£o cancelada por seguran√ßa',
        };
      }

      // Ajusta pre√ßo de Take Profit baseado na porcentagem configurada (apenas se n√£o for trailing stop)
      let adjustedTakeProfitPrice = targetPrice;
      if (!enableTrailingStop) {
        const takeProfitPercentage = action === 'long' ? actualTakeProfitPct : -actualTakeProfitPct;

        // Log dos valores para Take Profit
        Logger.debug(
          `üéØ [TP_CALC] ${market}: Entry=${entryPrice.toFixed(6)}, TP%=${takeProfitPercentage}%, Target=${(entryPrice * (1 + takeProfitPercentage / 100)).toFixed(6)}`
        );

        adjustedTakeProfitPrice = await OrderBookAnalyzer.findClosestOrderBookPrice(
          market,
          action === 'long' ? 'SELL' : 'BUY', // LONG = SELL para TP, SHORT = BUY para TP
          entryPrice, // Usar pre√ßo de entrada como refer√™ncia
          takeProfitPercentage // Usar porcentagem configurada
        );

        Logger.debug(`üéØ [TP_BOOK] ${market}: Adjusted TP price: ${adjustedTakeProfitPrice}`);

        // üö® CR√çTICO: Se OrderBook n√£o encontrou pre√ßo, CANCELAR opera√ß√£o
        if (adjustedTakeProfitPrice === null) {
          Logger.error(
            `‚ùå [ORDER_EXECUTION] ${market}: Imposs√≠vel ajustar Take Profit via OrderBook - CANCELANDO opera√ß√£o`
          );
          return {
            error:
              'OrderBook falhou ao encontrar pre√ßo de Take Profit - opera√ß√£o cancelada por seguran√ßa',
          };
        }
      }

      // Log dos ajustes realizados
      if (adjustedEntryPrice && adjustedEntryPrice !== finalPrice) {
        Logger.debug(
          `   üìä [ORDER_BOOK] Pre√ßo entrada ajustado: $${finalPrice.toFixed(6)} ‚Üí $${adjustedEntryPrice.toFixed(6)}`
        );
      }
      if (adjustedStopLossPrice && adjustedStopLossPrice !== leverageAdjustedStopPrice) {
        Logger.debug(
          `   üìä [ORDER_BOOK] Stop Loss ajustado: $${leverageAdjustedStopPrice.toFixed(6)} ‚Üí $${adjustedStopLossPrice.toFixed(6)}`
        );
      }
      if (
        !enableTrailingStop &&
        adjustedTakeProfitPrice &&
        adjustedTakeProfitPrice !== targetPrice
      ) {
        Logger.debug(
          `   üìä [ORDER_BOOK] Take Profit ajustado: $${targetPrice.toFixed(6)} ‚Üí $${adjustedTakeProfitPrice.toFixed(6)}`
        );
      }

      // Log de debug dos pre√ßos ajustados
      Logger.debug(
        `üìä [PRICE_ADJ] ${market}: Entry=${adjustedEntryPrice || finalPrice}, Original=${finalPrice}`
      );

      // Usa pre√ßos ajustados ou fallback para os originais
      const finalEntryPrice = adjustedEntryPrice || finalPrice;
      const finalStopLossPrice = adjustedStopLossPrice || leverageAdjustedStopPrice;
      const finalTakeProfitPrice = adjustedTakeProfitPrice || targetPrice;

      const body = {
        symbol: market,
        side,
        orderType: 'Limit',
        postOnly: true,
        quantity: parseFloat(quantity).toFixed(decimal_quantity).toString(), // ‚úÖ CORRE√á√ÉO: Formata quantidade usando decimal_quantity (0 casas decimais para LINEA)
        price: formatPrice(finalEntryPrice), // ‚úÖ CORRE√á√ÉO: Formata pre√ßo com decimal_price (6 casas decimais)
        // Par√¢metros de stop loss integrados (sempre criados)
        stopLossTriggerBy: 'LastPrice',
        stopLossTriggerPrice: formatPrice(finalStopLossPrice), // üéØ Usa SL ajustado
        stopLossLimitPrice: formatPrice(finalStopLossPrice), // üéØ Usa SL ajustado
        timeInForce: 'GTC',
        selfTradePrevention: 'RejectTaker',
        clientId: await OrderController.generateUniqueOrderId(config),
      };

      // Adiciona par√¢metros de take profit APENAS se o Trailing Stop estiver desabilitado
      if (!enableTrailingStop) {
        body.takeProfitTriggerBy = 'LastPrice';
        body.takeProfitTriggerPrice = formatPrice(finalTakeProfitPrice); // üéØ Usa TP ajustado
        body.takeProfitLimitPrice = formatPrice(finalTakeProfitPrice); // üéØ Usa TP ajustado
      }

      // 1. Envia ordem LIMIT (post-only)
      let limitResult;
      try {
        // SEMPRE usa credenciais do config - lan√ßa exce√ß√£o se n√£o dispon√≠vel
        if (!config?.apiKey || !config?.apiSecret) {
          throw new Error(
            'API_KEY e API_SECRET s√£o obrigat√≥rios - deve ser passado da config do bot'
          );
        }

        // üîß MIGRA√á√ÉO: Usa ExchangeManager em vez de Order direto
        const exchangeManager = OrderController.getExchangeManager(config);
        limitResult = await exchangeManager.executeOrder(body, config.apiKey, config.apiSecret);

        if (!limitResult || limitResult.error) {
          const errorMessage = limitResult && limitResult.error ? limitResult.error.toString() : '';

          if (errorMessage.includes('Order would immediately match and take')) {
            Logger.info(
              `üü° [INFO] ${market}: A ordem com desconto (LIMIT) n√£o foi aceita porque o mercado se moveu muito r√°pido.`
            );
            Logger.info(`[A√á√ÉO] ${market}: Cancelando e acionando plano B com ordem a MERCADO.`);

            return await OrderController.executeMarketFallback({
              market,
              side,
              quantity,
              botName,
              originalSignalData,
              entryPrice,
              config,
            });
          } else {
            Logger.error(
              `‚ùå [${botName}] ${market}: Falha ao enviar ordem LIMIT: ${limitResult && limitResult.error}`
            );
            return { error: limitResult && limitResult.error };
          }
        }

        Logger.info(
          `‚úÖ [${strategyNameToUse}] ${market}: Ordem LIMIT enviada com sucesso (ID: ${limitResult.id || 'N/A'})`
        );

        // Registra a ordem no sistema de persist√™ncia
        if (limitResult && limitResult.id && config && config.id) {
          await BotOrdersManager.addOrder(
            config.id,
            limitResult.id,
            market,
            side === 'Bid' ? 'BUY' : 'SELL',
            parseFloat(quantity),
            parseFloat(finalPrice),
            'LIMIT',
            limitResult.exchangeCreatedAt || null,
            body.clientId // Passa o clientId gerado
          );
        }
      } catch (error) {
        const errorMessage = error.message || error.toString();

        if (errorMessage.includes('Order would immediately match and take')) {
          Logger.info(
            `üü° [INFO] ${market}: A ordem com desconto (LIMIT) n√£o foi aceita porque o mercado se moveu muito r√°pido.`
          );
          Logger.info(`[A√á√ÉO] ${market}: Cancelando e acionando plano B com ordem a MERCADO.`);

          return await OrderController.executeMarketFallback({
            market,
            side,
            quantity,
            botName,
            originalSignalData,
            entryPrice,
            config,
          });
        } else {
          Logger.error(
            `‚ùå [${strategyNameToUse}] ${market}: Erro ao enviar ordem LIMIT:`,
            error.message
          );
          return { error: error.message };
        }
      }

      // 2. Monitora execu√ß√£o baseado no orderExecutionMode
      const orderExecutionMode = config?.orderExecutionMode || 'HYBRID';

      if (orderExecutionMode === 'LIMIT') {
        // Modo LIMIT: N√£o monitora timeout, deixa ordem no livro
        Logger.info(
          `üìã [${strategyNameToUse}] ${market}: Modo LIMIT ativo - ordem permanecer√° no livro at√© executar`
        );

        // Aguarda apenas 3 segundos para confirmar que a ordem foi criada
        await new Promise(r => setTimeout(r, 3000));

        try {
          // üîß MIGRA√á√ÉO: Usa ExchangeManager em vez de Order direto
          const exchangeManager = OrderController.getExchangeManager(config);
          const openOrders = await exchangeManager.getOpenOrdersForSymbol(
            market,
            config.apiKey,
            config.apiSecret
          );
          const orderExists = openOrders && openOrders.some(o => o.id === limitResult.id);

          if (orderExists) {
            Logger.info(
              `‚úÖ [${strategyNameToUse}] ${market}: Ordem LIMIT criada com sucesso - ID: ${limitResult.id}`
            );

            // üéØ INTEGRA√á√ÉO: Adiciona ordem ao LimitOrderValidator para monitoramento de slippage
            try {
              // Inicia validator se ainda n√£o estiver ativo
              if (!LimitOrderValidator.isActive) {
                await LimitOrderValidator.start();
              }

              // Adiciona ordem para monitoramento
              await LimitOrderValidator.addOrderToMonitor({
                orderId: limitResult.id,
                symbol: market,
                side: side, // 'Bid' ou 'Ask'
                price: finalPrice,
                botConfig: config,
                slippageThreshold: config?.limitOrderSlippageThreshold || 0.8, // 0.8% padr√£o
              });

              Logger.info(
                `üéØ [LIMIT_VALIDATOR] ${market}: Ordem ${limitResult.id} adicionada ao monitoramento de slippage`
              );
            } catch (error) {
              Logger.warn(
                `‚ö†Ô∏è [LIMIT_VALIDATOR] ${market}: Erro ao adicionar ordem ${limitResult.id} ao monitoramento: ${error.message}`
              );
            }

            return { success: true, orderId: limitResult.id, mode: 'LIMIT' };
          } else {
            Logger.warn(
              `‚ö†Ô∏è [${strategyNameToUse}] ${market}: Ordem LIMIT pode ter sido executada imediatamente`
            );
          }
        } catch (error) {
          Logger.error(
            `‚ùå [${strategyNameToUse}] ${market}: Erro ao verificar ordem LIMIT: ${error.message}`
          );
        }

        return { success: true, orderId: limitResult.id, mode: 'LIMIT' };
      }

      // Modo HYBRID: Monitora por timeout e faz fallback a mercado
      const timeoutSec = Number(config?.orderExecutionTimeoutSeconds || 12);
      Logger.info(
        `‚ö° [${strategyNameToUse}] ${market}: Modo H√çBRIDO ativo - monitorando por ${timeoutSec}s, depois fallback a mercado`
      );

      let filled = false;
      for (let i = 0; i < timeoutSec; i++) {
        await new Promise(r => setTimeout(r, 1000));

        try {
          // üîß MIGRA√á√ÉO: Usa ExchangeManager em vez de Order direto
          const exchangeManager = OrderController.getExchangeManager(config);
          const openOrders = await exchangeManager.getOpenOrdersForSymbol(
            market,
            config.apiKey,
            config.apiSecret
          );
          const stillOpen =
            openOrders &&
            openOrders.some(
              o =>
                o.id === limitResult.id &&
                (o.status === 'Pending' || o.status === 'New' || o.status === 'PartiallyFilled')
            );

          if (!stillOpen) {
            filled = true;
            break;
          }

          // Log de progresso a cada 3 segundos
          if (i % 3 === 0 && i > 0) {
            Logger.info(
              `‚è≥ [${strategyNameToUse}] ${market}: Aguardando execu√ß√£o... ${i}/${timeoutSec}s`
            );
          }
        } catch (monitorError) {
          Logger.warn(
            `‚ö†Ô∏è [${botName}] ${market}: Erro ao monitorar ordem: ${monitorError.message}`
          );
        }
      }

      if (filled) {
        Logger.info(
          `‚úÖ [SUCESSO] ${market}: Ordem LIMIT executada normalmente em ${timeoutSec} segundos.`
        );

        // üõ°Ô∏è CR√çTICO: Criar ordens de Stop Loss e Take Profit ap√≥s execu√ß√£o da ordem principal
        try {
          Logger.info(`üõ°Ô∏è [SECURITY] ${market}: Criando ordens de seguran√ßa SL/TP...`);

          // ‚è±Ô∏è Aguarda 10s para API processar a posi√ß√£o
          Logger.debug(`‚è±Ô∏è [SECURITY] ${market}: Aguardando 10s para API processar posi√ß√£o...`);
          await new Promise(resolve => setTimeout(resolve, 10000));

          // Buscar posi√ß√£o atualizada para obter pre√ßo real de entrada
          const Account = await AccountController.get({
            apiKey: config?.apiKey,
            apiSecret: config?.apiSecret,
            strategy: config?.strategyName || 'DEFAULT',
          });

          if (!Account?.positions) {
            throw new Error('N√£o foi poss√≠vel obter posi√ß√µes atualizadas');
          }

          const position = Account.positions.find(
            p => p.symbol === market && Math.abs(Number(p.netQuantity)) > 0
          );
          if (!position) {
            throw new Error('Posi√ß√£o n√£o encontrada ap√≥s execu√ß√£o');
          }

          const securityResult = await OrderController.createPositionSafetyOrders(position, config);
          if (securityResult?.success || securityResult?.partial) {
            Logger.info(`‚úÖ [SECURITY] ${market}: Ordens de seguran√ßa criadas com sucesso!`);
          } else {
            Logger.warn(
              `‚ö†Ô∏è [SECURITY] ${market}: Falha ao criar ordens de seguran√ßa: ${securityResult?.error || 'Erro desconhecido'}`
            );
          }
        } catch (securityError) {
          Logger.warn(
            `‚ö†Ô∏è [SECURITY] ${market}: Erro ao criar ordens de seguran√ßa: ${securityError.message}`
          );
        }

        return { success: true, type: 'LIMIT', limitResult };
      }

      // 3. Timeout: cancela ordem LIMIT com retry robusto
      Logger.info(
        `‚è∞ [${strategyNameToUse}] ${market}: Ordem LIMIT n√£o executada em ${timeoutSec} segundos. Cancelando...`
      );

      let orderCancelled = false;
      let cancelAttempts = 0;
      const maxCancelAttempts = 3;

      // Retry de cancelamento com backoff
      while (!orderCancelled && cancelAttempts < maxCancelAttempts) {
        cancelAttempts++;
        try {
          Logger.info(
            `üîÑ [${strategyNameToUse}] ${market}: Tentativa ${cancelAttempts}/${maxCancelAttempts} de cancelamento...`
          );

          // üîß MIGRA√á√ÉO: Usa ExchangeManager em vez de Order direto
          const exchangeManager = OrderController.getExchangeManager(config);
          await exchangeManager.cancelOpenOrder(
            market,
            limitResult.id,
            null,
            config?.apiKey,
            config?.apiSecret
          );
          Logger.info(
            `‚úÖ [${botName}] ${market}: Ordem LIMIT cancelada com sucesso na tentativa ${cancelAttempts}.`
          );
          orderCancelled = true;

          // CR√çTICO: Atualizar status da ordem no banco para CANCELLED
          try {
            const { default: OrdersService } = await import('../Services/OrdersService.js');
            await OrdersService.updateOrderStatus(limitResult.id, 'CANCELLED', 'LIMIT_TIMEOUT');
            Logger.info(
              `‚úÖ [${botName}] ${market}: Status da ordem atualizado para CANCELLED no banco`
            );
          } catch (updateError) {
            Logger.error(
              `‚ùå [${botName}] ${market}: Erro cr√≠tico ao atualizar status no banco: ${updateError.message}`
            );
            // Mesmo com erro de update, continuamos o processo
          }
        } catch (cancelError) {
          Logger.warn(
            `‚ö†Ô∏è [${botName}] ${market}: Erro na tentativa ${cancelAttempts} de cancelamento: ${cancelError.message}`
          );

          // Se n√£o √© a √∫ltima tentativa, aguarda antes de tentar novamente
          if (cancelAttempts < maxCancelAttempts) {
            const waitTime = cancelAttempts * 1000; // 1s, 2s, 3s
            Logger.info(
              `‚è≥ [${strategyNameToUse}] ${market}: Aguardando ${waitTime}ms antes da pr√≥xima tentativa...`
            );
            await new Promise(resolve => setTimeout(resolve, waitTime));
          }
        }
      }

      // Se falhou em cancelar ap√≥s todas as tentativas
      if (!orderCancelled) {
        Logger.error(
          `‚ùå [${botName}] ${market}: FALHA CR√çTICA - N√£o foi poss√≠vel cancelar ordem LIMIT ap√≥s ${maxCancelAttempts} tentativas!`
        );

        // For√ßa atualiza√ß√£o no banco para CANCELLED mesmo sem confirma√ß√£o da corretora
        // Isso evita ordens fantasma no futuro
        try {
          const { default: OrdersService } = await import('../Services/OrdersService.js');
          await OrdersService.updateOrderStatus(limitResult.id, 'CANCELLED', 'LIMIT_TIMEOUT_FORCE');
          Logger.warn(
            `‚ö†Ô∏è [${botName}] ${market}: Ordem marcada como CANCELLED no banco (sem confirma√ß√£o da corretora)`
          );
        } catch (forceUpdateError) {
          Logger.error(
            `‚ùå [${botName}] ${market}: Erro ao for√ßar atualiza√ß√£o no banco: ${forceUpdateError.message}`
          );
        }

        // OPCIONAL: Pode abortar aqui em vez de continuar com market order
        Logger.info(
          `üö´ [${strategyNameToUse}] ${market}: Abortando entrada devido a falha no cancelamento`
        );
        return { error: 'Failed to cancel limit order', limitOrderId: limitResult.id };
      }

      // 4. Revalida sinal e slippage
      Logger.info(
        `üîç [${strategyNameToUse}] ${market}: Revalidando sinal e verificando slippage...`
      );

      const signalValid = await OrderController.revalidateSignal({
        market,
        botName: strategyNameToUse,
        originalSignalData,
        config,
      });
      const markets = new Markets();
      const markPrices2 = await markets.getAllMarkPrices(market);

      // Find the correct price for this symbol
      let priceCurrent;
      if (Array.isArray(markPrices2)) {
        const symbolPriceData = markPrices2.find(item => item.symbol === market);
        priceCurrent = parseFloat(
          symbolPriceData ? symbolPriceData.markPrice : markPrices2[0]?.markPrice || entryPrice
        );
      } else {
        priceCurrent = parseFloat(markPrices2?.markPrice || markPrices2 || entryPrice);
      }
      const slippage = OrderController.calcSlippagePct(entryPrice, priceCurrent);

      Logger.info(
        `üìä [${strategyNameToUse}] ${market}: Revalida√ß√£o - Sinal: ${signalValid ? '‚úÖ V√ÅLIDO' : '‚ùå INV√ÅLIDO'} | Slippage: ${slippage.toFixed(3)}%`
      );

      if (!signalValid) {
        Logger.info(
          `üö´ [${strategyNameToUse}] ${market}: Sinal n√£o √© mais v√°lido. Abortando entrada.`
        );
        return { aborted: true, reason: 'signal' };
      }

      const maxSlippage = parseFloat(config?.maxSlippagePct || 0.2);
      if (slippage > maxSlippage) {
        Logger.info(
          `üö´ [${strategyNameToUse}] ${market}: Slippage de ${slippage.toFixed(3)}% excede o m√°ximo permitido (${maxSlippage}%). Abortando entrada.`
        );
        return { aborted: true, reason: 'slippage' };
      }

      // 5. Fallback: envia ordem a mercado
      Logger.info(`[A√á√ÉO] ${market}: Acionando plano B com ordem a MERCADO para garantir entrada.`);

      return await OrderController.executeMarketFallback({
        market,
        side,
        quantity,
        botName,
        originalSignalData,
        entryPrice,
        config,
      });
    } catch (error) {
      Logger.error(`‚ùå [${strategyNameToUse}] ${market}: Erro no fluxo h√≠brido:`, error.message);
      return { error: error.message };
    }
  }

  /**
   * NOVO: M√©todo auxiliar para executar fallback a mercado
   * @param {object} params - Par√¢metros para execu√ß√£o do fallback
   * @returns {object} - Resultado da execu√ß√£o
   */
  static async executeMarketFallback({
    market,
    side,
    quantity,
    botName,
    originalSignalData,
    entryPrice,
    config = null,
  }) {
    try {
      Logger.info(
        `‚ö° [${botName}] ${market}: Executando fallback a MERCADO para garantir entrada...`
      );

      const marketBody = {
        symbol: market,
        side,
        orderType: 'Market',
        quantity,
        timeInForce: 'IOC',
        selfTradePrevention: 'RejectTaker',
        clientId: await OrderController.generateUniqueOrderId(config),
      };

      // SEMPRE usa credenciais do config - lan√ßa exce√ß√£o se n√£o dispon√≠vel
      if (!config?.apiKey || !config?.apiSecret) {
        throw new Error(
          'API_KEY e API_SECRET s√£o obrigat√≥rios - deve ser passado da config do bot'
        );
      }

      // üîß MIGRA√á√ÉO: Usa ExchangeManager em vez de Order direto
      const exchangeManager = OrderController.getExchangeManager(config);
      const marketResult = await exchangeManager.executeOrder(marketBody, config.apiKey, config.apiSecret);
      if (marketResult && !marketResult.error) {
        // Calcula slippage real
        const executionPrice = parseFloat(
          marketResult.price || marketResult.avgPrice || entryPrice
        );
        const slippage = OrderController.calcSlippagePct(entryPrice, executionPrice);

        Logger.info(`‚úÖ [SUCESSO] ${market}: Opera√ß√£o aberta com sucesso via fallback a MERCADO!`);
        Logger.info(
          `üìä [${botName}] ${market}: Pre√ßo de execu√ß√£o: $${executionPrice.toFixed(6)} | Slippage: ${slippage.toFixed(3)}%`
        );

        // Registra a ordem no sistema de persist√™ncia
        if (marketResult && marketResult.id && config && config.id) {
          await BotOrdersManager.addOrder(
            config.id,
            marketResult.id,
            market,
            side === 'Bid' ? 'BUY' : 'SELL',
            parseFloat(quantity),
            executionPrice,
            'MARKET',
            marketResult.exchangeCreatedAt || null,
            marketBody.clientId // Passa o clientId gerado
          );
        }

        // üîß NOVO: Detecta posi√ß√£o aberta e cria TP/SL automaticamente
        Logger.info(`üõ°Ô∏è [FAILSAFE] ${market}: Detectando posi√ß√£o aberta e criando TP/SL...`);
        OrderController.createTrackedTimeout(
          async () => {
            try {
              await OrderController.detectPositionOpenedAndCreateFailsafe(
                market,
                botName,
                {
                  ...marketResult,
                  botName,
                  executionPrice,
                },
                config
              ); // üîß CORRE√á√ÉO: Passa config com credenciais
            } catch (error) {
              Logger.error(
                `‚ùå [FAILSAFE] ${market}: Erro ao criar TP/SL autom√°tico:`,
                error.message
              );
            }
          },
          2000,
          market,
          'Failsafe TP/SL Creation'
        ); // Aguarda 2 segundos para posi√ß√£o ser registrada

        return { success: true, type: 'MARKET', marketResult, executionPrice, slippage };
      } else {
        Logger.info(
          `‚ùå [${botName}] ${market}: Fallback - Falha ao executar ordem a mercado: ${marketResult && marketResult.error}`
        );
        return { error: marketResult && marketResult.error };
      }
    } catch (error) {
      Logger.error(`‚ùå [${botName}] ${market}: Erro no fluxo h√≠brido:`, error.message);
      return { error: error.message };
    }
  }

  /**
   * M√©todo openOrder - wrapper para openHybridOrder
   * @param {object} orderData - Dados da ordem
   * @returns {object} - Resultado da execu√ß√£o da ordem
   */
  static async openOrder(orderData, config = null) {
    try {
      // Valida se os par√¢metros obrigat√≥rios est√£o presentes
      const requiredParams = [
        'entry',
        'action',
        'market',
        'decimal_quantity',
        'decimal_price',
        'stepSize_quantity',
      ];

      // Para Alpha Flow, valida 'quantity' em vez de 'volume'
      if (orderData.orderNumber) {
        requiredParams.push('quantity');
      } else {
        requiredParams.push('volume');
      }

      for (const param of requiredParams) {
        if (orderData[param] === undefined || orderData[param] === null) {
          Logger.error(`‚ùå [openOrder] Par√¢metro obrigat√≥rio ausente: ${param}`);
          return { error: `Par√¢metro obrigat√≥rio ausente: ${param}` };
        }
      }

      // Verifica se √© uma ordem da Alpha Flow Strategy (com orderNumber)
      if (orderData.orderNumber) {
        Logger.info(
          `üîÑ [openOrder] Ordem Alpha Flow detectada: ${orderData.market} (Ordem ${orderData.orderNumber})`
        );

        // Debug: Verifica os valores antes do c√°lculo
        Logger.info(`üîç [DEBUG] Valores para c√°lculo de quantidade:`);
        Logger.info(`   ‚Ä¢ Quantity: ${orderData.quantity}`);
        Logger.info(`   ‚Ä¢ Entry: ${orderData.entry}`);
        Logger.info(`   ‚Ä¢ Volume calculado: ${orderData.quantity * orderData.entry}`);

        // Usa o m√©todo espec√≠fico para ordens com triggers
        const result = await OrderController.createLimitOrderWithTriggers({
          market: orderData.market,
          action: orderData.action,
          entry: orderData.entry,
          quantity: orderData.quantity, // Usa a quantidade diretamente da ordem
          stop: orderData.stop,
          target: orderData.target,
          decimal_quantity: orderData.decimal_quantity,
          decimal_price: orderData.decimal_price,
          stepSize_quantity: orderData.stepSize_quantity,
          minQuantity: orderData.minQuantity,
          botName: orderData.botName || 'DEFAULT',
          config: config,
        });

        return result;
      } else {
        // Chama o m√©todo openHybridOrder com os dados fornecidos (estrat√©gias tradicionais)
        const result = await OrderController.openHybridOrder({
          entry: orderData.entry,
          stop: orderData.stop,
          target: orderData.target,
          action: orderData.action,
          market: orderData.market,
          volume: orderData.volume,
          decimal_quantity: orderData.decimal_quantity,
          decimal_price: orderData.decimal_price,
          stepSize_quantity: orderData.stepSize_quantity,
          minQuantity: orderData.minQuantity,
          botName: orderData.botName || 'DEFAULT',
          originalSignalData: orderData.originalSignalData,
          config: config,
        });

        return result;
      }
    } catch (error) {
      Logger.error(`‚ùå [openOrder] Erro ao executar ordem:`, error.message);
      // Retorna erro mas N√ÉO para o bot - apenas registra o erro
      return { error: error.message };
    }
  }

  static async getRecentOpenOrders(market, config = null) {
    // SEMPRE usa credenciais do config - lan√ßa exce√ß√£o se n√£o dispon√≠vel
    if (!config?.apiKey || !config?.apiSecret) {
      throw new Error('API_KEY e API_SECRET s√£o obrigat√≥rios - deve ser passado da config do bot');
    }

    // üîß MIGRA√á√ÉO: Usa ExchangeManager em vez de Order direto
    const exchangeManager = OrderController.getExchangeManager(config);
    const orders = await exchangeManager.getOpenOrdersForSymbol(market, config.apiKey, config.apiSecret);

    if (!orders || orders.length === 0) {
      return [];
    }

    // Filtra apenas ordens de entrada Limit (n√£o stop loss/take profit)
    const entryOrders = orders.filter(order => {
      // Verifica se √© uma ordem pendente
      const isPending =
        order.status === 'Pending' || order.status === 'New' || order.status === 'PartiallyFilled';

      // Verifica se √© uma ordem Limit (ordens de entrada)
      const isLimitOrder = order.orderType === 'Limit';

      // Verifica se N√ÉO √© uma ordem de stop loss ou take profit
      const isNotStopLoss = !order.stopLossTriggerPrice && !order.stopLossLimitPrice;
      const isNotTakeProfit = !order.takeProfitTriggerPrice && !order.takeProfitLimitPrice;

      // Verifica se N√ÉO √© uma ordem reduceOnly (que s√£o ordens de sa√≠da)
      const isNotReduceOnly = !order.reduceOnly;

      const isEntryOrder =
        isPending && isLimitOrder && isNotStopLoss && isNotTakeProfit && isNotReduceOnly;

      // Log detalhado para debug
      if (isPending) {
        Logger.info(
          `   üìã ${market}: ID=${order.id}, Type=${order.orderType}, Status=${order.status}, ReduceOnly=${order.reduceOnly}, StopLoss=${!!order.stopLossTriggerPrice}, TakeProfit=${!!order.takeProfitTriggerPrice} ‚Üí ${isEntryOrder ? 'ENTRADA' : 'OUTRO'}`
        );
      }

      return isEntryOrder;
    });

    const orderShorted = entryOrders.sort(
      (a, b) => new Date(a.createdAt).getTime() - new Date(b.createdAt).getTime()
    );
    return orderShorted;
  }

  /**
   * Obt√©m apenas ordens de entrada recentes (n√£o stop loss/take profit)
   * @param {string} market - S√≠mbolo do mercado
   * @returns {Array} - Lista de ordens de entrada
   */
  async getRecentEntryOrders(market) {
    // üîß MIGRA√á√ÉO: Usa ExchangeManager em vez de Order direto
    const exchangeManager = OrderController.getExchangeManager({ symbol: market });
    const orders = await exchangeManager.getOpenOrdersForSymbol(market, null, null);

    if (!orders || orders.length === 0) {
      return [];
    }

    // Filtra apenas ordens de entrada Limit (n√£o stop loss/take profit)
    const entryOrders = orders.filter(order => {
      // Verifica se √© uma ordem pendente
      const isPending =
        order.status === 'Pending' || order.status === 'New' || order.status === 'PartiallyFilled';

      // Verifica se √© uma ordem Limit (ordens de entrada)
      const isLimitOrder = order.orderType === 'Limit';

      // Verifica se N√ÉO √© uma ordem de stop loss ou take profit
      const isNotStopLoss = !order.stopLossTriggerPrice && !order.stopLossLimitPrice;
      const isNotTakeProfit = !order.takeProfitTriggerPrice && !order.takeProfitLimitPrice;

      // Verifica se N√ÉO √© uma ordem reduceOnly (que s√£o ordens de sa√≠da)
      const isNotReduceOnly = !order.reduceOnly;

      const isEntryOrder =
        isPending && isLimitOrder && isNotStopLoss && isNotTakeProfit && isNotReduceOnly;

      // Log detalhado para debug
      if (isPending) {
        Logger.info(
          `   üìã ${market}: ID=${order.id}, Type=${order.orderType}, Status=${order.status}, ReduceOnly=${order.reduceOnly}, StopLoss=${!!order.stopLossTriggerPrice}, TakeProfit=${!!order.takeProfitTriggerPrice} ‚Üí ${isEntryOrder ? 'ENTRADA' : 'OUTRO'}`
        );
      }

      return isEntryOrder;
    });

    const orderShorted = entryOrders.sort(
      (a, b) => new Date(a.createdAt).getTime() - new Date(b.createdAt).getTime()
    );
    const result = orderShorted.map(el => {
      const minutes = Utils.minutesAgo(el.createdAt);
      Logger.info(`   ‚è∞ ${market}: Ordem ${el.id} criada h√° ${minutes} minutos`);
      return {
        id: el.id,
        minutes: minutes,
        triggerPrice: parseFloat(el.triggerPrice),
        price: parseFloat(el.price),
      };
    });

    return result;
  }

  async getAllOrdersSchedule(markets_open) {
    // üîß MIGRA√á√ÉO: Usa ExchangeManager em vez de Order direto
    const exchangeManager = OrderController.getExchangeManager({});
    const orders = await exchangeManager.getOpenOrdersForSymbol(null, null, null);
    const orderShorted = orders.sort(
      (a, b) => new Date(a.createdAt).getTime() - new Date(b.createdAt).getTime()
    );

    const list = orderShorted.map(el => {
      return {
        id: el.id,
        minutes: Utils.minutesAgo(el.createdAt),
        triggerPrice: parseFloat(el.triggerPrice),
        symbol: el.symbol,
      };
    });

    return list.filter(el => !markets_open.includes(el.symbol));
  }

  async createStopTS({ symbol, price, isLong, quantity, config = null }) {
    // SEMPRE usa credenciais do config - lan√ßa exce√ß√£o se n√£o dispon√≠vel
    if (!config?.apiKey || !config?.apiSecret) {
      throw new Error('API_KEY e API_SECRET s√£o obrigat√≥rios - deve ser passado da config do bot');
    }

    const Account = await AccountController.get({
      apiKey: config.apiKey,
      apiSecret: config.apiSecret,
      strategy: config?.strategyName || 'DEFAULT',
    });

    // Verifica se os dados da conta foram carregados com sucesso
    if (!Account) {
      throw new Error('Dados da conta indispon√≠veis - n√£o √© poss√≠vel criar stop loss');
    }

    // üîß MIGRA√á√ÉO: Usa ExchangeManager para obter markets em vez de Account.markets direto
    const exchangeManager = OrderController.getExchangeManager(config || {});
    const allMarkets = await exchangeManager.getMarkets();
    const find = allMarkets.find(el => el.symbol === symbol);

    if (!find) throw new Error(`Symbol ${symbol} not found in account data`);

    const decimal_quantity = find.decimal_quantity;
    const decimal_price = find.decimal_price;
    const tickSize = find.tickSize * 10;

    if (price <= 0) throw new Error('Invalid price: must be > 0');

    price = Math.abs(price);

    // üéØ INTEGRA√á√ÉO ORDER BOOK: Ajusta pre√ßo para evitar execu√ß√£o imediata
    const adjustedPrice = await OrderBookAnalyzer.findClosestOrderBookPrice(
      symbol,
      isLong ? 'SELL' : 'BUY', // Lado da ordem de fechamento
      price,
      1.0 // Max 1% de desvio
    );

    const finalPrice = adjustedPrice || price;

    if (adjustedPrice && adjustedPrice !== price) {
      Logger.debug(
        `üìä [STOP_TS] [ORDER_BOOK] ${symbol} ajustado: $${price.toFixed(6)} ‚Üí $${adjustedPrice.toFixed(6)}`
      );
    }

    const triggerPrice = isLong ? finalPrice - tickSize : finalPrice + tickSize;
    const formatPrice = value => parseFloat(value).toFixed(decimal_price).toString();
    const formatQuantity = value => {
      if (value <= 0) {
        throw new Error(`Quantidade deve ser positiva: ${value}`);
      }
      let formatted = parseFloat(value).toFixed(decimal_quantity);
      if (parseFloat(formatted) === 0 && find.stepSize_quantity > 0) {
        return find.stepSize_quantity.toString();
      }
      return formatted.toString();
    };
    const body = {
      symbol,
      orderType: 'Limit',
      side: isLong ? 'Ask' : 'Bid',
      reduceOnly: true,
      postOnly: true,
      timeInForce: 'GTC',
      selfTradePrevention: 'RejectTaker',
      price: formatPrice(finalPrice), // üéØ Usa pre√ßo ajustado
      triggerBy: 'LastPrice',
      triggerPrice: formatPrice(triggerPrice), // üéØ Usa trigger ajustado
      triggerQuantity: formatQuantity(quantity),
      clientId: await OrderController.generateUniqueOrderId(config),
    };

    // üîß MIGRA√á√ÉO: Reutiliza ExchangeManager j√° criado acima
    const orderResult = await exchangeManager.executeOrder(body, config?.apiKey, config?.apiSecret);

    if (orderResult && orderResult.id) {
      Logger.debug(
        `‚úÖ [STOP_ORDER] ${symbol}: Stop loss criado com sucesso. ID: ${orderResult.id}`
      );

      // üîß CORRE√á√ÉO: Invalida cache ap√≥s criar SL para evitar duplica√ß√£o
      if (config?.apiKey && config?.apiSecret) {
        try {
          CacheInvalidator.onOrderCreated(config.apiKey, config.apiSecret, symbol);
          Logger.debug(
            `üßπ [STOP_ORDER] ${symbol}: Cache invalidado. Aguardando processamento da API...`
          );

          // Aguarda 1s para a ordem ser processada pela API
          await new Promise(resolve => setTimeout(resolve, 1000));
          Logger.debug(`‚úÖ [STOP_ORDER] ${symbol}: Stop loss processado com sucesso`);
        } catch (error) {
          Logger.debug(`‚ö†Ô∏è [STOP_ORDER] ${symbol}: Erro ao invalidar cache: ${error.message}`);
        }
      }

      return { success: true, orderId: orderResult.id, result: orderResult };
    } else {
      Logger.error(`‚ùå [STOP_ORDER] ${symbol}: Falha ao criar stop loss ou ID n√£o retornado.`);
      return { success: false, orderId: null, result: orderResult };
    }
  }

  /**
   * Valida se existe stop loss para uma posi√ß√£o e cria se n√£o existir
   * @param {object} position - Dados da posi√ß√£o
   * @param {string} botName - Nome √∫nico do bot
   * @param config
   * @returns {boolean} - True se stop loss foi criado ou j√° existia
   */
  static async validateAndCreateStopLoss(position, botName, config) {
    const symbol = position.symbol;

    // 1. VERIFICA O LOCK
    if (OrderController.stopLossCreationInProgress.has(symbol)) {
      Logger.debug(`üîí [${botName}] ${symbol}: Lock ativo, pulando cria√ß√£o de stop loss`);
      return false;
    }

    try {
      // 2. ADQUIRE O LOCK
      OrderController.stopLossCreationInProgress.add(symbol);
      Logger.debug(`üîí [${botName}] ${symbol}: Lock adquirido para cria√ß√£o de stop loss`);

      // SEMPRE usa credenciais do config - lan√ßa exce√ß√£o se n√£o dispon√≠vel
      if (!config?.apiKey || !config?.apiSecret) {
        throw new Error(
          'API_KEY e API_SECRET s√£o obrigat√≥rios - deve ser passado da config do bot'
        );
      }
      const apiKey = config.apiKey;
      const apiSecret = config.apiSecret;

      // Verifica se o par est√° autorizado antes de tentar criar stop loss
      const Account = await AccountController.get({
        apiKey,
        apiSecret,
        strategy: config?.strategyName || 'DEFAULT',
      });
      // üîß MIGRA√á√ÉO: Usa ExchangeManager para obter markets em vez de Account.markets direto
      const exchangeManager = OrderController.getExchangeManager(config || {});
      const allMarkets = await exchangeManager.getMarkets();
      const marketInfo = allMarkets.find(m => m.symbol === position.symbol);
      if (!marketInfo) {
        // Par n√£o autorizado - retorna silenciosamente sem tentar criar stop loss
        OrderController.debug(
          `‚ÑπÔ∏è [${botName}] ${position.symbol}: Par n√£o autorizado - pulando cria√ß√£o de stop loss`
        );
        return false;
      }

      // Verifica se j√° existe uma ordem de stop loss para esta posi√ß√£o
      Logger.debug(`üîç [${botName}] ${position.symbol}: Verificando se j√° existe stop loss...`);
      const hasStopLossOrders = await PositionUtils.hasStopLoss(position.symbol, position, config);

      if (hasStopLossOrders) {
        Logger.debug(`‚úÖ [${botName}] ${position.symbol}: Stop loss j√° existe, n√£o criando novo`);
        return true;
      }

      Logger.info(`‚ùå [${botName}] ${position.symbol}: Stop loss n√£o encontrado, criando novo...`);

      // Verifica se a posi√ß√£o tem quantidade suficiente
      const totalQuantity = Math.abs(parseFloat(position.netQuantity));
      if (totalQuantity <= 0) {
        Logger.info(
          `‚ö†Ô∏è [${botName}] ${position.symbol}: Quantidade inv√°lida para stop loss: ${totalQuantity}`
        );
        return false;
      }

      // Obt√©m informa√ß√µes do mercado
      const { decimal_price, decimal_quantity } = marketInfo;

      // Determina se √© LONG ou SHORT
      const isLong = parseFloat(position.netQuantity) > 0;

      // Calcula o pre√ßo de stop loss baseado na porcentagem definida
      const currentPrice = parseFloat(position.markPrice || position.lastPrice);
      const entryPrice = parseFloat(position.entryPrice || 0);

      // VALIDA√á√ÉO: Verifica se a alavancagem existe na Account
      if (!Account.leverage) {
        Logger.error(
          `‚ùå [STOP_LOSS_ERROR] ${position.symbol}: Alavancagem n√£o encontrada na Account`
        );
        return false;
      }

      const rawLeverage = Account.leverage;

      // VALIDA√á√ÉO: Ajusta a alavancagem baseada nas regras da Backpack
      const leverage = validateLeverageForSymbol(position.symbol, rawLeverage);

      // üõ°Ô∏è CAMADA 1: FAILSAFE DE SEGURAN√áA M√ÅXIMA (SEMPRE ATIVO)
      // Esta √© a rede de seguran√ßa final que SEMPRE deve ser criada
      const baseStopLossPct = Math.abs(config?.maxNegativePnlStopPct || -10);
      const actualStopLossPct = baseStopLossPct / leverage;

      const failsafeStopLossPrice = isLong
        ? entryPrice * (1 - actualStopLossPct / 100)
        : entryPrice * (1 + actualStopLossPct / 100);

      Logger.info(
        `üõ°Ô∏è [${botName}] ${position.symbol}: FAILSAFE DE SEGURAN√áA - ${baseStopLossPct}% -> ${actualStopLossPct.toFixed(2)}% (leverage ${leverage}x), Pre√ßo: $${failsafeStopLossPrice.toFixed(6)}`
      );

      // üéØ CAMADA 2: STOP LOSS T√ÅTICO (se estrat√©gia h√≠brida ativada)
      let tacticalStopLossPrice = null;
      const enableHybridStrategy = config?.enableHybridStopStrategy === true;

      if (enableHybridStrategy) {
        // Usa ATR para calcular o stop loss t√°tico (mais apertado)
        const markets = new Markets();
        const atrValue = await OrderController.calculateATR(
          await markets.getKLines(position.symbol, config?.time || '30m', 30),
          14
        );

        if (atrValue && atrValue > 0) {
          const atrMultiplier = Number(config?.initialStopAtrMultiplier || 2.0);
          const atrDistance = atrValue * atrMultiplier;

          tacticalStopLossPrice = isLong ? currentPrice - atrDistance : currentPrice + atrDistance;

          Logger.info(
            `üéØ [${botName}] ${position.symbol}: STOP T√ÅTICO ATR - ATR: ${atrValue.toFixed(6)}, Multiplicador: ${atrMultiplier}, Dist√¢ncia: ${atrDistance.toFixed(6)}, Pre√ßo: $${tacticalStopLossPrice.toFixed(6)}`
          );
        } else {
          Logger.info(`‚ö†Ô∏è [${botName}] ${position.symbol}: ATR n√£o dispon√≠vel para stop t√°tico`);
        }
      }

      const stopLossPrice =
        tacticalStopLossPrice &&
        ((isLong && tacticalStopLossPrice > failsafeStopLossPrice) ||
          (!isLong && tacticalStopLossPrice < failsafeStopLossPrice))
          ? tacticalStopLossPrice
          : failsafeStopLossPrice;

      Logger.info(
        `‚úÖ [${botName}] ${position.symbol}: Stop Loss Final - $${stopLossPrice.toFixed(6)} (${tacticalStopLossPrice ? 'T√°tico ATR' : 'Failsafe Tradicional'})`
      );

      Logger.info(
        `üõ°Ô∏è [FAILSAFE] ${position.symbol}: Ordem de seguran√ßa m√°xima (${baseStopLossPct}% PnL) enviada para a corretora com gatilho em $${failsafeStopLossPrice.toFixed(4)}.`
      );

      try {
        const formatPrice = value => parseFloat(value).toFixed(decimal_price).toString();
        const formatQuantity = value => {
          if (value <= 0) {
            throw new Error(`Quantidade deve ser positiva: ${value}`);
          }
          let formatted = parseFloat(value).toFixed(decimal_quantity);
          if (parseFloat(formatted) === 0 && marketInfo.stepSize_quantity > 0) {
            return marketInfo.stepSize_quantity.toString();
          }
          return formatted.toString();
        };

        const stopBody = {
          symbol: position.symbol,
          side: isLong ? 'Ask' : 'Bid',
          orderType: 'Market',
          reduceOnly: true,
          quantity: formatQuantity(totalQuantity),
          triggerPrice: formatPrice(stopLossPrice),
          triggerQuantity: formatQuantity(totalQuantity),
          timeInForce: 'GTC',
          clientId: await OrderController.generateUniqueOrderId(config),
        };

        Logger.info(
          `üîÑ [${botName}] ${position.symbol}: Criando stop loss - Trigger Price: $${stopLossPrice.toFixed(6)}`
        );

        // üîß MIGRA√á√ÉO: Usa ExchangeManager em vez de Order direto
        const exchangeManager = OrderController.getExchangeManager(config);
        const stopResult = await exchangeManager.executeOrder(stopBody, config?.apiKey, config?.apiSecret);

        if (stopResult && !stopResult.error) {
          Logger.info(
            `‚úÖ [${botName}] ${position.symbol}: Stop loss criado com sucesso! - Trigger: $${stopLossPrice.toFixed(6)}, Quantidade: ${totalQuantity}`
          );
          const positionKey = `${botName}_${position.symbol}`;
          OrderController.validatedStopLossPositions.add(positionKey);

          OrderController.clearStopLossCheckCache(position.symbol);

          CacheInvalidator.onOrderCreated(config.apiKey, config.apiSecret, position.symbol);

          Logger.info(
            `üßπ [${botName}] ${position.symbol}: Cache invalidado. Aguardando 2s para processamento da API...`
          );
          await new Promise(resolve => setTimeout(resolve, 2000));

          Logger.info(
            `‚úÖ [${botName}] ${position.symbol}: Stop loss criado e processado com sucesso!`
          );
          return true;
        } else {
          const errorMsg = stopResult && stopResult.error ? stopResult.error : 'desconhecido';
          Logger.info(
            `‚ùå [${botName}] ${position.symbol}: Falha ao criar stop loss - Erro: ${errorMsg}`
          );
          return false;
        }
      } catch (error) {
        Logger.info(
          `‚ùå [${botName}] ${position.symbol}: Erro ao criar stop loss: ${error.message}`
        );
        return false;
      }
    } catch (error) {
      Logger.error(
        `‚ùå [${botName}] Erro ao validar/criar stop loss para ${position.symbol}:`,
        error.message
      );
      return false;
    } finally {
      OrderController.stopLossCreationInProgress.delete(symbol);
      Logger.debug(`üîì [${botName}] ${symbol}: Lock liberado ap√≥s cria√ß√£o de stop loss`);
    }
  }

  /**
   * Remove posi√ß√£o do cache de stop loss validado (quando posi√ß√£o √© fechada)
   * @param {string} symbol - S√≠mbolo do mercado
   * @param {string} botName - Nome √∫nico do bot
   */
  static removeFromStopLossCache(symbol, botName) {
    const positionKey = `${botName}_${symbol}`;
    OrderController.validatedStopLossPositions.delete(positionKey);
  }

  /**
   * Valida se existe take profit para uma posi√ß√£o e cria se n√£o existir
   * @param {object} position - Dados da posi√ß√£o
   * @param {string} botName - Nome √∫nico do bot
   * @returns {boolean} - True se take profit foi criado ou j√° existia
   */
  static async validateAndCreateTakeProfit(position, botName, config = null) {
    const symbol = position.symbol;

    // 1. VERIFICA O LOCK
    if (OrderController.takeProfitCreationInProgress.has(symbol)) {
      Logger.debug(`üîí [${botName}] ${symbol}: Lock ativo, pulando cria√ß√£o de take profit`);
      return false;
    }

    try {
      // 2. ADQUIRE O LOCK
      OrderController.takeProfitCreationInProgress.add(symbol);
      Logger.debug(`üîí [${botName}] ${symbol}: Lock adquirido para cria√ß√£o de take profit`);

      // SEMPRE usa credenciais do config - lan√ßa exce√ß√£o se n√£o dispon√≠vel
      if (!config?.apiKey || !config?.apiSecret) {
        throw new Error(
          'API_KEY e API_SECRET s√£o obrigat√≥rios - deve ser passado da config do bot'
        );
      }
      const apiKey = config.apiKey;
      const apiSecret = config.apiSecret;

      // Verifica se o par est√° autorizado antes de tentar criar take profit
      const Account = await AccountController.get({
        apiKey,
        apiSecret,
        strategy: config?.strategyName || 'DEFAULT',
      });
      // üîß MIGRA√á√ÉO: Usa ExchangeManager para obter markets em vez de Account.markets direto
      const exchangeManager = OrderController.getExchangeManager(config || {});
      const allMarkets = await exchangeManager.getMarkets();
      const marketInfo = allMarkets.find(m => m.symbol === position.symbol);
      if (!marketInfo) {
        // Par n√£o autorizado - retorna silenciosamente sem tentar criar take profit
        OrderController.debug(
          `‚ÑπÔ∏è [${botName}] ${position.symbol}: Par n√£o autorizado - pulando cria√ß√£o de take profit`
        );
        return { success: false, message: `Par n√£o autorizado - pulando cria√ß√£o de take profit` };
      }

      // Verifica se j√° existe uma ordem de take profit para esta posi√ß√£o
      Logger.info(`üîç [${botName}] ${position.symbol}: Verificando se j√° existe take profit...`);
      const hasTakeProfitOrders = await OrderController.hasTakeProfitOrder(
        position.symbol,
        position,
        config
      );

      if (hasTakeProfitOrders) {
        Logger.info(`‚úÖ [${botName}] ${position.symbol}: Take profit j√° existe, n√£o criando novo`);
        return { success: true, message: `Take profit j√° existe, n√£o criando novo` };
      }

      Logger.info(
        `‚ùå [${botName}] ${position.symbol}: Take profit n√£o encontrado, criando novo...`
      );

      // Verifica se a posi√ß√£o tem quantidade suficiente
      const totalQuantity = Math.abs(parseFloat(position.netQuantity));
      if (totalQuantity <= 0) {
        Logger.info(
          `‚ö†Ô∏è [${botName}] ${position.symbol}: Quantidade inv√°lida para take profit: ${totalQuantity}`
        );
        return {
          success: false,
          message: `Quantidade inv√°lida para take profit: ${totalQuantity}`,
        };
      }

      const takeProfitResult = await OrderController.createTakeProfitForPosition(position, config);

      if (takeProfitResult && !takeProfitResult.message) {
        Logger.info(`‚úÖ [${botName}] ${position.symbol}: Take profit criado com sucesso!`);

        // Atualiza o cache para refletir que agora EXISTE take profit
        const cacheKey = `${position.symbol}_TP_${position.netQuantity > 0 ? 'LONG' : 'SHORT'}`;
        OrderController.takeProfitCheckCache.set(cacheKey, {
          lastCheck: Date.now(),
          hasTakeProfit: true,
        });

        Logger.info(
          `üßπ [${botName}] ${position.symbol}: Cache de take profit atualizado para TRUE ap√≥s cria√ß√£o`
        );
        return { success: true, message: `Cache de take profit atualizado para TRUE ap√≥s cria√ß√£o` };
      } else {
        const errorMsg =
          takeProfitResult && takeProfitResult.message ? takeProfitResult.message : 'Desconhecido';
        Logger.info(
          `‚ùå [${botName}] ${position.symbol}: Falha ao criar take profit - Erro: ${errorMsg}`
        );
        return { success: false, message: `Falha ao criar take profit - Erro: ${errorMsg}` };
      }
    } catch (error) {
      Logger.error(
        `‚ùå [${botName}] Erro ao validar/criar take profit para ${position.symbol}:`,
        error.message
      );
      return false;
    } finally {
      OrderController.takeProfitCreationInProgress.delete(symbol);
      Logger.debug(`üîì [${botName}] ${symbol}: Lock liberado ap√≥s cria√ß√£o de take profit`);
    }
  }

  /**
   * Calcula o ATR (Average True Range) manualmente
   * @param {Array} candles - Array de candles
   * @param {number} period - Per√≠odo para o c√°lculo (padr√£o 14)
   * @returns {number|null} - Valor do ATR ou null se n√£o conseguir calcular
   */
  static calculateATR(candles, period = 14) {
    try {
      if (!candles || candles.length < period + 1) {
        Logger.warn(
          `‚ö†Ô∏è ATR: Dados insuficientes. Necess√°rio: ${period + 1}, Dispon√≠vel: ${candles?.length || 0}`
        );
        return null;
      }

      // Calcula True Range para cada candle
      const trueRanges = [];
      for (let i = 1; i < candles.length; i++) {
        const current = candles[i];
        const previous = candles[i - 1];

        const high = parseFloat(current.high);
        const low = parseFloat(current.low);
        const prevClose = parseFloat(previous.close);

        const tr1 = high - low; // High - Low
        const tr2 = Math.abs(high - prevClose); // |High - Previous Close|
        const tr3 = Math.abs(low - prevClose); // |Low - Previous Close|

        const trueRange = Math.max(tr1, tr2, tr3);
        trueRanges.push(trueRange);
      }

      // Calcula ATR como m√©dia m√≥vel simples dos True Ranges
      if (trueRanges.length < period) {
        return null;
      }

      const atrValues = trueRanges.slice(-period);
      const atr = atrValues.reduce((sum, tr) => sum + tr, 0) / period;

      return atr;
    } catch (error) {
      Logger.error('‚ùå Erro ao calcular ATR:', error.message);
      return null;
    }
  }

  /**
   * Valida se o limite de posi√ß√µes abertas foi atingido
   * @param {string} botName - Nome √∫nico do bot para logs
   * @param {string} apiKey - API Key do bot
   * @param {string} apiSecret - API Secret do bot
   * @param {object} config - Configura√ß√£o do bot (opcional)
   * @returns {object} - { isValid: boolean, message: string, currentCount: number, maxCount: number }
   */
  static async validateMaxOpenTrades(
    botName = 'DEFAULT',
    apiKey = null,
    apiSecret = null,
    config = null,
    forceRefresh = false
  ) {
    try {
      // Se forceRefresh for true, for√ßa busca na exchange (usado quando h√° suspeita de dados stale)
      // üîß MIGRA√á√ÉO: Usa ExchangeManager em vez de Futures direto
      const exchangeManager = OrderController.getExchangeManager({ apiKey, apiSecret });
      const positions = forceRefresh
        ? await exchangeManager.getFuturesPositionsForceRefresh(apiKey, apiSecret)
        : await exchangeManager.getFuturesPositions(apiKey, apiSecret);

      // üö® VALIDA√á√ÉO CR√çTICA: Verifica se positions √© um array v√°lido
      if (!Array.isArray(positions)) {
        Logger.error(
          `‚ùå [${botName}] positions n√£o √© um array v√°lido - type: ${typeof positions}, value:`,
          positions
        );
        return {
          isValid: false,
          message: `Erro na valida√ß√£o: positions retornado como ${typeof positions} (esperado array)`,
          currentCount: 0,
          maxCount: 0,
        };
      }

      const maxOpenTrades = Number(config?.maxOpenOrders || 5);
      const currentOpenPositions = positions.filter(
        p => Math.abs(Number(p.netQuantity)) > 0
      ).length;

      // Debug log para verificar a valida√ß√£o
      const refreshMethod = forceRefresh ? 'FORCE_REFRESH' : 'CACHE_OK';
      Logger.debug(
        `üîç [MAX_ORDERS_CHECK] ${botName}: ${currentOpenPositions}/${maxOpenTrades} posi√ß√µes abertas (${refreshMethod}, config.maxOpenOrders: ${config?.maxOpenOrders})`
      );

      if (currentOpenPositions >= maxOpenTrades) {
        return {
          isValid: false,
          message: `üö´ M√°ximo de ordens atingido: ${currentOpenPositions}/${maxOpenTrades} posi√ß√µes abertas`,
          currentCount: currentOpenPositions,
          maxCount: maxOpenTrades,
        };
      }

      return {
        isValid: true,
        message: `‚úÖ Posi√ß√µes abertas: ${currentOpenPositions}/${maxOpenTrades}`,
        currentCount: currentOpenPositions,
        maxCount: maxOpenTrades,
      };
    } catch (error) {
      Logger.error(`‚ùå [${botName}] Erro ao validar m√°ximo de ordens:`, error.message);
      return {
        isValid: false,
        message: `Erro ao validar m√°ximo de ordens: ${error.message}`,
        currentCount: 0,
        maxCount: 0,
      };
    }
  }

  /**
   * Cria ordens de seguran√ßa (failsafe) para uma posi√ß√£o rec√©m-aberta
   * Implementa c√°lculo correto considerando alavancagem
   * @param {object} position - Dados da posi√ß√£o
   * @param {string} botName - Nome √∫nico do bot
   * @param {object} config - Configura√ß√£o do bot (opcional)
   * @returns {object} - Resultado da cria√ß√£o das ordens
   */
  static async createFailsafeOrders(position, botName = 'DEFAULT', config = null) {
    try {
      // Usa credenciais do config se dispon√≠vel
      const apiKey = config?.apiKey;
      const apiSecret = config?.apiSecret;

      if (!apiKey || !apiSecret) {
        Logger.error(`‚ùå [FAILSAFE] Credenciais de API n√£o fornecidas para ${position.symbol}`);
        return { error: 'Credenciais de API n√£o fornecidas' };
      }

      // Busca informa√ß√µes do mercado
      const Account = await AccountController.get({
        apiKey,
        apiSecret,
        strategy: config?.strategyName || 'DEFAULT',
      });
      // üîß MIGRA√á√ÉO: Usa ExchangeManager para obter markets em vez de Account.markets direto
      const exchangeManager = OrderController.getExchangeManager(config || {});
      const allMarkets = await exchangeManager.getMarkets();
      const marketInfo = allMarkets.find(m => m.symbol === position.symbol);
      if (!marketInfo) {
        Logger.error(`‚ùå [FAILSAFE] Market info n√£o encontrada para ${position.symbol}`);
        return { error: 'Market info n√£o encontrada' };
      }

      // VERIFICA√á√ÉO ADICIONAL: Verifica se j√° existe stop loss antes de criar
      const hasStopLossOrders = await PositionUtils.hasStopLoss(position.symbol, position, config);

      if (hasStopLossOrders) {
        Logger.info(
          `‚úÖ [FAILSAFE] ${position.symbol}: Stop loss j√° existe, pulando cria√ß√£o de failsafe orders`
        );
        return { success: true, message: 'Stop loss j√° existe' };
      }

      const decimal_quantity = marketInfo.decimal_quantity;
      const decimal_price = marketInfo.decimal_price;

      // 1. Obter os dados necess√°rios da posi√ß√£o e da configura√ß√£o
      const entryPrice = parseFloat(
        position.avgEntryPrice || position.entryPrice || position.markPrice
      );
      const leverage = parseFloat(position.leverage || Account.leverage || 20); // Fallback para 20x se n√£o dispon√≠vel
      const targetProfitPct = parseFloat(config?.minProfitPercentage || 0.5); // ex: 0.5
      const stopLossPct = Math.abs(parseFloat(config?.maxNegativePnlStopPct || 4.0)); // ex: 4.0 (usa valor absoluto)
      const isLong = parseFloat(position.netQuantity) > 0;
      const totalQuantity = Math.abs(Number(position.netQuantity));

      // Debug das vari√°veis de configura√ß√£o
      Logger.info(`üîç [FAILSAFE_VARS] ${position.symbol}: Vari√°veis de configura√ß√£o`);
      Logger.info(
        `   ‚Ä¢ MIN_PROFIT_PERCENTAGE: ${config?.minProfitPercentage || 'n√£o definido'} -> ${targetProfitPct}%`
      );
      Logger.info(
        `   ‚Ä¢ MAX_NEGATIVE_PNL_STOP_PCT: ${config?.maxNegativePnlStopPct || 'n√£o definido'} -> ${stopLossPct}%`
      );
      Logger.info(`   ‚Ä¢ Leverage: ${leverage}x`);

      // 2. Calcular os pre√ßos de gatilho considerando alavancagem
      let takeProfitPrice;
      let stopLossPrice;

      if (isLong) {
        // Se a posi√ß√£o for de COMPRA (LONG)
        // O lucro acontece quando o pre√ßo sobe
        takeProfitPrice = entryPrice * (1 + targetProfitPct / 100 / leverage);
        // A perda acontece quando o pre√ßo cai
        stopLossPrice = entryPrice * (1 - stopLossPct / 100 / leverage);
      } else {
        // Se a posi√ß√£o for de VENDA (SHORT)
        // O lucro acontece quando o pre√ßo cai (take profit abaixo do pre√ßo de entrada)
        takeProfitPrice = entryPrice * (1 - targetProfitPct / 100 / leverage);
        // A perda acontece quando o pre√ßo sobe (stop loss acima do pre√ßo de entrada)
        stopLossPrice = entryPrice * (1 + stopLossPct / 100 / leverage);
      }

      // Log adicional para debug da l√≥gica
      Logger.info(`üîç [FAILSAFE_LOGIC] ${position.symbol}: L√≥gica de c√°lculo`);
      Logger.info(
        `   ‚Ä¢ Posi√ß√£o: ${isLong ? 'LONG' : 'SHORT'} (quantidade: ${position.netQuantity})`
      );
      Logger.info(
        `   ‚Ä¢ Para ${isLong ? 'LONG' : 'SHORT'}: TP ${isLong ? 'acima' : 'abaixo'} do pre√ßo, SL ${isLong ? 'abaixo' : 'acima'} do pre√ßo`
      );

      // 3. Logar os pre√ßos calculados para verifica√ß√£o
      Logger.info(
        `üõ°Ô∏è [FAILSAFE_CALC] ${position.symbol}: Entry=${entryPrice.toFixed(6)}, Leverage=${leverage}x`
      );
      Logger.info(
        `  -> TP Target: ${targetProfitPct}% -> Pre√ßo Alvo: $${takeProfitPrice.toFixed(6)}`
      );
      Logger.info(`  -> SL Target: ${stopLossPct}% -> Pre√ßo Alvo: $${stopLossPrice.toFixed(6)}`);

      // üõ°Ô∏è LOG DE ALTA VISIBILIDADE - ORDEM DE SEGURAN√áA M√ÅXIMA
      Logger.info(
        `üõ°Ô∏è [FAILSAFE] ${position.symbol}: Ordem de seguran√ßa m√°xima (${stopLossPct}% PnL) enviada para a corretora com gatilho em $${stopLossPrice.toFixed(4)}.`
      );

      // Valida se os pre√ßos s√£o v√°lidos
      if (stopLossPrice <= 0 || takeProfitPrice <= 0) {
        Logger.error(
          `‚ùå [FAILSAFE] ${position.symbol}: Pre√ßos calculados inv√°lidos - SL: ${stopLossPrice}, TP: ${takeProfitPrice}`
        );
        return { error: 'Pre√ßos calculados inv√°lidos' };
      }

      // Valida dist√¢ncia m√≠nima dos pre√ßos (0.1% do pre√ßo de entrada)
      const minDistance = entryPrice * 0.001; // 0.1%
      const currentPrice = parseFloat(position.markPrice || entryPrice);

      Logger.info(`üîç [FAILSAFE_DEBUG] ${position.symbol}: Validando dist√¢ncias m√≠nimas`);
      Logger.info(`   ‚Ä¢ Pre√ßo atual: $${currentPrice.toFixed(6)}`);
      Logger.info(`   ‚Ä¢ Dist√¢ncia m√≠nima: $${minDistance.toFixed(6)}`);

      const slDistance = Math.abs(stopLossPrice - currentPrice);
      const tpDistance = Math.abs(takeProfitPrice - currentPrice);

      Logger.info(
        `   ‚Ä¢ Dist√¢ncia SL: $${slDistance.toFixed(6)} (${slDistance < minDistance ? 'MUITO PR√ìXIMO' : 'OK'})`
      );
      Logger.info(
        `   ‚Ä¢ Dist√¢ncia TP: $${tpDistance.toFixed(6)} (${tpDistance < minDistance ? 'MUITO PR√ìXIMO' : 'OK'})`
      );

      if (slDistance < minDistance) {
        Logger.warn(
          `‚ö†Ô∏è [FAILSAFE] ${position.symbol}: Stop Loss muito pr√≥ximo do pre√ßo atual (${slDistance.toFixed(6)} < ${minDistance.toFixed(6)})`
        );
        const newStopLossPrice = currentPrice + (isLong ? -minDistance : minDistance);
        Logger.warn(
          `   ‚Ä¢ Ajustando Stop Loss de ${stopLossPrice.toFixed(6)} para ${newStopLossPrice.toFixed(6)}`
        );
        stopLossPrice = newStopLossPrice;
      }

      if (tpDistance < minDistance) {
        Logger.warn(
          `‚ö†Ô∏è [FAILSAFE] ${position.symbol}: Take Profit muito pr√≥ximo do pre√ßo atual (${tpDistance.toFixed(6)} < ${minDistance.toFixed(6)})`
        );
        const newTakeProfitPrice = currentPrice + (isLong ? minDistance : -minDistance);
        Logger.warn(
          `   ‚Ä¢ Ajustando Take Profit de ${takeProfitPrice.toFixed(6)} para ${newTakeProfitPrice.toFixed(6)}`
        );
        takeProfitPrice = newTakeProfitPrice;
      }

      // Fun√ß√µes de formata√ß√£o
      const formatPrice = value => parseFloat(value).toFixed(decimal_price).toString();
      const formatQuantity = value => {
        if (value <= 0) {
          throw new Error(`Quantidade deve ser positiva: ${value}`);
        }
        let formatted = parseFloat(value).toFixed(decimal_quantity);
        if (parseFloat(formatted) === 0 && marketInfo.stepSize_quantity > 0) {
          return marketInfo.stepSize_quantity.toString();
        }
        return formatted.toString();
      };

      // Verifica se o Trailing Stop est√° habilitado para determinar se deve criar Take Profit fixo
      const enableTrailingStop = config?.enableTrailingStop === true;

      Logger.info(`üõ°Ô∏è [FAILSAFE] ${position.symbol}: Criando ordens de seguran√ßa`);
      Logger.info(`   ‚Ä¢ Pre√ßo de entrada: $${entryPrice.toFixed(6)}`);
      Logger.info(
        `   ‚Ä¢ Stop Loss: $${stopLossPrice.toFixed(6)} (${stopLossPct}% com ${leverage}x leverage)`
      );

      if (enableTrailingStop) {
        Logger.info(`   ‚Ä¢ Take Profit: Ser√° gerenciado dinamicamente pelo Trailing Stop`);
      } else {
        Logger.info(
          `   ‚Ä¢ Take Profit: $${takeProfitPrice.toFixed(6)} (${targetProfitPct}% com ${leverage}x leverage)`
        );
      }
      Logger.info(`   ‚Ä¢ Quantidade: ${totalQuantity}`);

      // 4. Cria ordem de Stop Loss (STOP_MARKET com reduceOnly) - SEMPRE criada
      const stopLossBody = {
        symbol: position.symbol,
        side: isLong ? 'Ask' : 'Bid', // Para LONG, vende (Ask) para fechar. Para SHORT, compra (Bid) para fechar
        orderType: 'Limit',
        reduceOnly: true,
        quantity: formatQuantity(totalQuantity),
        price: formatPrice(stopLossPrice),
        stopLossTriggerBy: 'LastPrice',
        stopLossTriggerPrice: formatPrice(stopLossPrice),
        stopLossLimitPrice: formatPrice(stopLossPrice),
        timeInForce: 'GTC',
        selfTradePrevention: 'RejectTaker',
        clientId: await OrderController.generateUniqueOrderId(config),
      };

      // 5. Cria ordem de Take Profit APENAS se o Trailing Stop estiver desabilitado
      let takeProfitBody = null;
      if (!enableTrailingStop) {
        takeProfitBody = {
          symbol: position.symbol,
          side: isLong ? 'Ask' : 'Bid', // Para LONG, vende (Ask) para fechar. Para SHORT, compra (Bid) para fechar
          orderType: 'Limit',
          reduceOnly: true,
          quantity: formatQuantity(totalQuantity),
          price: formatPrice(takeProfitPrice),
          takeProfitTriggerBy: 'LastPrice',
          takeProfitTriggerPrice: formatPrice(takeProfitPrice),
          takeProfitLimitPrice: formatPrice(takeProfitPrice),
          timeInForce: 'GTC',
          selfTradePrevention: 'RejectTaker',
          clientId: await OrderController.generateUniqueOrderId(config),
        };
      }

      // 6. Envia ordens para a corretora
      // üîß MIGRA√á√ÉO: Reutiliza ExchangeManager j√° criado acima
      const stopLossResult = await exchangeManager.executeOrder(
        stopLossBody,
        config?.apiKey,
        config?.apiSecret
      );
      let takeProfitResult = null;

      if (takeProfitBody) {
        // üîß MIGRA√á√ÉO: Usa ExchangeManager em vez de Order direto
        takeProfitResult = await exchangeManager.executeOrder(
          takeProfitBody,
          config?.apiKey,
          config?.apiSecret
        );
      }

      // 7. Verifica resultados
      let successCount = 0;
      let errorMessages = [];

      if (stopLossResult && !stopLossResult.error) {
        Logger.info(
          `‚úÖ [FAILSAFE] ${position.symbol}: Stop Loss criado - OrderID: ${stopLossResult.id || 'N/A'}`
        );
        successCount++;
      } else {
        const error = stopLossResult?.error || 'desconhecido';
        Logger.info(`‚ùå [FAILSAFE] ${position.symbol}: Stop Loss FALHOU - Motivo: ${error}`);
        errorMessages.push(`Stop Loss: ${error}`);
      }

      if (enableTrailingStop) {
        // Se o Trailing Stop est√° ativo, n√£o criamos Take Profit fixo
        Logger.info(
          `‚ÑπÔ∏è [FAILSAFE] ${position.symbol}: Take Profit ser√° gerenciado dinamicamente pelo Trailing Stop`
        );
      } else if (takeProfitResult && !takeProfitResult.error) {
        Logger.info(
          `‚úÖ [FAILSAFE] ${position.symbol}: Take Profit criado - OrderID: ${takeProfitResult.id || 'N/A'}`
        );
        successCount++;
      } else if (takeProfitResult && takeProfitResult.error) {
        const error = takeProfitResult.error || 'desconhecido';
        Logger.info(`‚ùå [FAILSAFE] ${position.symbol}: Take Profit FALHOU - Motivo: ${error}`);
        errorMessages.push(`Take Profit: ${error}`);
      }

      // 8. Log final
      if (enableTrailingStop) {
        // Quando Trailing Stop est√° ativo, s√≥ precisamos do Stop Loss
        if (successCount === 1) {
          Logger.info(`üõ°Ô∏è [FAILSAFE] ${position.symbol}: Ordem de seguran√ßa criada com sucesso!`);
          Logger.info(`   ‚Ä¢ Stop Loss em $${stopLossPrice.toFixed(6)}`);
          Logger.info(`   ‚Ä¢ Take Profit ser√° gerenciado dinamicamente pelo Trailing Stop`);
          return { success: true, stopLossResult, takeProfitResult: null };
        } else {
          Logger.info(`‚ùå [FAILSAFE] ${position.symbol}: Falha ao criar Stop Loss`);
          return { error: errorMessages.join(', ') };
        }
      } else {
        // Quando Trailing Stop est√° desabilitado, precisamos de ambas as ordens
        if (successCount === 2) {
          Logger.info(`üõ°Ô∏è [FAILSAFE] ${position.symbol}: Ordens de seguran√ßa criadas com sucesso!`);
          Logger.info(`   ‚Ä¢ Stop Loss em $${stopLossPrice.toFixed(6)}`);
          Logger.info(`   ‚Ä¢ Take Profit em $${takeProfitPrice.toFixed(6)}`);
          return { success: true, stopLossResult, takeProfitResult };
        } else if (successCount === 1) {
          Logger.info(`‚ö†Ô∏è [FAILSAFE] ${position.symbol}: Apenas uma ordem de seguran√ßa foi criada`);
          return { partial: true, stopLossResult, takeProfitResult, errors: errorMessages };
        } else {
          Logger.info(`‚ùå [FAILSAFE] ${position.symbol}: Falha ao criar ordens de seguran√ßa`);
          return { error: errorMessages.join(', ') };
        }
      }
    } catch (error) {
      Logger.error(
        `‚ùå [FAILSAFE] Erro ao criar ordens de seguran√ßa para ${position.symbol}:`,
        error.message
      );
      return { error: error.message };
    }
  }

  /**
   * Detecta quando uma posi√ß√£o √© aberta e cria ordens de seguran√ßa (failsafe)
   * @param {string} market - S√≠mbolo do mercado
   * @param {string} botName - Nome do bot
   * @param {object} orderResult - Resultado da ordem de entrada
   * @param config
   * @returns {object} - Resultado da cria√ß√£o das ordens de seguran√ßa
   */
  static async detectPositionOpenedAndCreateFailsafe(market, botName, orderResult, config = null) {
    try {
      // Aguarda um momento para a posi√ß√£o ser registrada
      await new Promise(resolve => setTimeout(resolve, 2000));

      // Busca posi√ß√µes abertas
      // üîß MIGRA√á√ÉO: Usa ExchangeManager em vez de Futures direto
      const exchangeManager = OrderController.getExchangeManager(config);
      const positions = await exchangeManager.getFuturesPositions(config?.apiKey, config?.apiSecret);
      const position = positions?.find(
        p => p.symbol === market && Math.abs(Number(p.netQuantity)) > 0
      );

      if (!position) {
        Logger.info(`‚ö†Ô∏è [FAILSAFE] ${market}: Posi√ß√£o n√£o encontrada ap√≥s abertura`);
        return { error: 'Posi√ß√£o n√£o encontrada' };
      }

      Logger.info(`üéØ [FAILSAFE] ${market}: Posi√ß√£o detectada, criando ordens de seguran√ßa...`);

      if (orderResult && orderResult.botName) {
        try {
          const trailingStateMap = TrailingStop.trailingStateByBot;
          let trailingState = null;

          for (const [botKey, stateMap] of trailingStateMap.entries()) {
            if (stateMap.has(market)) {
              trailingState = stateMap.get(market);
              break;
            }
          }

          if (trailingState) {
            trailingState.botName = orderResult.botName;

            if (orderResult.botName === 'AlphaFlowStrategy' && orderResult.target) {
              trailingState.takeProfitPrice = orderResult.target;
              Logger.info(
                `üìã [STRATEGY_TAG] ${market}: Bot marcado como "${orderResult.botName}" com alvo $${orderResult.target}`
              );
            } else {
              Logger.info(`üìã [STRATEGY_TAG] ${market}: Bot marcado como "${orderResult.botName}"`);
            }

            // Validate position has required symbol before creating trailing stop
            if (position && position.symbol) {
              await TrailingStop.createTrailingStopOrder(
                position,
                trailingState,
                String(config?.id), // üîß Convert to string for TrailingStop validation
                config
              );
            } else {
              Logger.warn(
                `‚ö†Ô∏è [VALIDATION] Position missing symbol field, skipping trailing stop creation:`,
                position
              );
            }
          }
        } catch (trailingError) {
          Logger.warn(
            `‚ö†Ô∏è [FAILSAFE] ${market}: Erro ao atualizar estado do trailing stop:`,
            trailingError.message
          );
        }
      }

      // Cria ordens de seguran√ßa
      const failsafeResult = await OrderController.createFailsafeOrders(position, botName, config);

      if (failsafeResult.success) {
        Logger.info(`üõ°Ô∏è [FAILSAFE] ${market}: Rede de seguran√ßa ativada com sucesso!`);
      } else if (failsafeResult.partial) {
        Logger.info(`‚ö†Ô∏è [FAILSAFE] ${market}: Rede de seguran√ßa parcialmente ativada`);
      } else {
        Logger.info(`‚ùå [FAILSAFE] ${market}: Falha ao ativar rede de seguran√ßa`);
      }

      return failsafeResult;
    } catch (error) {
      Logger.error(`‚ùå [FAILSAFE] Erro ao detectar posi√ß√£o aberta para ${market}:`, error.message);
      return { error: error.message };
    }
  }

  /**
   * Cancela ordens de seguran√ßa (failsafe) para um s√≠mbolo
   * @param {string} symbol - S√≠mbolo do mercado
   * @param {string} botName - Nome √∫nico do bot
   * @returns {boolean} - True se as ordens foram canceladas com sucesso
   */
  static async cancelFailsafeOrders(symbol, botName = 'DEFAULT', config = null) {
    try {
      // SEMPRE usa credenciais do config - lan√ßa exce√ß√£o se n√£o dispon√≠vel
      if (!config?.apiKey || !config?.apiSecret) {
        throw new Error(
          'API_KEY e API_SECRET s√£o obrigat√≥rios - deve ser passado da config do bot'
        );
      }
      const apiKey = config.apiKey;
      const apiSecret = config.apiSecret;

      // Busca ordens abertas para o s√≠mbolo
      // üîß MIGRA√á√ÉO: Usa ExchangeManager em vez de Order direto
      const exchangeManager = OrderController.getExchangeManager({ apiKey, apiSecret });
      const openOrders = await exchangeManager.getOpenOrdersForSymbol(symbol, apiKey, apiSecret);

      if (!openOrders || openOrders.length === 0) {
        return true;
      }

      // Filtra apenas ordens de seguran√ßa (stop loss e take profit com reduceOnly)
      const failsafeOrders = openOrders.filter(order => {
        const isReduceOnly = order.reduceOnly;
        const hasStopLoss = order.stopLossTriggerPrice || order.stopLossLimitPrice;
        const hasTakeProfit = order.takeProfitTriggerPrice || order.takeProfitLimitPrice;
        const isPending =
          order.status === 'Pending' ||
          order.status === 'New' ||
          order.status === 'PartiallyFilled' ||
          order.status === 'TriggerPending';

        return isReduceOnly && (hasStopLoss || hasTakeProfit) && isPending;
      });

      if (failsafeOrders.length === 0) {
        Logger.debug(
          `‚ÑπÔ∏è [FAILSAFE] ${symbol}: Nenhuma ordem de seguran√ßa encontrada para cancelar`
        );
        return true;
      }

      Logger.info(
        `üõ°Ô∏è [FAILSAFE] ${symbol}: Cancelando ${failsafeOrders.length} ordem(ns) de seguran√ßa...`
      );

      // Cancela todas as ordens de seguran√ßa
      const cancelPromises = failsafeOrders.map(async order => {
        // üîß MIGRA√á√ÉO: Usa ExchangeManager em vez de Order direto
        const exchangeManager = OrderController.getExchangeManager(config);
        const cancelResult = await exchangeManager.cancelOpenOrder(
          symbol,
          order.id,
          order.clientId,
          config?.apiKey,
          config?.apiSecret
        );

        // Se cancelamento foi bem-sucedido, atualiza status no banco
        if (cancelResult && !cancelResult.error) {
          try {
            await BotOrdersManager.updateOrder(order.id, {
              status: 'CANCELLED',
              closeTime: new Date().toISOString(),
              closeType: 'FAILSAFE_CLEANUP',
            });
            Logger.debug(
              `üìù [FAILSAFE] ${symbol}: Status da ordem ${order.id} atualizado no banco para CANCELLED`
            );
          } catch (dbError) {
            Logger.warn(
              `‚ö†Ô∏è [FAILSAFE] ${symbol}: Erro ao atualizar status da ordem ${order.id} no banco: ${dbError.message}`
            );
          }
        }

        return cancelResult;
      });

      const cancelResults = await Promise.all(cancelPromises);
      const successfulCancels = cancelResults.filter(
        result => result !== null && !result.error
      ).length;

      if (successfulCancels > 0) {
        Logger.info(
          `‚úÖ [FAILSAFE] ${symbol}: ${successfulCancels} ordem(ns) de seguran√ßa cancelada(s) com sucesso`
        );
        return true;
      } else {
        Logger.info(`‚ùå [FAILSAFE] ${symbol}: Falha ao cancelar ordens de seguran√ßa`);
        return false;
      }
    } catch (error) {
      Logger.error(
        `‚ùå [FAILSAFE] Erro ao cancelar ordens de seguran√ßa para ${symbol}:`,
        error.message
      );
      return false;
    }
  }

  /**
   * Verifica se existem ordens de seguran√ßa ativas para um s√≠mbolo
   * @param {string} symbol - S√≠mbolo do mercado
   * @param {string} botName - Nome √∫nico do bot
   * @returns {object} - { hasStopLoss: boolean, hasTakeProfit: boolean, orders: array }
   */
  static async checkFailsafeOrders(symbol, botName = 'DEFAULT', config = null) {
    try {
      // SEMPRE usa credenciais do config - lan√ßa exce√ß√£o se n√£o dispon√≠vel
      if (!config?.apiKey || !config?.apiSecret) {
        throw new Error(
          'API_KEY e API_SECRET s√£o obrigat√≥rios - deve ser passado da config do bot'
        );
      }
      const apiKey = config.apiKey;
      const apiSecret = config.apiSecret;

      // Busca ordens abertas para o s√≠mbolo
      // üîß MIGRA√á√ÉO: Usa ExchangeManager em vez de Order direto
      const exchangeManager = OrderController.getExchangeManager({ apiKey, apiSecret });
      const openOrders = await exchangeManager.getOpenOrdersForSymbol(symbol, apiKey, apiSecret);

      if (!openOrders || openOrders.length === 0) {
        return { hasStopLoss: false, hasTakeProfit: false, orders: [] };
      }

      // Filtra ordens de seguran√ßa
      const failsafeOrders = openOrders.filter(order => {
        const isReduceOnly = order.reduceOnly;
        const hasStopLoss = order.stopLossTriggerPrice || order.stopLossLimitPrice;
        const hasTakeProfit = order.takeProfitTriggerPrice || order.takeProfitLimitPrice;
        const isPending =
          order.status === 'Pending' ||
          order.status === 'New' ||
          order.status === 'PartiallyFilled' ||
          order.status === 'TriggerPending';

        return isReduceOnly && (hasStopLoss || hasTakeProfit) && isPending;
      });

      const hasStopLoss = failsafeOrders.some(
        order => order.stopLossTriggerPrice || order.stopLossLimitPrice
      );
      const hasTakeProfit = failsafeOrders.some(
        order => order.takeProfitTriggerPrice || order.takeProfitLimitPrice
      );

      return { hasStopLoss, hasTakeProfit, orders: failsafeOrders };
    } catch (error) {
      Logger.error(
        `‚ùå [FAILSAFE] Erro ao verificar ordens de seguran√ßa para ${symbol}:`,
        error.message
      );
      return { hasStopLoss: false, hasTakeProfit: false, orders: [] };
    }
  }

  /**
   * Monitora e recria ordens de seguran√ßa se necess√°rio
   * @param {string} botName - Nome √∫nico do bot
   * @returns {object} - Resultado do monitoramento
   */
  static async monitorAndRecreateFailsafeOrders(botName = 'DEFAULT', config = null) {
    try {
      // SEMPRE usa credenciais do config - lan√ßa exce√ß√£o se n√£o dispon√≠vel
      if (!config?.apiKey || !config?.apiSecret) {
        throw new Error(
          'API_KEY e API_SECRET s√£o obrigat√≥rios - deve ser passado da config do bot'
        );
      }
      const apiKey = config.apiKey;
      const apiSecret = config.apiSecret;

      // Busca posi√ß√µes abertas
      // üîß MIGRA√á√ÉO: Usa ExchangeManager em vez de Futures direto
      const exchangeManager = OrderController.getExchangeManager({ apiKey, apiSecret });
      const positions = await exchangeManager.getFuturesPositions(apiKey, apiSecret);

      if (!positions || positions.length === 0) {
        return { checked: 0, recreated: 0 };
      }

      let checked = 0;
      let recreated = 0;

      for (const position of positions) {
        if (Math.abs(Number(position.netQuantity)) === 0) continue;

        checked++;
        const symbol = position.symbol;

        // Verifica se existem ordens de seguran√ßa
        const failsafeStatus = await OrderController.checkFailsafeOrders(symbol, botName, config);

        // VERIFICA√á√ÉO ADICIONAL: Verifica se j√° existe stop loss antes de recriar
        const StopLossUtilsModule = await import('../Utils/StopLossUtils.js');
        const hasStopLossOrders = await StopLossUtilsModule.PositionUtils.hasStopLoss(
          symbol,
          position,
          config
        );

        if (hasStopLossOrders && failsafeStatus.hasStopLoss) {
          Logger.info(`‚úÖ [FAILSAFE] ${symbol}: Stop loss j√° existe, n√£o recriando`);
          continue;
        }

        if (!failsafeStatus.hasStopLoss || !failsafeStatus.hasTakeProfit) {
          Logger.info(`‚ö†Ô∏è [FAILSAFE] ${symbol}: Ordens de seguran√ßa incompletas detectadas`);
          Logger.info(`   ‚Ä¢ Stop Loss: ${failsafeStatus.hasStopLoss ? '‚úÖ' : '‚ùå'}`);
          Logger.info(`   ‚Ä¢ Take Profit: ${failsafeStatus.hasTakeProfit ? '‚úÖ' : '‚ùå'}`);

          // Recria ordens de seguran√ßa
          const recreateResult = await OrderController.createFailsafeOrders(
            position,
            botName,
            config
          );

          if (recreateResult.success) {
            Logger.info(`‚úÖ [FAILSAFE] ${symbol}: Ordens de seguran√ßa recriadas com sucesso`);
            recreated++;
          } else {
            Logger.info(`‚ùå [FAILSAFE] ${symbol}: Falha ao recriar ordens de seguran√ßa`);
          }
        }
      }

      if (checked > 0) {
        Logger.info(
          `üõ°Ô∏è [FAILSAFE] Monitoramento conclu√≠do: ${checked} posi√ß√µes verificadas, ${recreated} redes de seguran√ßa recriadas`
        );
      }

      return { checked, recreated };
    } catch (error) {
      Logger.error(`‚ùå [FAILSAFE] Erro no monitoramento de ordens de seguran√ßa:`, error.message);
      return { checked: 0, recreated: 0, error: error.message };
    }
  }

  /**
   * Fun√ß√£o de debug condicional
   * @param {string} message - Mensagem de debug
   * @param {object} config - Configura√ß√£o do bot (opcional)
   */
  static debug(message, config = null) {
    if (config?.logType === 'debug') {
      Logger.info(message);
    }
  }

  /**
   * Verifica se h√° posi√ß√µes abertas que n√£o est√£o sendo monitoradas
   */
  static async checkForUnmonitoredPositions(botName, config = null) {
    try {
      // SEMPRE usa credenciais do config - lan√ßa exce√ß√£o se n√£o dispon√≠vel
      if (!config?.apiKey || !config?.apiSecret) {
        throw new Error(
          'API_KEY e API_SECRET s√£o obrigat√≥rios - deve ser passado da config do bot'
        );
      }
      const apiKey = config.apiKey;
      const apiSecret = config.apiSecret;

      // Cache para evitar verifica√ß√µes excessivas
      const cacheKey = `unmonitored_${botName}`;
      const cached = OrderController.stopLossCheckCache.get(cacheKey);
      const now = Date.now();

      if (cached && now - cached.lastCheck < 10000) {
        // 10 segundos de cache para verifica√ß√µes de posi√ß√µes
        return; // Pula verifica√ß√£o se feita recentemente
      }

      // Busca posi√ß√µes abertas
      // üîß MIGRA√á√ÉO: Usa ExchangeManager em vez de Futures direto
      const exchangeManager = OrderController.getExchangeManager({ apiKey, apiSecret });
      const positions = (await exchangeManager.getFuturesPositions(apiKey, apiSecret)) || [];

      if (positions.length === 0) {
        return;
      }

      // Atualiza cache de verifica√ß√£o
      OrderController.stopLossCheckCache.set(cacheKey, {
        lastCheck: now,
        hasStopLoss: false,
      });

      // Logar todas as posi√ß√µes abertas (monitoradas ou n√£o)
      for (const position of positions) {
        const Account = await AccountController.get({
          apiKey,
          apiSecret,
          strategy: config?.strategyName || 'DEFAULT',
        });
        // üîß MIGRA√á√ÉO: Usa ExchangeManager para obter markets em vez de Account.markets direto
        const exchangeManager = OrderController.getExchangeManager(config || {});
        const allMarkets = await exchangeManager.getMarkets();
        const marketInfo = allMarkets.find(m => m.symbol === position.symbol);

        // Verifica se marketInfo existe antes de acessar a propriedade fee
        if (!marketInfo) {
          // Posi√ß√£o manual em par n√£o autorizado - usa configura√ß√µes padr√£o
          const defaultFee = parseFloat(config?.fee || 0.0004);
          const entryPrice = parseFloat(
            position.avgEntryPrice || position.entryPrice || position.markPrice
          );
          const currentPrice = parseFloat(position.markPrice);
          const quantity = Math.abs(Number(position.netQuantity));
          const orderValue = entryPrice * quantity;
          const exitValue = currentPrice * quantity;
          const entryFee = orderValue * defaultFee;
          const exitFee = exitValue * defaultFee;
          const totalFee = entryFee + exitFee;

          // Usa a fun√ß√£o calculatePnL do TrailingStop para calcular o PnL corretamente
          const leverage = Account.leverage;
          const { pnl, pnlPct } = TrailingStop.calculatePnL(position, Account);

          const percentFee = orderValue > 0 ? (totalFee / orderValue) * 100 : 0;
          OrderController.debug(
            `üìã [MANUAL_POSITION] ${position.symbol} | Volume: $${orderValue.toFixed(2)} | Taxa estimada: $${totalFee.toFixed(6)} (‚âà ${percentFee.toFixed(2)}%) | PnL: $${pnl.toFixed(6)} (${pnlPct.toFixed(3)}%) | ‚ö†Ô∏è Par n√£o configurado`
          );
          continue; // Pula cria√ß√£o de ordens para pares n√£o autorizados
        }

        const fee = marketInfo.fee || config?.fee || 0.0004;
        const entryPrice = parseFloat(
          position.avgEntryPrice || position.entryPrice || position.markPrice
        );
        const currentPrice = parseFloat(position.markPrice);
        const quantity = Math.abs(Number(position.netQuantity));
        const orderValue = entryPrice * quantity;
        const exitValue = currentPrice * quantity;
        const entryFee = orderValue * fee;
        const exitFee = exitValue * fee;
        const totalFee = entryFee + exitFee;

        // Usa a fun√ß√£o calculatePnL do TrailingStop para calcular o PnL corretamente
        const leverage = Account.leverage;
        const { pnl, pnlPct } = TrailingStop.calculatePnL(position, Account);

        const percentFee = orderValue > 0 ? (totalFee / orderValue) * 100 : 0;
        OrderController.debug(
          `[MONITOR][ALL] ${position.symbol} | Volume: $${orderValue.toFixed(2)} | Taxa total estimada (entrada+sa√≠da): $${totalFee.toFixed(6)} (‚âà ${percentFee.toFixed(2)}%) | PnL atual: $${pnl.toFixed(6)} | PnL%: ${pnlPct.toFixed(3)}%`
        );
      }

      // Verifica se h√° posi√ß√µes que n√£o est√£o sendo monitoradas
      const pendingAccountOrders = OrderController.pendingEntryOrdersByBot[botName] || {};
      const monitoredMarkets = Object.keys(pendingAccountOrders);
      const unmonitoredPositions = positions.filter(pos => !monitoredMarkets.includes(pos.symbol));

      if (unmonitoredPositions.length > 0) {
        // Verifica se j√° foram criados alvos para essas posi√ß√µes (evita loop infinito)
        for (const position of unmonitoredPositions) {
          // Verifica se o par est√° autorizado antes de tentar criar ordens
          const Account = await AccountController.get({
            apiKey,
            apiSecret,
            strategy: config?.strategyName || 'DEFAULT',
          });
          // üîß MIGRA√á√ÉO: Usa ExchangeManager para obter markets em vez de Account.markets direto
          const exchangeManager = OrderController.getExchangeManager(config || {});
          const allMarkets = await exchangeManager.getMarkets();
          const marketInfo = allMarkets.find(m => m.symbol === position.symbol);

          if (!marketInfo) {
            OrderController.debug(
              `‚ÑπÔ∏è [MANUAL_POSITION] ${position.symbol}: Par n√£o autorizado - pulando cria√ß√£o de ordens autom√°ticas`
            );
            continue; // Pula posi√ß√µes em pares n√£o autorizados
          }

          // SEMPRE valida e cria stop loss para todas as posi√ß√µes AUTORIZADAS
          await OrderController.validateAndCreateStopLoss(position, botName, config);

          // Log de debug para monitoramento
          OrderController.debug(`üõ°Ô∏è [MONITOR] ${position.symbol}: Stop loss validado/criado`);

          // ‚úÖ REMOVIDO: Take profit agora √© gerenciado APENAS pelo monitor dedicado (startTakeProfitMonitor)
          // Evita duplica√ß√£o de ordens de take profit
        }
      }
    } catch (error) {
      Logger.warn(
        `‚ö†Ô∏è [MONITOR-${botName}] Falha ao verificar posi√ß√µes n√£o monitoradas:`,
        error.message
      );
    }
  }

  /**
   * Verifica se j√° existe uma ordem de stop loss para uma posi√ß√£o
   * @param {string} symbol - S√≠mbolo do mercado
   * @param {object} position - Dados da posi√ß√£o
   * @param config
   * @returns {boolean} - True se j√° existe stop loss
   */
  static async hasExistingStopLoss(symbol, position, config) {
    try {
      // Verifica cache primeiro
      const cacheKey = `${symbol}_${position.netQuantity > 0 ? 'LONG' : 'SHORT'}`;
      const cached = OrderController.stopLossCheckCache.get(cacheKey);
      const now = Date.now();

      if (cached && now - cached.lastCheck < OrderController.stopLossCheckCacheTimeout) {
        // Usa resultado do cache se ainda √© v√°lido
        return cached.hasStopLoss;
      }

      // SEMPRE usa credenciais do config - lan√ßa exce√ß√£o se n√£o dispon√≠vel
      if (!config?.apiKey || !config?.apiSecret) {
        throw new Error(
          'API_KEY e API_SECRET s√£o obrigat√≥rios - deve ser passado da config do bot'
        );
      }
      const apiKey = config.apiKey;
      const apiSecret = config.apiSecret;

      // üîß MIGRA√á√ÉO: Usa ExchangeManager em vez de Order direto
      const exchangeManager = OrderController.getExchangeManager({ apiKey, apiSecret });
      const existingOrders = await exchangeManager.getOpenOrdersForSymbol(symbol, apiKey, apiSecret);

      Logger.debug(
        `üîç [STOP_LOSS_CHECK] ${symbol}: Encontradas ${existingOrders?.length || 0} ordens abertas`
      );

      if (!existingOrders || existingOrders.length === 0) {
        // Atualiza cache
        OrderController.stopLossCheckCache.set(cacheKey, {
          lastCheck: now,
          hasStopLoss: false,
        });
        Logger.debug(`üîç [STOP_LOSS_CHECK] ${symbol}: Nenhuma ordem encontrada - retornando false`);
        return false;
      }

      // Obter pre√ßo de entrada da posi√ß√£o
      const entryPrice = parseFloat(position.entryPrice || position.avgEntryPrice || 0);
      const isLong = parseFloat(position.netQuantity) > 0;

      Logger.debug(
        `üîç [STOP_LOSS_CHECK] ${symbol}: Verificando ordens - EntryPrice: ${entryPrice}, IsLong: ${isLong}, NetQuantity: ${position.netQuantity}`
      );

      const hasStopLossOrders = existingOrders.some(order => {
        const isReduceOnly = order.reduceOnly;
        const correctSide = order.side === (isLong ? 'Ask' : 'Bid');
        const isPending =
          order.status === 'Pending' ||
          order.status === 'New' ||
          order.status === 'PartiallyFilled' ||
          order.status === 'TriggerPending';

        // Verifica se tem trigger de stop loss
        const hasStopLossTrigger = order.stopLossTriggerPrice || order.stopLossLimitPrice;

        // Para ordens sem trigger, verifica se est√° posicionada corretamente
        let isCorrectlyPositioned = false;
        if (order.limitPrice) {
          const orderPrice = parseFloat(order.limitPrice);
          if (isLong) {
            // Para LONG: stop loss deve estar ABAIXO do pre√ßo de entrada
            isCorrectlyPositioned = orderPrice < entryPrice;
          } else {
            // Para SHORT: stop loss deve estar ACIMA do pre√ßo de entrada
            isCorrectlyPositioned = orderPrice > entryPrice;
          }
        }

        const isConditionalStopLoss =
          isReduceOnly &&
          correctSide &&
          (order.status === 'TriggerPending' || order.status === 'Pending');

        const isStopLossOrder =
          hasStopLossTrigger || isCorrectlyPositioned || isConditionalStopLoss;

        if (isPending) {
          const orderPrice = order.triggerPrice ? parseFloat(order.triggerPrice) : 'N/A';
          const positionType = isLong ? 'LONG' : 'SHORT';
          const expectedPosition = isLong ? 'ABAIXO' : 'ACIMA';
          const isCorrectlyPositioned = order.triggerPrice
            ? isLong
              ? orderPrice < entryPrice
              : orderPrice > entryPrice
            : 'N/A';

          Logger.debug(
            `üîç [STOP_LOSS_CHECK] ${symbol}: Ordem ${order.id} - Status: ${order.status}, ReduceOnly: ${isReduceOnly}, Side: ${order.side}, Pre√ßo: ${orderPrice}, Tipo: ${positionType}, Entrada: ${entryPrice}, Posicionamento: ${isCorrectlyPositioned} (esperado: ${expectedPosition}), HasTrigger: ${hasStopLossTrigger}, IsStopLoss: ${isStopLossOrder}`
          );
        }

        // Log para TODAS as ordens (n√£o apenas pending)
        Logger.debug(
          `üîç [STOP_LOSS_CHECK] ${symbol}: Ordem ${order.id} - Status: ${order.status}, ReduceOnly: ${isReduceOnly}, Side: ${order.side}, HasTrigger: ${hasStopLossTrigger}, IsPending: ${isPending}, IsConditionalStopLoss: ${isConditionalStopLoss}, IsStopLoss: ${isStopLossOrder}`
        );

        return isStopLossOrder;
      });

      // Atualiza cache
      OrderController.stopLossCheckCache.set(cacheKey, {
        lastCheck: now,
        hasStopLoss: hasStopLossOrders,
      });

      Logger.debug(
        `üîç [STOP_LOSS_CHECK] ${symbol}: Resultado final - HasStopLoss: ${hasStopLossOrders}, Cache atualizado`
      );

      return hasStopLossOrders;
    } catch (error) {
      Logger.error(
        `‚ùå [STOP_LOSS_CHECK] Erro ao verificar stop loss existente para ${symbol}:`,
        error.message
      );
      return false;
    }
  }

  /**
   * Limpa o cache de verifica√ß√£o de stop loss para um s√≠mbolo espec√≠fico
   * @param {string} symbol - S√≠mbolo do mercado
   */
  static clearStopLossCheckCache(symbol) {
    const keysToDelete = [];
    for (const [key, value] of OrderController.stopLossCheckCache.entries()) {
      if (key.startsWith(symbol + '_')) {
        keysToDelete.push(key);
      }
    }

    keysToDelete.forEach(key => {
      OrderController.stopLossCheckCache.delete(key);
    });

    if (keysToDelete.length > 0) {
      Logger.info(
        `üßπ [CACHE] Cache de stop loss limpo para ${symbol} (${keysToDelete.length} entradas)`
      );
    }
  }

  /**
   * Limpa o cache de verifica√ß√£o de take profit para um s√≠mbolo espec√≠fico
   * @param {string} symbol - S√≠mbolo do mercado
   */
  static clearTakeProfitCheckCache(symbol) {
    const keysToDelete = [];
    for (const [key, value] of OrderController.takeProfitCheckCache.entries()) {
      if (key.startsWith(symbol + '_')) {
        keysToDelete.push(key);
      }
    }

    keysToDelete.forEach(key => {
      OrderController.takeProfitCheckCache.delete(key);
    });

    if (keysToDelete.length > 0) {
      Logger.info(
        `üßπ [CACHE] Cache de take profit limpo para ${symbol} (${keysToDelete.length} entradas)`
      );
    }
  }

  /**
   * Monitor e limpeza de ordens √≥rf√£s (stop loss + take profit)
   * Remove ordens reduceOnly √≥rf√£s quando a posi√ß√£o foi fechada
   * @param {string} botName - Nome do bot
   * @param {object} config - Configura√ß√£o do bot com credenciais
   * @returns {Promise<object>} Resultado da limpeza
   */
  static async monitorAndCleanupOrphanedOrders(botName, config = null) {
    try {
      if (!config?.apiKey || !config?.apiSecret) {
        throw new Error(
          'API_KEY e API_SECRET s√£o obrigat√≥rios - deve ser passado da config do bot'
        );
      }
      const apiKey = config.apiKey;
      const apiSecret = config.apiSecret;

      Logger.debug(`üßπ [${config.botName}][ORPHAN_MONITOR] Iniciando verifica√ß√£o de ordens √≥rf√£s`);

      // üîß MIGRA√á√ÉO: Usa ExchangeManager em vez de Futures direto
      const exchangeManager = OrderController.getExchangeManager({ apiKey, apiSecret });
      const positionsResult = await exchangeManager.getFuturesPositions(apiKey, apiSecret);
      const positions = Array.isArray(positionsResult) ? positionsResult : [];
      Logger.debug(
        `üßπ [${config.botName}][ORPHAN_MONITOR] Encontradas ${positions.length} posi√ß√µes abertas`
      );

      const Account = await AccountController.get({
        apiKey,
        apiSecret,
        strategy: config?.strategyName || 'DEFAULT',
      });

      // üö® VALIDA√á√ÉO CR√çTICA: Garante que configuredSymbols √© um array v√°lido
      let configuredSymbols = config.authorizedTokens || [];
      if (!Array.isArray(configuredSymbols)) {
        Logger.error(
          `‚ùå [${config.botName}][ORPHAN_MONITOR] config.authorizedTokens n√£o √© um array - type: ${typeof config.authorizedTokens}, value:`,
          config.authorizedTokens
        );
        // Converte para array se for string separada por v√≠rgula
        if (typeof config.authorizedTokens === 'string') {
          configuredSymbols = config.authorizedTokens
            .split(',')
            .map(s => s.trim())
            .filter(s => s);
          Logger.info(
            `üîß [${config.botName}][ORPHAN_MONITOR] Convertido string para array: ${configuredSymbols.length} s√≠mbolos`
          );
        } else {
          configuredSymbols = [];
        }
      }

      // üîç VERIFICA√á√ÉO EXTRA: Testa se o array √© iter√°vel
      try {
        if (
          !configuredSymbols[Symbol.iterator] ||
          typeof configuredSymbols[Symbol.iterator] !== 'function'
        ) {
          Logger.error(
            `‚ùå [${config.botName}][ORPHAN_MONITOR] configuredSymbols n√£o tem iterator v√°lido - @@iterator: ${typeof configuredSymbols[Symbol.iterator]}`
          );
          return { orphaned: 0, cancelled: 0, errors: ['Array n√£o iter√°vel'], totalChecked: 0 };
        }
      } catch (iteratorError) {
        Logger.error(
          `‚ùå [${config.botName}][ORPHAN_MONITOR] Erro de valida√ß√£o do iterator:`,
          iteratorError.message
        );
        return { orphaned: 0, cancelled: 0, errors: ['Erro de iterator'], totalChecked: 0 };
      }

      Logger.debug(
        `üßπ [${config.botName}][ORPHAN_MONITOR] Verificando ${configuredSymbols.length} s√≠mbolos autorizados: ${configuredSymbols.join(', ')}`
      );

      let totalOrphanedOrders = 0;
      let totalCancelledOrders = 0;
      const errors = [];
      let totalOrdersChecked = 0;

      for (const symbol of configuredSymbols) {
        try {
          // Adiciona delay entre chamadas para evitar rate limit
          if (totalOrdersChecked > 0) {
            await new Promise(resolve => setTimeout(resolve, 500)); // 500ms delay
          }

          // üîß MIGRA√á√ÉO: Usa ExchangeManager em vez de Order direto
      const exchangeManager = OrderController.getExchangeManager({ apiKey, apiSecret });
      const openOrders = await exchangeManager.getOpenOrdersForSymbol(symbol, apiKey, apiSecret);

          if (!openOrders || openOrders.length === 0) {
            Logger.debug(`üßπ [${config.botName}][ORPHAN_MONITOR] ${symbol}: Nenhuma ordem aberta`);
            continue;
          }

          totalOrdersChecked += openOrders.length;
          Logger.debug(
            `üßπ [${config.botName}][ORPHAN_MONITOR] ${symbol}: ${openOrders.length} ordens abertas encontradas`
          );

          // üîß MELHORIA: Identifica TODAS as ordens reduceOnly √≥rf√£s (stop loss + take profit)
          const orphanedOrders = openOrders.filter(order => {
            // S√≥ considera ordens reduceOnly como potenciais √≥rf√£s
            return order.reduceOnly === true;
          });

          if (orphanedOrders.length === 0) {
            Logger.debug(
              `üßπ [${config.botName}][ORPHAN_MONITOR] ${symbol}: Nenhuma ordem reduceOnly encontrada`
            );
            continue;
          }

          // Categoriza as ordens √≥rf√£s por tipo para logging melhor
          const stopLossOrders = orphanedOrders.filter(order => {
            const hasStopLossTrigger = order.stopLossTriggerPrice || order.stopLossLimitPrice;
            return (
              hasStopLossTrigger || (!order.takeProfitTriggerPrice && !order.takeProfitLimitPrice)
            );
          });

          const takeProfitOrders = orphanedOrders.filter(order => {
            return order.takeProfitTriggerPrice || order.takeProfitLimitPrice;
          });

          Logger.debug(
            `üßπ [${config.botName}][ORPHAN_MONITOR] ${symbol}: ${orphanedOrders.length} ordens reduceOnly (${stopLossOrders.length} SL + ${takeProfitOrders.length} TP)`
          );

          const position = positions.find(p => p.symbol === symbol);

          // Verifica se posi√ß√£o est√° fechada (√≥rf√£)
          if (!position || Math.abs(Number(position.netQuantity)) === 0) {
            Logger.info(
              `üßπ [${config.botName}][ORPHAN_MONITOR] ${symbol}: POSI√á√ÉO FECHADA - ${orphanedOrders.length} ordens √≥rf√£s detectadas (${stopLossOrders.length} SL + ${takeProfitOrders.length} TP)`
            );

            totalOrphanedOrders += orphanedOrders.length;

            // Log detalhado das ordens √≥rf√£s
            for (const order of orphanedOrders) {
              // üö® VALIDA√á√ÉO CR√çTICA: Verifica se order √© um objeto v√°lido
              if (!order || typeof order !== 'object' || order === null) {
                Logger.error(
                  `‚ùå [${config.botName}][ORPHAN_MONITOR] ${symbol}: order √© null ou inv√°lido - type: ${typeof order}, value:`,
                  order
                );
                continue;
              }
              const orderType =
                order.stopLossTriggerPrice || order.stopLossLimitPrice
                  ? 'STOP_LOSS'
                  : order.takeProfitTriggerPrice || order.takeProfitLimitPrice
                    ? 'TAKE_PROFIT'
                    : 'REDUCE_ONLY';
              const triggerPrice =
                order.stopLossTriggerPrice || order.takeProfitTriggerPrice || order.limitPrice;
              Logger.debug(
                `üßπ [${config.botName}][ORPHAN_MONITOR] ${symbol}: Ordem √≥rf√£ ${orderType} - ID: ${order.id}, Pre√ßo: ${triggerPrice}, ReduceOnly: ${order.reduceOnly}`
              );
            }

            // Cancela as ordens √≥rf√£s
            for (const order of orphanedOrders) {
              // üö® VALIDA√á√ÉO CR√çTICA: Verifica se order √© um objeto v√°lido
              if (!order || typeof order !== 'object' || order === null) {
                Logger.error(
                  `‚ùå [${config.botName}][ORPHAN_MONITOR] ${symbol}: order √© null ou inv√°lido no cancelamento - type: ${typeof order}, value:`,
                  order
                );
                continue;
              }
              const orderId = order.id;

              try {
                // Adiciona delay entre cancelamentos
                await new Promise(resolve => setTimeout(resolve, 200)); // 200ms delay

                Logger.debug(
                  `üßπ [${config.botName}][ORPHAN_MONITOR] ${symbol}: Tentando cancelar ordem √≥rf√£ ${orderId}`
                );

                // üîß MIGRA√á√ÉO: Usa ExchangeManager em vez de Order direto
                const exchangeMgr = OrderController.getExchangeManager({ apiKey, apiSecret });
                const cancelResult = await exchangeManager.cancelOpenOrder(
                  symbol,
                  orderId,
                  null,
                  apiKey,
                  apiSecret
                );

                if (cancelResult && !cancelResult.error) {
                  totalCancelledOrders++;
                  Logger.info(
                    `‚úÖ [${config.botName}][ORPHAN_MONITOR] ${symbol}: Ordem √≥rf√£ ${orderId} cancelada com sucesso`
                  );

                  // Atualiza status no banco de dados
                  try {
                    await BotOrdersManager.updateOrder(orderId, {
                      status: 'CANCELLED',
                      closeTime: new Date().toISOString(),
                      closeType: 'ORPHAN_CLEANUP',
                    });
                    Logger.debug(
                      `üìù [${config.botName}][ORPHAN_MONITOR] ${symbol}: Status da ordem ${orderId} atualizado no banco para CANCELLED`
                    );
                  } catch (dbError) {
                    Logger.warn(
                      `‚ö†Ô∏è [${config.botName}][ORPHAN_MONITOR] ${symbol}: Erro ao atualizar status da ordem ${orderId} no banco: ${dbError.message}`
                    );
                    // N√£o propaga o erro pois o cancelamento na exchange foi bem-sucedido
                  }

                  OrderController.clearStopLossCheckCache(symbol);
                } else {
                  const errorMsg = cancelResult?.error || 'desconhecido';
                  Logger.warn(
                    `‚ùå [${config.botName}][ORPHAN_MONITOR] ${symbol}: Falha ao cancelar ordem √≥rf√£ - OrderID: ${orderId}, Erro: ${errorMsg}`
                  );
                  errors.push(`${symbol} (${orderId}): ${errorMsg}`);
                }
              } catch (error) {
                // Verifica se √© erro de rate limit
                if (
                  error?.response?.status === 429 ||
                  String(error).includes('rate limit') ||
                  String(error).includes('429')
                ) {
                  Logger.warn(
                    `‚ö†Ô∏è [${config.botName}][ORPHAN_MONITOR] ${symbol}: Rate limit detectado ao cancelar ordem ${orderId}, pulando`
                  );
                  errors.push(`${symbol} (${orderId}): Rate limit`);
                  // Para de tentar cancelar mais ordens deste s√≠mbolo para evitar mais rate limits
                  break;
                } else {
                  Logger.error(
                    `‚ùå [${config.botName}][ORPHAN_MONITOR] Erro ao cancelar ordem ${orderId} para ${symbol}:`,
                    error.message
                  );
                  errors.push(`${symbol} (${orderId}): ${error.message}`);
                }
              }
            }
          } else {
            Logger.debug(
              `üßπ [${config.botName}][ORPHAN_MONITOR] ${symbol}: Posi√ß√£o ativa (${position.netQuantity}), ${orphanedOrders.length} ordens reduceOnly s√£o v√°lidas`
            );
          }
        } catch (error) {
          // Verifica se √© erro de rate limit no n√≠vel do s√≠mbolo
          if (
            error?.response?.status === 429 ||
            String(error).includes('rate limit') ||
            String(error).includes('429')
          ) {
            Logger.warn(
              `‚ö†Ô∏è [${config.botName}][ORPHAN_MONITOR] ${symbol}: Rate limit detectado, pulando s√≠mbolo`
            );
            errors.push(`${symbol}: Rate limit`);
          } else {
            Logger.error(
              `‚ùå [${config.botName}][ORPHAN_MONITOR] Erro ao verificar ordens para ${symbol}:`,
              error.message
            );
            errors.push(`${symbol}: ${error.message}`);
          }
        }
      }

      // Log do resultado final
      if (totalOrphanedOrders > 0) {
        Logger.info(`üßπ [${config.botName}][ORPHAN_MONITOR] Monitoramento conclu√≠do:`);
        Logger.info(`   ‚Ä¢ Ordens totais verificadas: ${totalOrdersChecked}`);
        Logger.info(`   ‚Ä¢ Ordens √≥rf√£s detectadas: ${totalOrphanedOrders}`);
        Logger.info(`   ‚Ä¢ Ordens canceladas: ${totalCancelledOrders}`);
        Logger.info(`   ‚Ä¢ Erros: ${errors.length}`);

        if (errors.length > 0) {
          Logger.warn(`   ‚Ä¢ Detalhes dos erros: ${errors.join(', ')}`);
        }
      } else {
        Logger.debug(
          `üßπ [${config.botName}][ORPHAN_MONITOR] Nenhuma ordem √≥rf√£ encontrada (${totalOrdersChecked} ordens verificadas)`
        );
      }

      return {
        orphaned: totalOrphanedOrders,
        cancelled: totalCancelledOrders,
        errors,
        totalChecked: totalOrdersChecked,
      };
    } catch (error) {
      // Verifica se √© erro de rate limit no n√≠vel global
      if (
        error?.response?.status === 429 ||
        String(error).includes('rate limit') ||
        String(error).includes('429')
      ) {
        Logger.warn(
          `‚ö†Ô∏è [${config.botName}][ORPHAN_MONITOR] Rate limit detectado no monitoramento global`
        );
        return { orphaned: 0, cancelled: 0, errors: ['Rate limit global'], totalChecked: 0 };
      } else {
        Logger.error(
          `‚ùå [${config.botName}][ORPHAN_MONITOR] Erro no monitoramento de ordens √≥rf√£s:`,
          error.message
        );
        return { orphaned: 0, cancelled: 0, errors: [error.message], totalChecked: 0 };
      }
    }
  }

  /**
   * M√©todo para escanear e limpar TODAS as ordens √≥rf√£s na corretora (global).
   * Este m√©todo verifica na corretora todas as ordens abertas e cancela aquelas
   * que n√£o possuem mais uma posi√ß√£o ativa correspondente.
   *
   * @param {string} botName - Nome do bot para monitorar
   * @param {object} config - Configura√ß√µes espec√≠ficas do bot (apiKey, apiSecret, etc.)
   * @returns {object} Resultado da opera√ß√£o: { orphaned, cancelled, errors }
   */
  static async scanAndCleanupAllOrphanedOrders(botName, config = null) {
    try {
      if (!config?.apiKey || !config?.apiSecret) {
        throw new Error('API_KEY e API_SECRET s√£o obrigat√≥rios');
      }
      const apiKey = config.apiKey;
      const apiSecret = config.apiSecret;

      Logger.debug(
        `üîç [${config.botName}][SCAN_CLEANUP] Iniciando limpeza de ordens √≥rf√£s na corretora`
      );

      // 1. Busca TODAS as ordens abertas na corretora (sem especificar s√≠mbolo)
      // üîß MIGRA√á√ÉO: Usa ExchangeManager em vez de Order direto
      const exchangeManager = OrderController.getExchangeManager({ apiKey, apiSecret });
      const allOpenOrders = (await exchangeManager.getOpenOrdersForSymbol(null, apiKey, apiSecret)) || [];
      Logger.debug(
        `üîç [${config.botName}][SCAN_CLEANUP] Encontradas ${allOpenOrders.length} ordens abertas na corretora`
      );

      if (allOpenOrders.length === 0) {
        Logger.info(`‚úÖ [${config.botName}][SCAN_CLEANUP] Nenhuma ordem aberta encontrada`);
        return { orphaned: 0, cancelled: 0, errors: [], ordersScanned: 0 };
      }

      // 2. Busca TODAS as posi√ß√µes abertas na corretora
      // üîß MIGRA√á√ÉO: Reutiliza ExchangeManager j√° criado acima
      const positions = (await exchangeManager.getFuturesPositions(apiKey, apiSecret)) || [];
      const activeSymbols = new Set();

      // üö® VALIDA√á√ÉO CR√çTICA: Verifica se positions √© iter√°vel
      if (
        !Array.isArray(positions) ||
        !positions[Symbol.iterator] ||
        typeof positions[Symbol.iterator] !== 'function'
      ) {
        Logger.error(
          `‚ùå [${config.botName}][SCAN_CLEANUP] positions n√£o √© iter√°vel - type: ${typeof positions}, isArray: ${Array.isArray(positions)}`
        );
        return { orphaned: 0, cancelled: 0, errors: ['positions not iterable'], ordersScanned: 0 };
      }

      // Mapa de s√≠mbolos com posi√ß√µes ativas (quantidade > 0)
      for (const position of positions) {
        // üö® VALIDA√á√ÉO CR√çTICA: Verifica se position √© um objeto v√°lido
        if (!position || typeof position !== 'object' || position === null) {
          Logger.error(
            `‚ùå [${config.botName}][SCAN_CLEANUP] position √© null ou inv√°lido - type: ${typeof position}, value:`,
            position
          );
          continue;
        }
        if (Math.abs(Number(position.netQuantity)) > 0) {
          activeSymbols.add(position.symbol);
        }
      }

      Logger.debug(
        `üîç [${config.botName}][SCAN_CLEANUP] Encontradas ${positions.length} posi√ß√µes, ${activeSymbols.size} s√≠mbolos com posi√ß√£o ativa`
      );
      Logger.debug(
        `üîç [${config.botName}][SCAN_CLEANUP] S√≠mbolos com posi√ß√£o: ${Array.from(activeSymbols).join(', ') || 'nenhum'}`
      );

      // 3. Identifica ordens √≥rf√£s: ordens reduceOnly que n√£o possuem posi√ß√£o ativa correspondente
      const orphanedOrders = [];

      // üö® VALIDA√á√ÉO CR√çTICA: Verifica se allOpenOrders √© iter√°vel
      if (
        !Array.isArray(allOpenOrders) ||
        !allOpenOrders[Symbol.iterator] ||
        typeof allOpenOrders[Symbol.iterator] !== 'function'
      ) {
        Logger.error(
          `‚ùå [${config.botName}][SCAN_CLEANUP] allOpenOrders n√£o √© iter√°vel - type: ${typeof allOpenOrders}, isArray: ${Array.isArray(allOpenOrders)}`
        );
        return {
          orphaned: 0,
          cancelled: 0,
          errors: ['allOpenOrders not iterable'],
          ordersScanned: 0,
        };
      }

      for (const order of allOpenOrders) {
        // üö® VALIDA√á√ÉO CR√çTICA: Verifica se order √© um objeto v√°lido
        if (!order || typeof order !== 'object' || order === null) {
          Logger.error(
            `‚ùå [${config.botName}][SCAN_CLEANUP] order √© null ou inv√°lido - type: ${typeof order}, value:`,
            order
          );
          continue;
        }
        const isReduceOnly = order.reduceOnly === true;
        const hasActivePosition = activeSymbols.has(order.symbol);

        // Se √© reduceOnly E n√£o h√° posi√ß√£o ativa para este s√≠mbolo, a ordem √© √≥rf√£
        if (isReduceOnly && !hasActivePosition) {
          orphanedOrders.push(order);
          Logger.debug(
            `üîç [${config.botName}][SCAN_CLEANUP] Ordem √≥rf√£ detectada: ${order.symbol} - ID: ${order.id}, Tipo: ${order.orderType}, ReduceOnly: ${order.reduceOnly}`
          );
        }
      }

      if (orphanedOrders.length === 0) {
        Logger.info(`‚úÖ [${config.botName}][SCAN_CLEANUP] Nenhuma ordem √≥rf√£ encontrada`);
        return { orphaned: 0, cancelled: 0, errors: [], ordersScanned: allOpenOrders.length };
      }

      Logger.info(
        `üßπ [${config.botName}][SCAN_CLEANUP] ${orphanedOrders.length} ordens √≥rf√£s detectadas`
      );

      // 4. Cancela as ordens √≥rf√£s encontradas
      let totalCancelledOrders = 0;
      const errors = [];

      // üö® VALIDA√á√ÉO CR√çTICA: Verifica se orphanedOrders √© iter√°vel
      if (
        !Array.isArray(orphanedOrders) ||
        !orphanedOrders[Symbol.iterator] ||
        typeof orphanedOrders[Symbol.iterator] !== 'function'
      ) {
        Logger.error(
          `‚ùå [${config.botName}][SCAN_CLEANUP] orphanedOrders n√£o √© iter√°vel - type: ${typeof orphanedOrders}, isArray: ${Array.isArray(orphanedOrders)}`
        );
        return {
          orphaned: 0,
          cancelled: 0,
          errors: ['orphanedOrders not iterable'],
          ordersScanned: allOpenOrders.length,
        };
      }

      for (const order of orphanedOrders) {
        // üö® VALIDA√á√ÉO CR√çTICA: Verifica se order √© um objeto v√°lido
        if (!order || typeof order !== 'object' || order === null) {
          Logger.error(
            `‚ùå [${config.botName}][SCAN_CLEANUP] order √© null ou inv√°lido no cancelamento - type: ${typeof order}, value:`,
            order
          );
          continue;
        }
        try {
          await new Promise(resolve => setTimeout(resolve, 150)); // Delay entre cancelamentos

          Logger.debug(
            `üßπ [${config.botName}][SCAN_CLEANUP] Cancelando ordem √≥rf√£ ${order.symbol} - ID: ${order.id}`
          );

          // üîß MIGRA√á√ÉO: Usa ExchangeManager em vez de Order direto
          const exchangeMgr = OrderController.getExchangeManager({ apiKey, apiSecret });
          const cancelResult = await exchangeManager.cancelOpenOrder(
            order.symbol,
            order.id,
            null,
            apiKey,
            apiSecret
          );

          if (cancelResult && !cancelResult.error) {
            totalCancelledOrders++;
            Logger.info(
              `‚úÖ [${config.botName}][SCAN_CLEANUP] Ordem √≥rf√£ cancelada: ${order.symbol} - ID: ${order.id}`
            );

            // Atualiza status no banco de dados se existir
            try {
              await BotOrdersManager.updateOrder(order.id, {
                status: 'CANCELLED',
                closeTime: new Date().toISOString(),
                closeType: 'ORPHAN_CLEANUP',
              });
            } catch (dbError) {
              // Ignora erros de banco (ordem pode n√£o estar registrada localmente)
              Logger.debug(
                `üìù [${config.botName}][SCAN_CLEANUP] Ordem ${order.id} n√£o encontrada no banco local (normal para ordens externas)`
              );
            }
          } else {
            const errorMsg = cancelResult?.error || 'desconhecido';
            errors.push(`${order.symbol}:${order.id} - ${errorMsg}`);
            Logger.warn(
              `‚ùå [${config.botName}][SCAN_CLEANUP] Falha ao cancelar ordem √≥rf√£ ${order.symbol}:${order.id} - ${errorMsg}`
            );
          }
        } catch (error) {
          if (error?.response?.status === 429 || String(error).includes('rate limit')) {
            Logger.warn(`‚ö†Ô∏è [${config.botName}][SCAN_CLEANUP] Rate limit detectado, pausando 2s`);
            await new Promise(resolve => setTimeout(resolve, 2000));
            errors.push(`${order.symbol}:${order.id} - Rate limit`);
          } else {
            errors.push(`${order.symbol}:${order.id} - ${error.message}`);
            Logger.error(
              `‚ùå [${config.botName}][SCAN_CLEANUP] Erro ao cancelar ordem ${order.symbol}:${order.id}:`,
              error.message
            );
          }
        }
      }

      // Log do resultado final
      Logger.info(`üßπ [${config.botName}][SCAN_CLEANUP] Limpeza finalizada:`);
      Logger.info(`   ‚Ä¢ Ordens verificadas: ${allOpenOrders.length}`);
      Logger.info(`   ‚Ä¢ Ordens √≥rf√£s detectadas: ${orphanedOrders.length}`);
      Logger.info(`   ‚Ä¢ Ordens canceladas: ${totalCancelledOrders}`);
      Logger.info(`   ‚Ä¢ Erros: ${errors.length}`);

      if (errors.length > 0) {
        Logger.warn(`   ‚Ä¢ Detalhes dos erros: ${errors.join(', ')}`);
      }

      return {
        orphaned: orphanedOrders.length,
        cancelled: totalCancelledOrders,
        errors,
        ordersScanned: allOpenOrders.length,
      };
    } catch (error) {
      Logger.error(
        `‚ùå [${config.botName}][SCAN_CLEANUP] Erro na limpeza de ordens √≥rf√£s:`,
        error.message
      );
      return { orphaned: 0, cancelled: 0, errors: [error.message], ordersScanned: 0 };
    }
  }

  /**
   * üßπ M√âTODO UTILIT√ÅRIO para cancelar TODAS as ordens √≥rf√£s de forma agressiva
   *
   * Este m√©todo √© mais agressivo e cancela todas as ordens reduceOnly
   * quando n√£o h√° posi√ß√µes abertas. Use quando o m√©todo principal
   * n√£o conseguir limpar todas as ordens √≥rf√£s.
   *
   * @param {string} botName - Nome do bot para monitorar
   * @param {object} config - Configura√ß√µes espec√≠ficas do bot (apiKey, apiSecret, etc.)
   * @returns {object} Resultado da opera√ß√£o: { orphaned, cancelled, errors }
   */
  static async forceCleanupAllOrphanedOrders(botName, config = null) {
    try {
      if (!config?.apiKey || !config?.apiSecret) {
        throw new Error('API_KEY e API_SECRET s√£o obrigat√≥rios');
      }
      const apiKey = config.apiKey;
      const apiSecret = config.apiSecret;

      Logger.info(
        `üßπ [${config.botName}][FORCE_CLEANUP] Iniciando limpeza agressiva de ordens √≥rf√£s`
      );

      // üîß MIGRA√á√ÉO: Usa ExchangeManager em vez de Futures direto
      const exchangeManager = OrderController.getExchangeManager({ apiKey, apiSecret });
      const positions = (await exchangeManager.getFuturesPositions(apiKey, apiSecret)) || [];
      const activeSymbols = positions
        .filter(p => Math.abs(Number(p.netQuantity)) > 0)
        .map(p => p.symbol);

      Logger.info(
        `üßπ [${config.botName}][FORCE_CLEANUP] Posi√ß√µes ativas encontradas: ${activeSymbols.join(', ') || 'nenhuma'}`
      );

      const Account = await AccountController.get({
        apiKey,
        apiSecret,
        strategy: config?.strategyName || 'DEFAULT',
      });

      // üîß CORRE√á√ÉO: Usa authorizedTokens ao inv√©s de Account.markets
      const configuredSymbols = config.authorizedTokens || [];

      let totalOrphanedOrders = 0;
      let totalCancelledOrders = 0;
      const errors = [];

      for (const symbol of configuredSymbols) {
        try {
          // Pula s√≠mbolos com posi√ß√µes ativas
          if (activeSymbols.includes(symbol)) {
            Logger.debug(`üßπ [${config.botName}][FORCE_CLEANUP] ${symbol}: Posi√ß√£o ativa, pulando`);
            continue;
          }

          // Delay para evitar rate limit
          await new Promise(resolve => setTimeout(resolve, 300));

          // üîß MIGRA√á√ÉO: Usa ExchangeManager em vez de Order direto
      const exchangeManager = OrderController.getExchangeManager({ apiKey, apiSecret });
      const openOrders = await exchangeManager.getOpenOrdersForSymbol(symbol, apiKey, apiSecret);

          if (!openOrders || openOrders.length === 0) {
            continue;
          }

          // Identifica TODAS as ordens reduceOnly como potenciais √≥rf√£s
          const orphanedOrders = openOrders.filter(order => {
            return order.reduceOnly === true;
          });

          if (orphanedOrders.length === 0) {
            continue;
          }

          Logger.info(
            `üßπ [${config.botName}][FORCE_CLEANUP] ${symbol}: ${orphanedOrders.length} ordens reduceOnly √≥rf√£s detectadas`
          );
          totalOrphanedOrders += orphanedOrders.length;

          // Cancela todas as ordens √≥rf√£s
          for (const order of orphanedOrders) {
            try {
              await new Promise(resolve => setTimeout(resolve, 150)); // Delay menor para limpeza r√°pida

              // üîß MIGRA√á√ÉO: Usa ExchangeManager em vez de Order direto
              const exchangeMgr = OrderController.getExchangeManager({ apiKey, apiSecret });
              const cancelResult = await exchangeManager.cancelOpenOrder(
                symbol,
                order.id,
                null,
                apiKey,
                apiSecret
              );

              if (cancelResult && !cancelResult.error) {
                totalCancelledOrders++;
                Logger.info(
                  `‚úÖ [${config.botName}][FORCE_CLEANUP] ${symbol}: Ordem ${order.id} cancelada`
                );

                // Atualiza status no banco de dados
                try {
                  await BotOrdersManager.updateOrder(order.id, {
                    status: 'CANCELLED',
                    closeTime: new Date().toISOString(),
                    closeType: 'FORCE_ORPHAN_CLEANUP',
                  });
                  Logger.debug(
                    `üìù [${config.botName}][FORCE_CLEANUP] ${symbol}: Status da ordem ${order.id} atualizado no banco para CANCELLED`
                  );
                } catch (dbError) {
                  Logger.warn(
                    `‚ö†Ô∏è [${config.botName}][FORCE_CLEANUP] ${symbol}: Erro ao atualizar status da ordem ${order.id} no banco: ${dbError.message}`
                  );
                  // N√£o propaga o erro pois o cancelamento na exchange foi bem-sucedido
                }
              } else {
                const errorMsg = cancelResult?.error || 'desconhecido';
                Logger.warn(
                  `‚ùå [${config.botName}][FORCE_CLEANUP] ${symbol}: Falha ao cancelar ${order.id}: ${errorMsg}`
                );
                errors.push(`${symbol} (${order.id}): ${errorMsg}`);
              }
            } catch (error) {
              if (error?.response?.status === 429 || String(error).includes('rate limit')) {
                Logger.warn(
                  `‚ö†Ô∏è [${config.botName}][FORCE_CLEANUP] ${symbol}: Rate limit, pausando 2s`
                );
                await new Promise(resolve => setTimeout(resolve, 2000));
                errors.push(`${symbol} (${order.id}): Rate limit`);
                break; // Para de cancelar ordens deste s√≠mbolo
              } else {
                Logger.error(
                  `‚ùå [${config.botName}][FORCE_CLEANUP] Erro ao cancelar ${order.id}:`,
                  error.message
                );
                errors.push(`${symbol} (${order.id}): ${error.message}`);
              }
            }
          }
        } catch (error) {
          if (error?.response?.status === 429 || String(error).includes('rate limit')) {
            Logger.warn(`‚ö†Ô∏è [${config.botName}][FORCE_CLEANUP] ${symbol}: Rate limit no s√≠mbolo`);
            errors.push(`${symbol}: Rate limit`);
          } else {
            Logger.error(
              `‚ùå [${config.botName}][FORCE_CLEANUP] Erro no s√≠mbolo ${symbol}:`,
              error.message
            );
            errors.push(`${symbol}: ${error.message}`);
          }
        }
      }

      Logger.info(`üßπ [${config.botName}][FORCE_CLEANUP] Limpeza agressiva conclu√≠da:`);
      Logger.info(`   ‚Ä¢ Ordens √≥rf√£s detectadas: ${totalOrphanedOrders}`);
      Logger.info(`   ‚Ä¢ Ordens canceladas: ${totalCancelledOrders}`);
      Logger.info(`   ‚Ä¢ Erros: ${errors.length}`);

      return {
        orphaned: totalOrphanedOrders,
        cancelled: totalCancelledOrders,
        errors,
      };
    } catch (error) {
      Logger.error(
        `‚ùå [${config.botName}][FORCE_CLEANUP] Erro na limpeza agressiva:`,
        error.message
      );
      return { orphaned: 0, cancelled: 0, errors: [error.message] };
    }
  }

  /**
   * Cria uma ordem LIMIT com triggers de stop loss e take profit anexados
   * @param {object} orderData - Dados da ordem
   * @returns {object} - Resultado da cria√ß√£o da ordem
   */
  static async createLimitOrderWithTriggers(orderData) {
    try {
      const {
        market,
        action,
        entry,
        quantity,
        stop,
        target,
        decimal_quantity,
        decimal_price,
        stepSize_quantity,
        botName = 'DEFAULT',
        config = null,
      } = orderData;

      // SEMPRE usa credenciais do config - lan√ßa exce√ß√£o se n√£o dispon√≠vel
      if (!config?.apiKey || !config?.apiSecret) {
        throw new Error(
          'API_KEY e API_SECRET s√£o obrigat√≥rios - deve ser passado da config do bot'
        );
      }

      // TRAVA DE SEGURAN√áA: Verifica limite de ordens antes de criar nova ordem de abertura
      const maxOpenOrders = config.maxOpenOrders || 3;
      if (await OrderController.checkOrderLimit(market, config, maxOpenOrders)) {
        Logger.warn(
          `[ORDER_REJECTED] Limite de ordens (${maxOpenOrders}) para ${market} j√° atingido. Nenhuma nova ordem ser√° criada.`
        );
        return {
          success: false,
          error: `Limite de ${maxOpenOrders} ordens por s√≠mbolo atingido`,
          ordersRejected: true,
        };
      }

      // Valida se os dados de decimal est√£o dispon√≠veis
      if (
        decimal_quantity === undefined ||
        decimal_quantity === null ||
        decimal_price === undefined ||
        decimal_price === null ||
        stepSize_quantity === undefined ||
        stepSize_quantity === null
      ) {
        throw new Error(
          `Dados de decimal ausentes para ${market}. decimal_quantity: ${decimal_quantity}, decimal_price: ${decimal_price}, stepSize_quantity: ${stepSize_quantity}`
        );
      }

      const formatPrice = value => parseFloat(value).toFixed(decimal_price).toString();

      const formattedQuantity = parseFloat(quantity).toFixed(decimal_quantity);

      if (parseFloat(formattedQuantity) <= 0) {
        Logger.error(`‚ùå [QUANTITY_ERROR] ${market}: Quantidade inv√°lida ${formattedQuantity}`);
        return {
          success: false,
          error: 'Quantidade calculada inv√°lida',
          ordersRejected: true,
        };
      }

      const finalQuantity = parseFloat(formattedQuantity);
      Logger.debug(`‚úÖ [FORMAT] ${market}: Quantidade formatada: ${quantity} ‚Üí ${finalQuantity}`);

      const formatQuantity = value => {
        // Garante que a quantidade seja sempre positiva
        if (value <= 0) {
          throw new Error(`Quantidade deve ser positiva: ${value}`);
        }

        // Se decimal_quantity √© 0, usa pelo menos 1 casa decimal para evitar 0.0
        const decimals = Math.max(decimal_quantity, 1);
        let formatted = parseFloat(value).toFixed(decimals);

        // Se ainda resultar em 0.0, tenta com mais casas decimais
        if (parseFloat(formatted) === 0 && value > 0) {
          formatted = parseFloat(value).toFixed(Math.max(decimals, 4));
        }

        // Se ainda for zero, usa o stepSize_quantity como m√≠nimo
        if (parseFloat(formatted) === 0 && stepSize_quantity > 0) {
          formatted = stepSize_quantity.toString();
        }

        // Limita o n√∫mero de casas decimais para evitar "decimal too long"
        const maxDecimals = Math.min(decimals, 4);
        const finalFormatted = parseFloat(formatted).toFixed(maxDecimals).toString();

        // Valida√ß√£o final: se ainda for zero, usa o m√≠nimo poss√≠vel
        if (parseFloat(finalFormatted) === 0) {
          return stepSize_quantity > 0 ? stepSize_quantity.toString() : '0.0001';
        }

        return finalFormatted;
      };

      // Debug: Verifica a quantidade antes da formata√ß√£o
      Logger.info(`üîç [DEBUG] Valores na createLimitOrderWithTriggers:`);
      Logger.info(`   ‚Ä¢ Quantity (raw): ${quantity}`);
      Logger.info(`   ‚Ä¢ Quantity (validated): ${finalQuantity}`);
      Logger.info(`   ‚Ä¢ Quantity (formatted): ${formatQuantity(finalQuantity)}`);
      Logger.info(`   ‚Ä¢ Entry (raw): ${entry}`);
      Logger.info(`   ‚Ä¢ Entry (formatted): ${formatPrice(entry)}`);
      Logger.info(`   ‚Ä¢ Market decimals: quantity=${decimal_quantity}, price=${decimal_price}`);

      // Valida se a quantidade √© positiva
      if (finalQuantity <= 0) {
        throw new Error(
          `Quantidade inv√°lida: ${finalQuantity}. Original: ${quantity}, Entry: ${entry}`
        );
      }

      // Calcula o valor da ordem para verificar margem
      const orderValue = finalQuantity * entry;
      Logger.info(`   üí∞ [DEBUG] Valor da ordem: $${orderValue.toFixed(2)}`);

      // Verifica se o pre√ßo est√° muito pr√≥ximo do pre√ßo atual (pode causar "Order would immediately match")
      const currentPrice = await this.getCurrentPrice(market);
      if (currentPrice) {
        const priceDiff = Math.abs(entry - currentPrice) / currentPrice;
        const minSpreadPercent = 0.001; // 0.1% de spread m√≠nimo (reduzido para compatibilidade)

        if (priceDiff < minSpreadPercent) {
          Logger.info(
            `   ‚ö†Ô∏è  ${market}: Pre√ßo muito pr√≥ximo do atual (${priceDiff.toFixed(4)}), ajustando...`
          );
          // Ajusta o pre√ßo para ter pelo menos 0.1% de spread
          const minSpread = currentPrice * minSpreadPercent;
          if (action === 'long') {
            entry = currentPrice - minSpread;
          } else {
            entry = currentPrice + minSpread;
          }
          Logger.info(
            `   ‚úÖ ${market}: Pre√ßo ajustado para ${formatPrice(entry)} (spread: ${(minSpreadPercent * 100).toFixed(1)}%)`
          );
        }
      }

      // Prepara o corpo da requisi√ß√£o para a ordem LIMIT com stop loss e take profit integrados
      const orderBody = {
        symbol: market,
        side: action === 'long' ? 'Bid' : 'Ask',
        orderType: 'Limit',
        postOnly: true,
        quantity: formatQuantity(finalQuantity),
        price: formatPrice(entry),
        timeInForce: 'GTC',
        selfTradePrevention: 'RejectTaker',
        clientId: await OrderController.generateUniqueOrderId(config),
      };

      // Adiciona par√¢metros de stop loss se fornecido
      if (stop) {
        orderBody.stopLossTriggerBy = 'LastPrice';
        orderBody.stopLossTriggerPrice = formatPrice(stop);
        orderBody.stopLossLimitPrice = formatPrice(stop);
        Logger.info(`üõë Stop Loss configurado: ${market} @ ${formatPrice(stop)}`);
      }

      // Adiciona par√¢metros de take profit se fornecido
      if (target) {
        orderBody.takeProfitTriggerBy = 'LastPrice';
        orderBody.takeProfitTriggerPrice = formatPrice(target);
        orderBody.takeProfitLimitPrice = formatPrice(target);
        Logger.info(`üéØ Take Profit configurado: ${market} @ ${formatPrice(target)}`);
      }

      Logger.info(
        `üöÄ [${botName}] Criando ordem LIMIT: ${market} ${action.toUpperCase()} @ $${formatPrice(entry)}`
      );
      Logger.info(`   üìã Detalhes da ordem:`, {
        symbol: market,
        side: orderBody.side,
        quantity: formatQuantity(finalQuantity),
        price: formatPrice(entry),
        stopLoss: stop ? formatPrice(stop) : 'N/A',
        takeProfit: target ? formatPrice(target) : 'N/A',
        orderValue: (finalQuantity * entry).toFixed(2),
      });

      try {
        // üîß MIGRA√á√ÉO: Usa ExchangeManager em vez de Order direto
        const exchangeManager = OrderController.getExchangeManager(config);
        const response = await exchangeManager.executeOrder(orderBody, config.apiKey, config.apiSecret);

        if (response && (response.orderId || response.id)) {
          const orderId = response.orderId || response.id;
          Logger.info(`‚úÖ [${botName}] Ordem criada com sucesso: ${market} (ID: ${orderId})`);

          // Registra a ordem para monitoramento (apenas para estrat√©gia PRO_MAX)
          if (botName === 'PRO_MAX') {
            OrderController.addPendingEntryOrder(
              market,
              {
                stop: stop,
                isLong: action === 'long',
                orderId: orderId,
              },
              botName
            );
          }

          return {
            success: true,
            orderId: orderId,
            market: market,
            action: action,
            entry: entry,
            quantity: quantity,
            stop: stop,
            target: target,
            botName: orderData.botName || 'DEFAULT',
          };
        } else {
          throw new Error(`Resposta inv√°lida da API: ${JSON.stringify(response)}`);
        }
      } catch (error) {
        // Log detalhado do erro com todos os par√¢metros
        const errorDetails = {
          market: market,
          action: action,
          entry: entry,
          quantity: quantity,
          validatedQuantity: finalQuantity,
          stop: stop,
          target: target,
          decimal_quantity: decimal_quantity,
          decimal_price: decimal_price,
          stepSize_quantity: stepSize_quantity,
          orderValue: (finalQuantity * entry).toFixed(2),
          formattedQuantity: formatQuantity(finalQuantity),
          formattedEntry: formatPrice(entry),
        };

        Logger.error(
          `‚ùå [ORDER_FAIL] Falha ao criar ordem para ${market}. Detalhes: ${JSON.stringify(errorDetails)}. Erro: ${error.message}`
        );

        return {
          success: false,
          error: error.message,
          details: errorDetails,
        };
      }
    } catch (error) {
      Logger.error(`‚ùå Erro ao criar ordem LIMIT com triggers: ${error.message}`);
      return {
        success: false,
        error: error.message,
      };
    }
  }

  /**
   * Obt√©m o pre√ßo atual de um mercado
   * @param {string} market - S√≠mbolo do mercado
   * @returns {number|null} - Pre√ßo atual ou null se n√£o conseguir obter
   */
  static async getCurrentPrice(market) {
    try {
      const { default: Markets } = await import('../Backpack/Public/Markets.js');
      const markets = new Markets();
      const ticker = await markets.getTicker(market);

      if (ticker && ticker?.lastPrice) {
        return parseFloat(ticker?.lastPrice);
      }

      return null;
    } catch (error) {
      Logger.warn(`‚ö†Ô∏è  [PRICE] Erro ao obter pre√ßo atual para ${market}:`, error.message);
      return null;
    }
  }

  /**
   * Verifica se uma ordem est√° posicionada corretamente como stop loss
   * @param {object} order - Dados da ordem
   * @param {object} position - Dados da posi√ß√£o
   * @returns {boolean} - True se a ordem est√° posicionada corretamente como stop loss
   */
  static isOrderCorrectlyPositionedAsStopLoss(order, position) {
    try {
      // Valida√ß√µes b√°sicas
      if (!order || !position) {
        return false;
      }

      // Precisa ter pelo menos um dos pre√ßos
      if (!order.limitPrice && !order.triggerPrice) {
        return false;
      }

      // Determina se √© posi√ß√£o LONG ou SHORT
      const isLongPosition = parseFloat(position.netQuantity) > 0;
      const entryPrice = parseFloat(position.avgEntryPrice || position.entryPrice);
      const orderPrice = parseFloat(order.triggerPrice || order.limitPrice);

      if (!entryPrice || !orderPrice) {
        return false;
      }

      // Para posi√ß√£o LONG: stop loss deve estar ABAIXO do pre√ßo de entrada
      // Para posi√ß√£o SHORT: stop loss deve estar ACIMA do pre√ßo de entrada
      if (isLongPosition) {
        return orderPrice < entryPrice; // Stop loss abaixo da entrada para LONG
      } else {
        return orderPrice > entryPrice; // Stop loss acima da entrada para SHORT
      }
    } catch (error) {
      Logger.error('‚ùå [ORDER_CONTROLLER] Erro ao validar posi√ß√£o do stop loss:', error.message);
      return false;
    }
  }

  /**
   * Verifica se existe stop loss para uma posi√ß√£o
   * @param {string} symbol - S√≠mbolo do mercado
   * @param {object} position - Dados da posi√ß√£o
   * @param {object} config - Configura√ß√µes (apiKey, apiSecret)
   * @returns {boolean} - True se existe stop loss
   */
  static async hasStopLossForPosition(symbol, position, config = null) {
    try {
      // SEMPRE usa credenciais do config - lan√ßa exce√ß√£o se n√£o dispon√≠vel
      if (!config?.apiKey || !config?.apiSecret) {
        throw new Error(
          'API_KEY e API_SECRET s√£o obrigat√≥rios - deve ser passado da config do bot'
        );
      }
      const apiKey = config.apiKey;
      const apiSecret = config.apiSecret;

      // Busca ordens abertas para o s√≠mbolo
      // üîß MIGRA√á√ÉO: Usa ExchangeManager em vez de Order direto
      const exchangeManager = OrderController.getExchangeManager({ apiKey, apiSecret });
      const openOrders = await exchangeManager.getOpenOrdersForSymbol(symbol, apiKey, apiSecret);

      if (!openOrders || openOrders.length === 0) {
        return false;
      }

      // Filtra apenas ordens de stop loss
      const stopLossOrders = openOrders.filter(order => {
        return order.stopLossTriggerPrice || order.stopLossLimitPrice;
      });

      if (stopLossOrders.length === 0) {
        return false;
      }

      // Verifica se existe uma ordem de stop loss posicionada corretamente
      for (const order of stopLossOrders) {
        if (OrderController.isOrderCorrectlyPositionedAsStopLoss(order, position)) {
          return true;
        }
      }

      return false;
    } catch (error) {
      Logger.error(
        `‚ùå [STOP_LOSS_CHECK] Erro ao verificar stop loss para ${symbol}:`,
        error.message
      );
      return false;
    }
  }

  /**
   * Monitor independente de Take Profit - cria ordens de TP quando n√£o existem
   * @param {object} config - Configura√ß√£o do bot
   * @returns {Promise<void>}
   */
  static async monitorAndCreateTakeProfit(config) {
    try {
      if (!config?.apiKey || !config?.apiSecret) {
        Logger.warn(`‚ö†Ô∏è [TP_MONITOR] API_KEY e API_SECRET s√£o obrigat√≥rios`);
        return;
      }

      // üîß MIGRA√á√ÉO: Usa ExchangeManager em vez de Futures direto
      const exchangeManager = OrderController.getExchangeManager(config);
      const positions = await exchangeManager.getFuturesPositions(config.apiKey, config.apiSecret);
      if (!positions || positions.length === 0) {
        return;
      }

      // üîß CORRE√á√ÉO: Filtra posi√ß√µes realmente abertas (netQuantity > 0)
      const activePositions = positions.filter(position => {
        const netQuantity = parseFloat(position.netQuantity || 0);
        const isActive = Math.abs(netQuantity) > 0;

        if (!isActive) {
          Logger.debug(
            `‚è≠Ô∏è [TP_MONITOR] ${position.symbol}: Posi√ß√£o fechada (netQuantity: ${netQuantity}) - pulando`
          );
        }

        return isActive;
      });

      Logger.debug(
        `üîç [TP_MONITOR] Verificando ${activePositions.length} posi√ß√µes ativas para Take Profit (${positions.length - activePositions.length} posi√ß√µes fechadas filtradas)...`
      );

      for (const position of activePositions) {
        try {
          const isBotPosition = await OrderController.isPositionCreatedByBot(position, config);
          if (!isBotPosition) {
            Logger.debug(
              `‚è≠Ô∏è [TP_MONITOR] ${position.symbol}: Posi√ß√£o n√£o criada pelo bot - pulando`
            );
            continue;
          }

          await OrderController.createTakeProfitForPosition(position, config);
        } catch (error) {
          Logger.error(`‚ùå [TP_MONITOR] Erro ao processar ${position.symbol}:`, error.message);
        }
      }
    } catch (error) {
      Logger.error(`‚ùå [TP_MONITOR] Erro no monitor de Take Profit:`, error.message);
    }
  }

  /**
   * Cria Take Profit para uma posi√ß√£o espec√≠fica
   * @param {object} position - Dados da posi√ß√£o
   * @param {object} config - Configura√ß√£o do bot
   * @returns {Promise<{success: boolean, message: string}>}
   */
  static async createTakeProfitForPosition(position, config) {
    try {
      const symbol = position.symbol;
      const netQuantity = parseFloat(position.netQuantity);

      if (Math.abs(netQuantity) === 0) {
        return { success: false, message: 'Posi√ß√£o fechada' };
      }

      let Account;
      try {
        Account = await AccountController.get({
          apiKey: config.apiKey,
          apiSecret: config.apiSecret,
          strategy: config?.strategyName || 'DEFAULT',
        });
      } catch (error) {
        Logger.error(`‚ùå [TP_CREATE] ${symbol}: Erro ao obter Account:`, error.message);
        return { success: false, message: `Erro ao obter Account: ${error.message}` };
      }

      if (!Account) {
        // Verificar se √© pausa por manuten√ß√£o
        const DepressurizationManager = (await import('../Utils/DepressurizationManager.js'))
          .default;
        if (DepressurizationManager.isSystemInMaintenance()) {
          Logger.debug(`üö´ [TP_CREATE] ${symbol}: Take Profit pausado durante manuten√ß√£o`);
        } else {
          Logger.error(`‚ùå [TP_CREATE] ${symbol}: Account inv√°lido ou sem markets:`, Account);
        }
        return { success: false, message: 'Account inv√°lido ou sem markets' };
      }

      let enableTrailingStop = config?.enableTrailingStop === true;
      let enableHybridStopStrategy = config?.enableHybridStopStrategy === true;

      if (enableTrailingStop && !enableHybridStopStrategy) {
        Logger.debug(
          `‚è≠Ô∏è [TP_CREATE] ${symbol}: Trailing Stop ativo sem op√ß√£o de sa√≠da parcial - Take Profit vai ser monitorado pelo Trailing Stop`
        );
        return { success: false, message: 'Trailing Stop ativo' };
      }

      const hasTakeProfit = await OrderController.hasTakeProfitOrder(symbol, position, config);
      if (hasTakeProfit) {
        Logger.debug(`‚ÑπÔ∏è [TP_CREATE] ${symbol}: Take Profit j√° existe, pulando cria√ß√£o`);
        return { success: false, message: 'Take Profit j√° existe' };
      }

      Logger.info(`üéØ [TP_CREATE] ${symbol}: Criando Take Profit...`);

      // üîß MIGRA√á√ÉO: Usa ExchangeManager para obter markets em vez de Account.markets direto
      const exchangeManager = OrderController.getExchangeManager(config || {});
      const allMarkets = await exchangeManager.getMarkets();
      const marketInfo = allMarkets.find(m => m.symbol === symbol);
      if (!marketInfo) {
        Logger.error(`‚ùå [TP_CREATE] ${symbol}: Market info n√£o encontrada`);
        return { success: false, message: 'Error: Market info n√£o encontrada' };
      }

      const decimal_quantity = marketInfo.decimal_quantity || 6;
      const stepSize_quantity = marketInfo.stepSize_quantity || 0.000001;
      const decimal_price = marketInfo.decimal_price || 2;
      const tickSize = marketInfo.tickSize || null;

      let currentPositions;
      try {
        // üîß MIGRA√á√ÉO: Usa ExchangeManager em vez de Futures direto
        const exchangeManager = OrderController.getExchangeManager(config);
        currentPositions = await exchangeManager.getFuturesPositions(config.apiKey, config.apiSecret);
      } catch (error) {
        Logger.error(`‚ùå [TP_CREATE] ${symbol}: Erro ao obter posi√ß√µes:`, error.message);
        return { success: false, message: `Erro ao obter posi√ß√µes: ${error.message}` };
      }

      if (!currentPositions || !Array.isArray(currentPositions)) {
        Logger.error(`‚ùå [TP_CREATE] ${symbol}: Posi√ß√µes inv√°lidas:`, currentPositions);
        return { success: false, message: `Posi√ß√µes inv√°lidas: ${currentPositions}` };
      }

      const currentPosition = currentPositions.find(p => p.symbol === symbol);
      if (!currentPosition || Math.abs(parseFloat(currentPosition.netQuantity)) === 0) {
        Logger.warn(`‚ö†Ô∏è [TP_CREATE] ${symbol}: Posi√ß√£o n√£o encontrada ou j√° fechada`);
        return { success: false, message: `Posi√ß√£o n√£o encontrada ou j√° fechada` };
      }

      const currentNetQuantity = parseFloat(currentPosition.netQuantity);
      const currentIsLong = currentNetQuantity > 0;
      const entryPrice = parseFloat(currentPosition.entryPrice);

      let takeProfitPrice = null;
      let takeProfitQuantity;

      if (enableHybridStopStrategy) {
        const positionSide = currentIsLong ? 'LONG' : 'SHORT';
        const originalOrder = await OrdersService.getOriginalOpeningOrder(
          symbol,
          config.id,
          positionSide
        );

        if (originalOrder) {
          const originalQuantity = Math.abs(parseFloat(originalOrder.quantity));
          const currentQuantity = Math.abs(currentNetQuantity);

          if (currentQuantity < originalQuantity) {
            Logger.info(
              `‚è≠Ô∏è [TP_PARTIAL_SKIP] ${symbol} (${positionSide}): Posi√ß√£o reduzida (${currentQuantity} < ${originalQuantity}) - TP parcial j√° executado`
            );
            return { success: false, message: 'Posi√ß√£o foi reduzida - TP parcial j√° executado' };
          }

          Logger.debug(
            `‚úÖ [TP_PARTIAL_CHECK] ${symbol} (${positionSide}): OK para TP parcial (${currentQuantity} >= ${originalQuantity})`
          );
        } else {
          Logger.warn(
            `‚ö†Ô∏è [TP_PARTIAL_SKIP] ${symbol}: Ordem original n√£o encontrada (botId: ${config.id}, side: ${positionSide})`
          );
          return {
            success: false,
            message: 'Ordem original n√£o encontrada - posi√ß√£o pode ser manual',
          };
        }

        // Modo H√≠brido: Usa ATR para calcular TP parcial
        const partialTakeProfitPercentage = Number(config?.partialTakeProfitPercentage || 50);
        const atrValue = await OrderController.getAtrValue(symbol);

        if (atrValue && atrValue > 0) {
          const atrMultiplier = Number(config?.partialTakeProfitAtrMultiplier || 1.5);
          takeProfitPrice = OrderController.calculateAtrTakeProfitPrice(
            currentPosition,
            atrValue,
            atrMultiplier
          );
          takeProfitQuantity = (Math.abs(currentNetQuantity) * partialTakeProfitPercentage) / 100;

          Logger.info(
            `üìä [TP_HYBRID] ${symbol}: TP Parcial ${partialTakeProfitPercentage}% - Pre√ßo: $${takeProfitPrice?.toFixed(4)}, Qty: ${takeProfitQuantity.toFixed(6)}`
          );
        } else {
          Logger.info(
            `‚ö†Ô∏è [TP_HYBRID] ${symbol}: ATR n√£o dispon√≠vel ou inv√°lido (${atrValue}), usando TP total`
          );
          enableHybridStopStrategy = false;
          takeProfitQuantity = Math.abs(currentNetQuantity);
        }
      } else {
        const minProfitPercentage = Number(config?.minProfitPercentage);

        let leverage = 1;
        try {
          const Account = await AccountController.get({
            apiKey: config.apiKey,
            apiSecret: config.apiSecret,
            strategy: config?.strategyName || 'DEFAULT',
          });
          if (Account && Account.leverage) {
            const rawLeverage = parseFloat(Account.leverage);
            leverage = validateLeverageForSymbol(symbol, rawLeverage);
            Logger.info(
              `üîß [TP_TRADITIONAL] ${symbol}: Alavancagem ${leverage}x (validada, original: ${rawLeverage}x)`
            );
          }
        } catch (error) {
          Logger.warn(
            `‚ö†Ô∏è [TP_TRADITIONAL] ${symbol}: Erro ao obter alavancagem, usando 1x: ${error.message}`
          );
        }

        // üîß CORRE√á√ÉO CR√çTICA: Calcula o TP real considerando a alavancagem
        const actualProfitPct = minProfitPercentage / leverage;

        Logger.info(
          `üîß [TP_TRADITIONAL] ${symbol}: TP - Bruto: ${minProfitPercentage}%, Real: ${actualProfitPct.toFixed(2)}% (leverage ${leverage}x)`
        );

        // Calcula o pre√ßo de TP considerando a alavancagem
        if (currentIsLong) {
          // Para LONG: TP acima do pre√ßo de entrada
          takeProfitPrice = entryPrice * (1 + actualProfitPct / 100);
        } else {
          // Para SHORT: TP abaixo do pre√ßo de entrada
          takeProfitPrice = entryPrice * (1 - actualProfitPct / 100);
        }

        // üîß CORRE√á√ÉO: Garante que a quantidade seja total quando n√£o √© h√≠brido
        takeProfitQuantity = Math.abs(currentNetQuantity);

        Logger.info(
          `üìä [TP_TRADITIONAL] ${symbol}: TP Total ${minProfitPercentage}% (efetivo ${actualProfitPct.toFixed(2)}%) - Pre√ßo: $${takeProfitPrice?.toFixed(4)}, Qty: ${takeProfitQuantity.toFixed(6)}`
        );
      }

      if (!takeProfitPrice || takeProfitPrice <= 0 || isNaN(takeProfitPrice)) {
        Logger.error(
          `‚ùå [TP_CREATE] ${symbol}: Pre√ßo de TP inv√°lido: ${takeProfitPrice} (entryPrice=${entryPrice}, isLong=${config?.isLong})`
        );
        return {
          success: false,
          message: `Pre√ßo de TP inv√°lido: ${takeProfitPrice} (entryPrice=${entryPrice}, isLong=${config?.isLong})`,
        };
      }

      // Fun√ß√£o para formatar quantidade corretamente
      const formatQuantity = value => {
        if (value <= 0) {
          throw new Error(`Quantidade deve ser positiva: ${value}`);
        }
        let formatted = parseFloat(value).toFixed(decimal_quantity);
        if (parseFloat(formatted) === 0 && stepSize_quantity > 0) {
          return stepSize_quantity.toString();
        }
        return formatted.toString();
      };

      try {
        const OrderModule = await import('../Backpack/Authenticated/Order.js');
        const openOrders = await OrderModule.default.getOpenOrders(
          symbol,
          'PERP',
          config.apiKey,
          config.apiSecret
        );
        if (Array.isArray(openOrders)) {
          const closeSide = currentIsLong ? 'Ask' : 'Bid';
          const existingReduceOnly = openOrders.filter(
            o => o.symbol === symbol && o.reduceOnly === true && o.side === closeSide
          );

          Logger.debug(
            `üîç [TP_CREATE] ${symbol}: Ordens reduceOnly encontradas: ${existingReduceOnly.length}`
          );
          existingReduceOnly.forEach((order, index) => {
            Logger.info(
              `üîç [TP_CREATE] ${symbol}: Ordem ${index + 1} - ID: ${order.id}, Side: ${order.side}, Qty: ${order.triggerQuantity}, Price: ${order.price}`
            );
          });

          const existingQty = existingReduceOnly.reduce(
            (sum, o) => sum + Math.abs(parseFloat(o.triggerQuantity)),
            0
          );

          // Se j√° existe qualquer TP parcial aberto, n√£o criar outro (evita duplicados)
          if (existingQty > 0) {
            Logger.debug(
              `üîç [TP_CREATE] ${symbol}: Verificando TPs existentes - Qty existente: ${existingQty}, enableHybrid: ${enableHybridStopStrategy}`
            );

            if (enableHybridStopStrategy) {
              const partialPercentage = Number(config?.partialTakeProfitPercentage || 50);
              const desiredPartial = Math.abs(currentNetQuantity) * (partialPercentage / 100);
              const tolerance = desiredPartial * 0.95;

              Logger.debug(
                `üîç [TP_CREATE] ${symbol}: TP Parcial - Posi√ß√£o: ${currentNetQuantity}, %: ${partialPercentage}%, Desejado: ${desiredPartial}, Toler√¢ncia: ${tolerance}`
              );

              // Verifica se as ordens existentes s√£o realmente TPs parciais (n√£o totais)
              const isPartialTP = existingReduceOnly.some(order => {
                const orderQty = Math.abs(parseFloat(order.triggerQuantity));
                const positionQty = Math.abs(currentNetQuantity);
                const isPartial = orderQty < positionQty * 0.99; // 99% da posi√ß√£o = parcial

                Logger.debug(
                  `üîç [TP_CREATE] ${symbol}: Ordem ${order.id} - Qty: ${orderQty}, Posi√ß√£o: ${positionQty}, √â parcial: ${isPartial}`
                );
                return isPartial;
              });

              if (existingQty >= tolerance && isPartialTP) {
                Logger.debug(
                  `‚ÑπÔ∏è [TP_CREATE] ${symbol}: TP parcial j√° existe cobrindo ${existingQty} >= desejado ${desiredPartial}. Ignorando.`
                );
                Logger.debug(`‚úÖ [TP_CREATE] ${symbol}: Saindo da fun√ß√£o - TP parcial j√° existe.`);
                return {
                  success: true,
                  message: `TP parcial j√° existe cobrindo ${existingQty} >= desejado ${desiredPartial}. Ignorando.`,
                };
              } else if (existingQty >= tolerance && !isPartialTP) {
                Logger.debug(
                  `‚ö†Ô∏è [TP_CREATE] ${symbol}: TP total existe (${existingQty}) mas queremos parcial. Continuando cria√ß√£o.`
                );
              } else {
                Logger.debug(
                  `‚ÑπÔ∏è [TP_CREATE] ${symbol}: TP existente insuficiente (${existingQty} < ${tolerance}). Continuando cria√ß√£o.`
                );
              }
            }
          }
        }
      } catch (dupErr) {
        Logger.warn(
          `‚ö†Ô∏è [TP_CREATE] ${symbol}: Falha ao verificar TPs existentes: ${dupErr.message}`
        );
      }

      Logger.debug(
        `üìä [TP_CREATE] ${symbol}: Posi√ß√£o atual: ${currentNetQuantity}, TP Qty: ${takeProfitQuantity}`
      );

      // Verifica se a quantidade √© v√°lida
      if (takeProfitQuantity <= 0) {
        Logger.error(`‚ùå [TP_CREATE] ${symbol}: Quantidade de TP inv√°lida: ${takeProfitQuantity}`);
        return { success: true, message: `Quantidade de TP inv√°lida: ${takeProfitQuantity}` };
      }

      // Verifica se a quantidade n√£o excede a posi√ß√£o atual
      const maxQuantity = Math.abs(currentNetQuantity);
      if (takeProfitQuantity > maxQuantity) {
        Logger.error(
          `‚ùå [TP_CREATE] ${symbol}: Quantidade de TP (${takeProfitQuantity}) excede posi√ß√£o atual (${maxQuantity})`
        );
        return {
          success: true,
          message: `Quantidade de TP (${takeProfitQuantity}) excede posi√ß√£o atual (${maxQuantity}`,
        };
      }

      // Verifica se o pre√ßo √© v√°lido
      if (!takeProfitPrice || takeProfitPrice <= 0) {
        Logger.error(`‚ùå [TP_CREATE] ${symbol}: Pre√ßo de TP inv√°lido: ${takeProfitPrice}`);
        return { success: true, message: `Pre√ßo de TP inv√°lido: ${takeProfitPrice}` };
      }

      const formattedLimitPrice = OrderController.formatPriceSafely(
        takeProfitPrice,
        decimal_price,
        tickSize
      );

      const quantity = formatQuantity(takeProfitQuantity);

      const takeProfitOrder = {
        symbol: symbol,
        side: currentIsLong ? 'Ask' : 'Bid',
        orderType: 'Market',
        reduceOnly: true,
        quantity: quantity,
        triggerPrice: formattedLimitPrice,
        triggerQuantity: quantity,
        timeInForce: 'GTC',
        clientId: await OrderController.generateUniqueOrderId(config),
      };

      Logger.debug(
        `üìä [TP_CREATE] ${symbol}: Enviando ordem TP - Side: ${takeProfitOrder.side}, Qty: ${takeProfitOrder.quantity}, Price: ${takeProfitOrder.price || takeProfitOrder.triggerPrice}, Current Position: ${currentNetQuantity}`
      );

      const OrderModule = await import('../Backpack/Authenticated/Order.js');
      const result = await OrderModule.default.executeOrder(
        takeProfitOrder,
        config.apiKey,
        config.apiSecret
      );

      if (result && result.id) {
        Logger.info(`‚úÖ [TP_CREATE] ${symbol}: Take Profit criado com sucesso - ID: ${result.id}`);

        // Registra a ordem no sistema de persist√™ncia
        await BotOrdersManager.addOrder(
          config.id,
          result.id,
          symbol,
          currentIsLong ? 'SELL' : 'BUY',
          takeProfitQuantity,
          takeProfitPrice,
          'TAKE_PROFIT',
          result.exchangeCreatedAt || null,
          takeProfitOrder.clientId // Passa o clientId gerado
        );
        return { success: true, message: 'Sucesso.' };
      } else {
        Logger.error(`‚ùå [TP_CREATE] ${symbol}: Falha ao criar Take Profit - Result:`, result);
        return { success: false, message: `Falha ao criar Take Profit - Error: ${result?.error}` };
      }
    } catch (error) {
      Logger.error(
        `‚ùå [TP_CREATE] Erro ao criar Take Profit para ${position.symbol}:`,
        error.message
      );
      return { success: false, message: `Falha ao criar Take Profit - Error: ${error.message}` };
    }
  }

  /**
   * Verifica se j√° existe ordem de Take Profit para uma posi√ß√£o
   * @param {string} symbol - S√≠mbolo
   * @param {object} position - Dados da posi√ß√£o
   * @param {object} config - Configura√ß√£o do bot
   * @returns {Promise<boolean>}
   */
  static async hasTakeProfitOrder(symbol, position, config) {
    try {
      // Verifica cache primeiro
      const cacheKey = `${symbol}_TP_${position.netQuantity > 0 ? 'LONG' : 'SHORT'}`;
      const cached = OrderController.takeProfitCheckCache.get(cacheKey);
      const now = Date.now();

      if (cached && now - cached.lastCheck < OrderController.takeProfitCheckCacheTimeout) {
        Logger.debug(`üîç [TP_CHECK] ${symbol}: Cache hit - HasTakeProfit: ${cached.hasTakeProfit}`);
        return cached.hasTakeProfit;
      }

      const OrderModule = await import('../Backpack/Authenticated/Order.js');
      const orders = await OrderModule.default.getOpenOrders(
        symbol,
        'PERP',
        config.apiKey,
        config.apiSecret
      );
      const netQuantity = parseFloat(position.netQuantity);
      const isLong = netQuantity > 0;

      Logger.debug(
        `üîç [TP_CHECK] ${symbol}: Verificando TP existente - Posi√ß√£o: ${netQuantity} (${isLong ? 'LONG' : 'SHORT'})`
      );
      Logger.debug(`üîç [TP_CHECK] ${symbol}: Ordens encontradas: ${orders?.length || 0}`);

      let hasTakeProfit = false;

      if (orders && orders.length > 0) {
        hasTakeProfit = await StopLossUtilsModule.hasTakeProfit(symbol, position, config);

        const positionQty = Math.abs(netQuantity);
        let existingTpQty = 0;

        const enableHybridStopStrategy = config?.enableHybridStopStrategy === true;

        Logger.debug(
          `üîç [TP_CREATE] ${symbol}: Verificando TPs existentes - Qty existente: ${existingTpQty}, enableHybrid: ${enableHybridStopStrategy}`
        );
        Logger.debug(
          `üîç [TP_CREATE] ${symbol}: Coverage ratio: ${(existingTpQty / positionQty).toFixed(2)}x (${existingTpQty} / ${positionQty})`
        );

        if (existingTpQty > 0) {
          if (enableHybridStopStrategy) {
            const partialTakeProfitPercentage = Number(config?.partialTakeProfitPercentage || 50);
            const expectedPartialQty = (positionQty * partialTakeProfitPercentage) / 100;
            const minPartialThreshold = expectedPartialQty * 0.99; // 99% do esperado como m√≠nimo

            Logger.debug(
              `üîç [TP_CHECK] ${symbol}: TP H√≠brido - Esperado: ${expectedPartialQty.toFixed(6)} (${partialTakeProfitPercentage}%), M√≠nimo: ${minPartialThreshold.toFixed(6)}, Existente: ${existingTpQty.toFixed(6)}`
            );

            if (existingTpQty >= minPartialThreshold) {
              Logger.debug(
                `‚úÖ [TP_CHECK] ${symbol}: TP parcial suficiente encontrado (${existingTpQty.toFixed(6)} >= ${minPartialThreshold.toFixed(6)})`
              );
              hasTakeProfit = true;
            }
          } else {
            const coverageRatio = existingTpQty / positionQty;

            if (coverageRatio >= 2.0) {
              Logger.warn(
                `‚ö†Ô∏è [TP_CREATE] ${symbol}: TP duplicado detectado (${existingTpQty} vs posi√ß√£o ${positionQty}). Bloqueando cria√ß√£o.`
              );
              hasTakeProfit = true;
            } else if (coverageRatio >= 0.9) {
              Logger.debug(
                `‚úÖ [TP_CHECK] ${symbol}: TP total suficiente encontrado (${existingTpQty.toFixed(6)} >= ${(positionQty * 0.9).toFixed(6)})`
              );
              hasTakeProfit = true;
            } else {
              Logger.warn(
                `‚ö†Ô∏è [TP_CREATE] ${symbol}: TP existente √© parcial (${existingTpQty}) mas queremos total. Continuando cria√ß√£o.`
              );
            }
          }
        }
      }

      OrderController.takeProfitCheckCache.set(cacheKey, {
        lastCheck: now,
        hasTakeProfit: hasTakeProfit,
      });

      Logger.debug(
        `${hasTakeProfit ? '‚úÖ' : '‚ùå'} [TP_CHECK] ${symbol}: ${hasTakeProfit ? 'TP encontrado' : 'Nenhum TP encontrado'}, cache atualizado`
      );
      return hasTakeProfit;
    } catch (error) {
      Logger.error(`‚ùå [TP_CHECK] Erro ao verificar TP para ${symbol}:`, error.message);
      return false;
    }
  }

  /**
   * Calcula pre√ßo de Take Profit baseado em ATR
   * @param {object} position - Dados da posi√ß√£o
   * @param {number} atrValue - Valor do ATR
   * @param {number} multiplier - Multiplicador ATR
   * @returns {number} - Pre√ßo do Take Profit
   */
  static calculateAtrTakeProfitPrice(position, atrValue, multiplier = 1.5) {
    try {
      const entryPrice = parseFloat(position.entryPrice);
      const netQuantity = parseFloat(position.netQuantity);
      const isLong = netQuantity > 0;

      if (!entryPrice || entryPrice <= 0 || !atrValue || atrValue <= 0 || isNaN(atrValue)) {
        Logger.warn(
          `‚ö†Ô∏è [TP_ATR] Valores inv√°lidos para c√°lculo: entryPrice=${entryPrice}, atrValue=${atrValue}`
        );
        return null;
      }

      const atrDistance = atrValue * multiplier;

      if (isNaN(atrDistance)) {
        Logger.warn(
          `‚ö†Ô∏è [TP_ATR] ATR distance √© NaN: atrValue=${atrValue}, multiplier=${multiplier}`
        );
        return null;
      }

      const takeProfitPrice = isLong ? entryPrice + atrDistance : entryPrice - atrDistance;

      if (isNaN(takeProfitPrice) || takeProfitPrice <= 0) {
        Logger.warn(
          `‚ö†Ô∏è [TP_ATR] Pre√ßo de TP calculado √© inv√°lido: ${takeProfitPrice} (entryPrice=${entryPrice}, atrDistance=${atrDistance})`
        );
        return null;
      }

      return takeProfitPrice;
    } catch (error) {
      Logger.error(`‚ùå [TP_ATR] Erro ao calcular TP ATR:`, error.message);
      return null;
    }
  }

  /**
   * Verifica se uma posi√ß√£o foi criada pelo bot
   * @param {object} position - Dados da posi√ß√£o
   * @param {object} config - Configura√ß√£o do bot
   * @returns {Promise<boolean>}
   */
  static async isPositionCreatedByBot(position, config) {
    try {
      const symbol = position.symbol;
      const netQuantity = parseFloat(position.netQuantity || 0);

      if (Math.abs(netQuantity) === 0) {
        return false; // Posi√ß√£o fechada
      }

      // Busca hist√≥rico de fills (ordens executadas) para este s√≠mbolo
      const { default: History } = await import('../Backpack/Authenticated/History.js');
      const fills = await History.getFillHistory(
        symbol,
        null,
        null,
        null,
        100,
        0,
        null,
        'PERP',
        null,
        config.apiKey,
        config.apiSecret
      );

      if (!fills || fills.length === 0) {
        Logger.info(`‚ö†Ô∏è [BOT_VALIDATION] ${symbol}: Nenhum fill encontrado`);
        return false;
      }

      // Verifica se existe alguma ordem executada com clientId do bot
      const botClientOrderId = config.botClientOrderId?.toString() || '';

      const botFill = fills.find(fill => {
        const fillClientId = fill.clientId?.toString() || '';

        // Verifica se o clientId come√ßa com o botClientOrderId
        const isBotClientId = fillClientId.startsWith(botClientOrderId);

        return isBotClientId;
      });

      if (botFill) {
        Logger.debug(
          `‚úÖ [BOT_VALIDATION] ${symbol}: Posi√ß√£o criada pelo bot - ClientId: ${botFill.clientId}`
        );
        return true;
      } else {
        Logger.debug(
          `‚ùå [BOT_VALIDATION] ${symbol}: Posi√ß√£o n√£o criada pelo bot - ClientIds encontrados: ${fills.map(f => f.clientId).join(', ')}`
        );
        return false;
      }
    } catch (error) {
      Logger.error(
        `‚ùå [BOT_VALIDATION] Erro ao validar posi√ß√£o ${position.symbol}:`,
        error.message
      );
      return false;
    }
  }

  /**
   * Obt√©m valor do ATR para um s√≠mbolo
   * @param {string} symbol - S√≠mbolo
   * @param {string} timeframe - Timeframe (padr√£o: 30m)
   * @returns {Promise<number|null>}
   */
  static async getAtrValue(symbol, timeframe = '30m') {
    try {
      const Markets = await import('../Backpack/Public/Markets.js');
      const markets = new Markets.default();
      const candles = await markets.getKLines(symbol, timeframe, 30);

      if (!candles || candles.length < 14) {
        Logger.warn(`‚ö†Ô∏è [TP_ATR] ${symbol}: Candles insuficientes (${candles?.length || 0} < 14)`);
        return null;
      }

      const { calculateIndicators } = await import('../Decision/Indicators.js');
      const indicators = await calculateIndicators(candles, timeframe, symbol);

      const atrValue = indicators.atr?.atr || indicators.atr?.value || null;

      if (!atrValue || atrValue <= 0 || isNaN(atrValue)) {
        Logger.warn(`‚ö†Ô∏è [TP_ATR] ${symbol}: ATR inv√°lido: ${atrValue}`);
        return null;
      }

      Logger.info(`üìä [TP_ATR] ${symbol}: ATR v√°lido: ${atrValue}`);
      return atrValue;
    } catch (error) {
      Logger.error(`‚ùå [TP_ATR] Erro ao obter ATR para ${symbol}:`, error.message);
      return null;
    }
  }

  /**
   * Verifica se o limite de ordens por s√≠mbolo j√° foi atingido
   * Combina ordens abertas na exchange + ordens PENDING/SENT no banco local
   * @param {string} symbol - S√≠mbolo da moeda
   * @param {Object} config - Configura√ß√£o do bot com credenciais
   * @param {number} maxOpenOrders - Limite m√°ximo de ordens por s√≠mbolo
   * @returns {Promise<boolean>} True se limite atingido, false caso contr√°rio
   */
  static async checkOrderLimit(symbol, config, maxOpenOrders) {
    try {
      Logger.debug(`[ORDER_LIMIT_CHECK] Verificando limite para ${symbol} (m√°x: ${maxOpenOrders})`);

      // 1. Busca ordens abertas na exchange via API
      const { default: Order } = await import('../Backpack/Authenticated/Order.js');
      const orderInstance = new Order();

      // Busca ordens regulares e condicionais
      const regularOrders = await orderInstance.getOpenOrders(
        symbol,
        'PERP',
        config.apiKey,
        config.apiSecret
      );
      const triggerOrders = await orderInstance.getOpenTriggerOrders(
        symbol,
        'PERP',
        config.apiKey,
        config.apiSecret
      );

      // Unifica todas as ordens da exchange
      const allExchangeOrders = [...(regularOrders || []), ...(triggerOrders || [])];

      // üö® VALIDA√á√ÉO CR√çTICA: Verifica se allExchangeOrders √© um array v√°lido
      if (!Array.isArray(allExchangeOrders)) {
        Logger.error(
          `‚ùå [ORDER_LIMIT_CHECK] ${symbol}: allExchangeOrders n√£o √© um array v√°lido - type: ${typeof allExchangeOrders}`
        );
        return false; // Permite criar ordem se n√£o conseguir verificar limite
      }

      // Filtra ordens do bot espec√≠fico
      const botClientOrderId = config.botClientOrderId?.toString() || '';
      const botExchangeOrders = allExchangeOrders.filter(order => {
        const clientId = order.clientId?.toString() || '';
        return clientId.startsWith(botClientOrderId) && order.symbol === symbol;
      });

      // 2. Busca ordens no banco local que n√£o est√£o em estado terminal
      const { default: OrdersService } = await import('../Services/OrdersService.js');
      const localPendingOrders = await OrdersService.dbService.getAll(
        `SELECT * FROM bot_orders
         WHERE botId = ? AND symbol = ?
         AND status NOT IN ('CLOSED', 'CANCELLED', 'FILLED')
         AND externalOrderId IS NOT NULL`,
        [config.botId, symbol]
      );

      // üö® VALIDA√á√ÉO CR√çTICA: Verifica se localPendingOrders √© um array v√°lido
      if (!Array.isArray(localPendingOrders)) {
        Logger.error(
          `‚ùå [ORDER_LIMIT_CHECK] ${symbol}: localPendingOrders n√£o √© um array v√°lido - type: ${typeof localPendingOrders}`
        );
        return false; // Permite criar ordem se n√£o conseguir verificar limite
      }

      // 3. Soma contagem total
      const exchangeOrdersCount = botExchangeOrders.length;
      const localPendingCount = localPendingOrders.length;
      const totalOpenAndPendingOrders = exchangeOrdersCount + localPendingCount;

      Logger.debug(
        `[ORDER_LIMIT_CHECK] ${symbol}: Exchange=${exchangeOrdersCount}, Local=${localPendingCount}, Total=${totalOpenAndPendingOrders}, Limite=${maxOpenOrders}`
      );

      // 4. Verifica se excede o limite
      const limitExceeded = totalOpenAndPendingOrders >= maxOpenOrders;

      if (limitExceeded) {
        Logger.warn(
          `‚ö†Ô∏è [ORDER_LIMIT_CHECK] ${symbol}: Limite atingido! ${totalOpenAndPendingOrders}/${maxOpenOrders} ordens`
        );
      }

      return limitExceeded;
    } catch (error) {
      Logger.error(
        `‚ùå [ORDER_LIMIT_CHECK] Erro ao verificar limite para ${symbol}:`,
        error.message
      );
      // Em caso de erro, permite a cria√ß√£o da ordem (fail-safe)
      return false;
    }
  }
}

export default OrderController;
